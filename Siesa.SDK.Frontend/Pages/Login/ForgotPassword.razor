@using Siesa.SDK.Frontend.Components.Fields
@using Siesa.SDK.Frontend.Components.Visualization
@using Siesa.SDK.Shared.Services
@using Siesa.SDK.Shared.DataAnnotations
@using Siesa.SDK.Frontend.Components.Layout
@using Siesa.SDK.Components.Visualization

@inject IAuthenticationService AuthenticationService
@inject SDKNotificationService NotificationService


<div class="col-12 p-0 text-center pt-4">
    <div class="alert alert-success" role="alert">
        <ResourceViewer ResourceTag="Custom.PortalLogin.PasswordRecoverMessage" RowidCulture=@RowidCulture />
    </div>
</div>
    <div class="col-12 offset-sm-2 col-sm-8 offset-md-1 col-md-10 offset-lg-2 col-lg-8 px-md-3 px-lg-0">
        
            <EditForm id="@FormID" Model="@_Model" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit" >
                <DataAnnotationsValidator />
            <div class="form-group ">
                <SDKCharField Placeholder="Digite Correo de Recuperacion" @bind-Value="@_Model.EmailRecovery"/>
            </div>
            <div class="form-group ">
                <SDKButton form="@FormID" SubmitFormOnClick="true" RenderStyle="SDKButtonRenderStyle.Primary" CssClass="btn-sm w-100 mt-2">
                    @if (loading)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                <ResourceViewer ResourceTag="BLUser.RecoveryPassword" RowidCulture=@RowidCulture />
                </SDKButton>
            </div>
            </EditForm>
            <SDKButton RenderStyle="SDKButtonRenderStyle.Secondary" CssClass="btn-sm w-100 mt-2" Click="@ActionClick">
                <ResourceViewer ResourceTag="BLUser.Login" RowidCulture=@RowidCulture />
            </SDKButton>
    </div>

@code{


    
    [Parameter] public EventCallback<MouseEventArgs> Click { get; set; }
    [Parameter] public short RowidCulture { get; set; }
    [Parameter] public bool IsPortal { get; set; }
    public string FormID { get; set; } = Guid.NewGuid().ToString();

    private ModelRecoveryPassword _Model = new ModelRecoveryPassword();
    private bool loading;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }


    private async void HandleValidSubmit()
    {
        loading = true;
        AuthenticationService.ForgotPasswordAsync(_Model.EmailRecovery, IsPortal);
        await NotificationService.ShowInfo("Custom.SDK.ForgotPassword.SendEmail", culture: RowidCulture);
        loading = false;
        ActionClick(null);
        StateHasChanged();
    }

    private async void HandleInvalidSubmit()
    {
       _ = NotificationService.ShowError("BLUser.Login.Message.EnterData", culture: RowidCulture);
    }

    public class ModelRecoveryPassword
    {
        [SDKRequired]
        public string EmailRecovery { get; set; }
    }

    private void ActionClick (MouseEventArgs Event)
    {
        if (Click.HasDelegate)
        {
            Click.InvokeAsync(Event);
            StateHasChanged();
        }
    }

}
