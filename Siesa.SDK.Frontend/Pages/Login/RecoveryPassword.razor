@using Siesa.SDK.Frontend.Components.Fields
@using Siesa.SDK.Frontend.Components.Visualization
@using Siesa.SDK.Shared.Services
@using Siesa.SDK.Shared.DataAnnotations
@using Siesa.SDK.Frontend.Components.Layout
@using Siesa.SDK.Components.Visualization
@using Siesa.SDK.Shared.DTOS

@inject NavigationManager NavigationManager
@inject IAuthenticationService AuthenticationService
@inject SDKNotificationService SDKNotificationService


<div class="border_left_md col-12 col-sm-12 col-md-6 col-lg-12">
    <div class="col-12 offset-sm-2 col-sm-8 offset-md-1 col-md-10 offset-lg-2 col-lg-8 px-md-3 px-lg-0">
        <EditForm Model="@_Model" OnValidSubmit="ChangePasswordUser" OnInvalidSubmit="ChangePasswordUserInvalid">
            <DataAnnotationsValidator />
            @if (ValidUser)
            {
                <div class="form-group">
                    <label class="col_form_label col_form_label-sm font-weight-bold" for="Password">
                        <ResourceViewer ResourceTag="Custom.SDK.NewPassword" RowidCulture=@RowidCulture />
                    </label>
                    <SDKCharField Password="true" @bind-Value="@_Model.Password" />
                    <ValidationMessage For="@(() => _Model.Password)" />
                </div>
                <div class="form-group">
                    <label class="col_form_label col_form_label-sm font-weight-bold" for="Password">
                        <ResourceViewer ResourceTag="Custom.SDK.ConfirmNewPassword" RowidCulture=@RowidCulture />
                    </label>
                    <SDKCharField Password="true" @bind-Value="@_Model.ConfirmPassword" />
                    <ValidationMessage For="@(() => _Model.ConfirmPassword)" />
                </div>
                <button class="btn btn-primary btn_primary_def_1 btn-sm w-100 mt-2">
                    @if (loadingChangePassword)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    <ResourceViewer ResourceTag="BLUser.ChangePassword" RowidCulture=@RowidCulture />
                </button>
            }
            else
            {
                <p class="alert alert-danger mt-3 mb-0">
                    <ResourceViewer ResourceTag="Custom.SDK.TokenInvalid" RowidCulture=@RowidCulture />
                </p>
            }
        </EditForm>
    </div>
</div>


@code
{

    [Parameter] public string UserToken { get; set; }
    [Parameter] public short RowidCulture { get; set; }
    [Parameter] public bool IsPortal { get; set; }
    [Parameter] public SDKDbConnection SelectedConnection  { get; set; } = new SDKDbConnection();


    private bool loadingChangePassword;

    private PasswordChangeModel _Model = new PasswordChangeModel();


    private bool ValidUser { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(UserToken))
        {
            ValidUser = await AuthenticationService.ValidateUserToken(UserToken, IsPortal);
        }

        await base.OnParametersSetAsync();
    }

    private async void ChangePasswordUser()
    {
        loadingChangePassword = true;
        try
        {
            var result = await AuthenticationService.ChangePassword(UserToken,SelectedConnection.Rowid, _Model.Password, _Model.ConfirmPassword, IsPortal);

            if (result)
            {
               await SDKNotificationService.ShowSuccess("Custom.SDK.ForgotPassword.ChangePassword", culture: RowidCulture);

               if (IsPortal)
               {
                NavigationManager.NavigateTo($"/Portal/{SelectedConnection.Rowid}", forceLoad: true);
               }else
               {
                NavigationManager.NavigateTo("/login", forceLoad: true);
               }

            }else
            {
                _ = SDKNotificationService.ShowError("Custom.SDK.ForgotPassword.ChangePasswordError", culture: RowidCulture);
            }

            loadingChangePassword = false;

            StateHasChanged();
            
        }
        catch (Exception ex)
        {
            
        }
    }

    private void ChangePasswordUserInvalid()
    {
       _ = SDKNotificationService.ShowError("Custom.SDK.ForgotPassword.ChangePasswordInvalid", culture: RowidCulture);
       loadingChangePassword = false;
       StateHasChanged();
    }
}