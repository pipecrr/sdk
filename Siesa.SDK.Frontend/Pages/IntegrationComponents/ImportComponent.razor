@page "/{BusinessName}/Import"
@using System.Reflection
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using Siesa.SDK.Frontend.Components.Visualization
@using Siesa.SDK.Components.Visualization
@using Siesa.SDK.Shared.Services
@using System.Globalization
@using System.IO
@using System.Text
@using CsvHelper
@using System.ComponentModel.DataAnnotations.Schema
@using Microsoft.AspNetCore.Components.Forms
@using  CsvHelper.Configuration
@using Siesa.SDK.Frontend.Components.Fields
@using System.Dynamic
@using Newtonsoft.Json;
@using System.Collections.Generic

@inherits Siesa.SDK.Frontend.Components.FormManager.ViewModels.DynamicBaseViewModel

@inject IResourceManager ResourceManager
@inject IAuthenticationService AuthenticationService
@inject IJSRuntime JSRuntime
@inject SDKNotificationService NotificationService


<SDKSteps ShowStepsButtons="true" SelectedIndex="@SelectedIndex" SelectedIndexChanged="@OnChange">
    <Steps>
        <SDKStepsItem ResourceTag="Import_File">

            <h5>Descargar Demo:</h5>

            <SDKButton RenderStyle="SDKButtonRenderStyle.Secondary" ResourceTag="Descargar Demo" Click="@Download" />


            <h5>Importar Archivo CSV</h5>

            <InputFile OnChange="@LoadFiles" />


            @if (IsLoadingGrid)
            {
                <p> Previsualización de los primeros registros del archivo cargado:</p>

                @if (Data != null && Data.Count > 0)
                {     
                    <SDKGrid TItem="dynamic"  Data="@Data" >
                        <Columns>
                        
                            @foreach (var propertyKey in ((System.Dynamic.ExpandoObject)Data.FirstOrDefault())?.Select(x => x.Key))
                            {
                                <SDKGridColumn TItem="dynamic" Property="@propertyKey" Title="@propertyKey">
                                    <Template Context="data">
                                        @if (data != null)
                                        {
                                            @GetPropertyValue(data, propertyKey)
                                        }
                                    </Template>
                                </SDKGridColumn>
                            }
                        </Columns>
                    </SDKGrid>

                    <br />

                }else
                {
                    <p>No se encontraron registros en el Archivo </p>
                }
            }
        </SDKStepsItem>
        
        <SDKStepsItem ResourceTag="SKD.Import.MappingData">

            <h4>Confirme los Campos e Importe</h4>

             <SDKGrid TItem="KeyValuePair<string, object>" Data="@GetFirstRow()">
                    <Columns>
                        <SDKGridColumn TItem="KeyValuePair<string, object>" ResourceTag="SDK.Import.Header">
                            <Template Context="data">

                                    @data.Key
                                    
                            </Template>
                        </SDKGridColumn>
                        <SDKGridColumn TItem="KeyValuePair<string, object>" ResourceTag="SDK.Import.FieldsBD" IsActionColumn="true">
                            <Template Context="data">

                                <CascadingValue Value="@this" >
                                            
                                                <MappingData FieldFile=@data FieldsEntity="@Fields"/>

                                </CascadingValue>
                                
                            </Template>
                        </SDKGridColumn>

                        
                        <SDKGridColumn TItem="KeyValuePair<string, object>" ResourceTag="SDK.Import.FieldsBD">
                            <Template Context="data">
                               
                                @data.Value
                            </Template>
                        </SDKGridColumn>
                    </Columns>
                </SDKGrid>

        </SDKStepsItem>

        <SDKStepsItem ResourceTag="Step 3">

            <h4>RenderFragment Step3</h4>

        </SDKStepsItem>

    </Steps>
</SDKSteps>

@code {

    private Dictionary<string, string> Fields = new Dictionary<string,string>();

    private Type EntityType = null;

    public List<dynamic> Data = new List<dynamic>();

    public List<dynamic> DataMapped = new List<dynamic>();

    private bool IsLoadingGrid = false;

    private int SelectedIndex = 0;

    private object GetPropertyValue(System.Dynamic.ExpandoObject obj, string propertyName)
    {
        return ((IDictionary<string, object>)obj)[propertyName];
    }

    private List<KeyValuePair<string, object>> GetFirstRow()
    {
       return ((System.Dynamic.ExpandoObject)Data.First()).ToList();
    } 
        
    protected override async Task OnInitializedAsync()
    {
        await GetEntityFields();

        base.OnInitialized();  
    }

    //AllowedPageSizes 

    private async Task GetEntityFields()
    {   
        EntityType = BusinessObj.BaseObj.GetType();
        var EntityFields = EntityType.GetProperties();

        var _bannedTypes = new List<Type>() { typeof(byte[]),  typeof(string) };

        var ignoreEntityFields = EntityType.GetProperties().Where(
                                                     p => p.PropertyType.IsClass
                                                                    && !p.PropertyType.IsPrimitive
                                                                    && !p.PropertyType.IsEnum
                                                                    && !_bannedTypes.Contains(p.PropertyType)
                                                                    && p.Name != "RowVersion"
                                                                    && p.GetCustomAttribute(typeof(NotMappedAttribute)) == null
                                                     ).Select(p => p.Name).ToArray();

        foreach (var field in EntityFields.Where(x=> !ignoreEntityFields.Contains(x.Name)).ToList())
        {
            var ResourceName = await ResourceManager.GetResource($"{EntityType.Name}.{field.Name}", AuthenticationService.GetRoiwdCulture()); 

            Fields.Add(ResourceName,field.Name);
        }
    }

    private async Task Download()
    {
        using (var stream = new MemoryStream())
        {
            using (var CsvWriter = new CsvWriter(new StreamWriter(stream, Encoding.UTF8), CultureInfo.InvariantCulture))
            {
                List<string> Headers = Fields.Select(x => x.Key).ToList();
                CsvWriter.WriteField(Headers);
                CsvWriter.Flush();
                byte[] bytes = stream.ToArray();

                string fileName = $"{EntityType.Name}";
                await JSRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, bytes);
            }
        }
        
    }

    private async Task LoadFiles(InputFileChangeEventArgs InputFile)
    {
        Data = new List<dynamic>();
        IsLoadingGrid = false;
        using (var stream = new MemoryStream())
        {
            await InputFile.File.OpenReadStream().CopyToAsync(stream);
            stream.Position = 0;
            var csvConfig = new CsvConfiguration(CultureInfo.InvariantCulture)
            {
                HasHeaderRecord = true
            };

            using (var CsvReader = new CsvReader(new StreamReader(stream), csvConfig))
            {
                var records = CsvReader.GetRecords<dynamic>();

                foreach (var record in records)
                {                    
                    ExpandoObject obj = new ExpandoObject();

                    foreach(var prop in record) 
                    {
                        var key = prop.Key;
                        var value = prop.Value;
                        ((IDictionary<string, object>)obj).Add(key, value);
                    }

                    Data.Add(obj);
                }
            }
        }

        IsLoadingGrid = true;
        _ = InvokeAsync(() => StateHasChanged());     
    }

    public void OnChange(int index){
        SelectedIndex = index;

        switch (index)
        {
            case 1:
                if(Data == null || Data.Count == 0)
                {
                    SelectedIndex = 0;
                    NotificationService.ShowError("SDK.Import.ErrorMappingData"); //No se ha cargado ningún archivo
                }
            break;
            case 2:
            NotificationService.ShowInfo("Selected Step 3");
            break;

            default:
            break;
        }

        StateHasChanged();
    }

}
