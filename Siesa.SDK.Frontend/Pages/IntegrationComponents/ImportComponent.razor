
@page "/{BusinessName}/Import"
@using System.Reflection
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using Siesa.SDK.Frontend.Components.Visualization
@using Siesa.SDK.Components.Visualization
@using Siesa.SDK.Shared.Services
@using System.Globalization
@using System.IO
@using System.Text
@using CsvHelper
@using System.ComponentModel.DataAnnotations.Schema
@using Microsoft.AspNetCore.Components.Forms
@using  CsvHelper.Configuration
@using System.Dynamic
@using Newtonsoft.Json
@using System.Collections.Generic
@using Siesa.SDK.Frontend.Components.Fields
@using Siesa.SDK.Shared.DTOS
@using Siesa.SDK.Frontend.Components.Flex
@using DevExpress.Spreadsheet;
@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore
@using Siesa.Global.Enums
@using Siesa.SDK.Shared.Utilities
@using System.Diagnostics
@using Siesa.SDK.Frontend.Utils


@inherits Siesa.SDK.Frontend.Components.FormManager.ViewModels.DynamicBaseViewModel

@inject IResourceManager ResourceManager
@inject IAuthenticationService AuthenticationService
@inject IBackendRouterService BackendRouterService
@inject IJSRuntime JSRuntime
@inject SDKNotificationService NotificationService
@inject SDKGlobalLoaderService SDKGlobalLoaderService

@using Microsoft.Extensions.DependencyInjection
@inject IServiceProvider ServiceProvider

@if(ErrorList!=null && ErrorList.Count>0){
    <ErrorsWindow GeneralErrors="@ErrorList"/>
}


<PageTitle>
    <ResourceViewer ResourceTag="Custom.SDK.Integration.ImportData" />
    <ResourceViewer ResourceTag=@($"{EntityType.Name}.plural") />
</PageTitle>

<SetTopBar>
    <TopBarTitle>
        <ResourceViewer ResourceTag="Custom.SDK.Integration.ImportData" />
        <ResourceViewer ResourceTag=@($"{EntityType.Name}.plural") />
    </TopBarTitle>
</SetTopBar>

<SDKTabs>
    <SDKTab TitleResourceTag="Custom.SDK.Import.TabImport">
        <SDKSteps ShowStepsButtons="true" SelectedIndex="@SelectedIndex" SelectedIndexChanged="@OnChangeSteps">
            <Steps>
                <SDKStepsItem ResourceTag="Custom.SDK.Import.LoadFile">

                    <SDKButton RenderStyle="SDKButtonRenderStyle.Secondary" ResourceTag="Custom.SDK.Import.DownloadTemplate" Click="@DownloadFileTemplate" />

                    <h5><ResourceViewer ResourceTag="Custom.SDK.Import.LoadFile"/></h5>

                    <InputFile OnChange="@LoadFiles" accept=".xls, .xlsx"/>

                    @if (IsLoadingGrid)
                    {
                        <p><ResourceViewer ResourceTag="Custom.SDK.Import.PreviewFileData"/></p>

                        @if (FileData != null && FileData.Count > 0)
                        {     
                            <SDKGrid TItem="dynamic"  Data="@FileData.Take(5)" AllowColumnResize="true" >
                                <Columns>
                                
                                    @foreach (var propertyKey in ((System.Dynamic.ExpandoObject)FileData.FirstOrDefault())?.Select(x => x.Key))
                                    {
                                        @if(((System.Dynamic.ExpandoObject)FileData.FirstOrDefault())?.Select(x => x.Key).Count() > 5)
                                        {
                                            <SDKGridColumn TItem="dynamic" Property="@propertyKey" Title="@propertyKey" Width="300px">
                                                <Template Context="data">
                                                    @if (data != null)
                                                    {
                                                        @GetPropertyValue(data, propertyKey)
                                                    }
                                                </Template>
                                            </SDKGridColumn>
                                        }
                                        else
                                        {
                                        
                                            <SDKGridColumn TItem="dynamic" Property="@propertyKey" Title="@propertyKey">
                                                <Template Context="data">
                                                    @if (data != null)
                                                    {
                                                        @GetPropertyValue(data, propertyKey)
                                                    }
                                                </Template>
                                            </SDKGridColumn>

                                        }
                                    }
                                </Columns>
                            </SDKGrid>

                            <br />

                        }else
                        {
                            <p>No se encontraron registros en el Archivo </p>
                        }
                    }
                </SDKStepsItem>
                
                <SDKStepsItem ResourceTag="Custom.SKD.Import.MappingData" Disabled="@(!IsLoadingGrid)">

                    <h5><ResourceViewer ResourceTag="Custom.SKD.Import.MappingData"/></h5>

                    <SDKGrid TItem="KeyValuePair<string, object>" Data="@GetFirstRow()" AllowColumnResize="true">
                            <Columns>
                                <SDKGridColumn TItem="KeyValuePair<string, object>" ResourceTag="Custom.SDK.Import.GridHeader">
                                    <Template Context="data">

                                            @data.Key
                                            
                                    </Template>
                                </SDKGridColumn>
                                <SDKGridColumn TItem="KeyValuePair<string, object>" ResourceTag="Custom.SDK.Import.GridFieldsEntity" IsActionColumn="true">
                                    <Template Context="data">

                                        <CascadingValue Value="@this" >
                                                    
                                                        <MappingData FieldFile=@data FieldsEntity="@_fieldsEntity" HiddenFields="@HiddenFields"/>

                                        </CascadingValue>
                                        
                                    </Template>
                                </SDKGridColumn>

                                
                                <SDKGridColumn TItem="KeyValuePair<string, object>" ResourceTag="Custom.SDK.Import.GridFirstRow">
                                    <Template Context="data">
                                    
                                        @data.Value
                                    </Template>
                                </SDKGridColumn>
                            </Columns>
                        </SDKGrid>

                </SDKStepsItem>

                <SDKStepsItem ResourceTag="Custom.SDK.Import.PeviewMappingData" Disabled="@(!IsLoadingGrid)">
                    
                    <SDKGrid TItem="dynamic"  Data="@DataMapped.Take(5)" AllowColumnResize="true">
                        <Columns>
                        
                            @foreach (var propertyKey in (DataMapped.FirstOrDefault())?.Select(x => x.Key))
                            {
                                @if(_titleFields.ContainsKey(propertyKey) && !HiddenFields.Contains(propertyKey)){
                                    var title = _titleFields[propertyKey];
                                    @if((DataMapped.FirstOrDefault())?.Select(x => x.Key).Count() > 5)
                                    {
                                        <SDKGridColumn TItem="dynamic" Property="@propertyKey" Title="@title" Width="300px">
                                            <Template Context="data">
                                                
                                                @GetValueDataMapped(data, propertyKey)

                                            </Template>
                                        </SDKGridColumn>
                                        }
                                    else
                                    {
                                    
                                        <SDKGridColumn TItem="dynamic" Property="@propertyKey" Title="@title">
                                            <Template Context="data">
                                                
                                                @GetValueDataMapped(data, propertyKey)

                                            </Template>
                                        </SDKGridColumn>

                                    }
                                }
                            }
                        </Columns>
                    </SDKGrid>

                    <SDKButton RenderStyle="SDKButtonRenderStyle.Secondary" ResourceTag="Custom.SDK.Import.ImportData" Click="@ImportData" />

                    <SDKTextField Value="@JsonObject"  ReadOnly="true"/>

                </SDKStepsItem>

            </Steps>
        </SDKSteps>
    </SDKTab>
    <SDKTab TitleResourceTag="Custom.SDK.Import.DataProcessed">
        <SDKFlex FlexRowId="@FlexRowId" FlexFilters="@filters"></SDKFlex>
    </SDKTab>
</SDKTabs>

@code {

    public int FlexRowId { get; set; } = 52;
    public Dictionary<string, object> filters = new Dictionary<string, object>();
    public List<string> ErrorList { get; set; } = new List<string>();

    private List<string> HiddenFields { get; set; } = new List<string>(); 
    private List<Shared.DTOS.MapFkRelationsImportDTO> ListMapRelationsImport = new ();

    private Dictionary<string, string> _fieldsEntity = new Dictionary<string,string>();
    private Dictionary<string, string> _titleFields = new Dictionary<string,string>();
    private Type EntityType = null;
    private string JsonObject = "";

    public List<dynamic> FileData = new List<dynamic>();

    public List<Dictionary<string, object>> DataMapped = new List<Dictionary<string, object>>();

    private bool IsLoadingGrid = false;

    private int SelectedIndex = 0;

    private SDKRequestImportDataDTO importDataDTO = new SDKRequestImportDataDTO();


    public Dictionary<string, string> _newKeys = new Dictionary<string, string>();

    private object GetValueDataMapped(dynamic obj, string propertyName) =>  ((IDictionary<string, object>)obj)[propertyName];

    private List<KeyValuePair<string, object>> GetFirstRow()
    {
        return ((System.Dynamic.ExpandoObject)FileData.First()).ToList();
    }

    private object GetPropertyValue(System.Dynamic.ExpandoObject obj, string propertyName)
    {
        return ((IDictionary<string, object>)obj)[propertyName];
    }

    private object SetPropertyValue(System.Dynamic.ExpandoObject obj, string propertyName, object value)
    {
        return ((IDictionary<string, object>)obj)[propertyName];
    }

    protected override async Task OnInitializedAsync()
    {
        filters.Add("Feature.BusinessName", BusinessName);
        await GetEntityFields();
        await base.OnInitializedAsync();  
    }

    private async Task GetEntityFields()
    {   
        EntityType = BusinessObj.BaseObj.GetType();
        var EntityFields = EntityType.GetProperties();

        var _bannedTypes = new List<Type>() { typeof(byte[]),  typeof(string) };

        var ignoreEntityFields = EntityFields.Where(p => (p.PropertyType.IsClass
                                                    && !p.PropertyType.IsPrimitive
                                                    && !p.PropertyType.IsEnum
                                                    && !_bannedTypes.Contains(p.PropertyType)
                                                    && p.Name != "RowVersion"
                                                    && p.GetCustomAttribute(typeof(NotMappedAttribute)) == null)
                                                    ||(p.PropertyType == typeof(byte[]) 
                                                    || p.PropertyType == typeof(uint)
                                                    || (p.DeclaringType.ToString().Split('`')[0] == "Siesa.SDK.Entities.BaseAudit")))
                                                    .Select(p => p.Name)
                                                    .ToList();
                                            
        foreach (var field in EntityFields.Where(x=> !ignoreEntityFields.Contains(x.Name)).ToList())
        {
            var ResourceName = "";
            ForeignKeyAttribute attribute = field.GetCustomAttribute<ForeignKeyAttribute>();
                if (attribute != null){
                    string foreignKeyName = attribute.Name;
                    var RelationAttribute = EntityFields.Where(x => x.Name == foreignKeyName).FirstOrDefault();
                    string RelationAttributeName = RelationAttribute.PropertyType.Name;
                    string ForeingName = RelationAttributeName.Substring(RelationAttributeName.IndexOf('_')+1);
                    await CalculateParentsRelations(RelationAttribute.PropertyType, null, field.Name, ForeingName);
                    
                }else{
                    ResourceName = await ResourceManager.GetResource($"{EntityType.Name}.{field.Name}", AuthenticationService.GetRoiwdCulture()); 
                    _fieldsEntity.Add(ResourceName,field.Name);
                    _titleFields.Add(field.Name, ResourceName);
                }
        }
    }

    private async Task CalculateParentsRelations(Type ForeignType, string baseIndex, string HiddenFieldTarget,string NamePropertyForeing, string RootNameEntity = ""){
        var ResourceName = String.Empty;
        string ForeingName = (!string.IsNullOrEmpty(RootNameEntity)) ?  RootNameEntity.Substring(RootNameEntity.IndexOf('_')+1): "";
        MapFkRelationsImportDTO MapFk = new(){
                IdFieldFkEntity = HiddenFieldTarget, 
                DependencyIdFieldFKEntity = baseIndex,
                NameInternalIndex = (!string.IsNullOrEmpty(RootNameEntity)) ? $"Index_{NamePropertyForeing}_{ForeingName}_FK" : $"Index_{NamePropertyForeing}_FK"
        };
        var ForeingAttributes = ForeignType.GetCustomAttributes<IndexAttribute>();
        foreach(var ForeingAttribute in ForeingAttributes){
            if(ForeingAttribute is not null && ForeingAttribute.IsUnique){
                HiddenFields.Add(HiddenFieldTarget);
                List<string> OrderedAttributes = ForeingAttribute.PropertyNames.OrderBy(x => x).ToList();

                foreach (var propertyName in OrderedAttributes){
                    string TitleField = (!string.IsNullOrEmpty(RootNameEntity)) ? $"{propertyName}_{NamePropertyForeing}_{ForeingName}_FK": $"{propertyName}_{NamePropertyForeing}_FK";
                    MapFk.ListIndexForeingFields.Add(TitleField);
                    var EntityName = await ResourceManager.GetResource($"{ForeignType.Name}.singular", AuthenticationService); 
                    var FieldName = await ResourceManager.GetResource($"{ForeignType.Name}.{propertyName}", AuthenticationService);
                    var ResourceRoot = (!string.IsNullOrEmpty(RootNameEntity)) ? await ResourceManager.GetResource($"{RootNameEntity}.singular", AuthenticationService.GetRoiwdCulture()) : ""; 
                    ResourceName = $"{FieldName} - {EntityName} {(!string.IsNullOrEmpty(ResourceRoot) ? "/ " + ResourceRoot : "" )}"; 
                    _fieldsEntity.Add(ResourceName,TitleField);
                    _titleFields.Add(TitleField, ResourceName);
                    var propertyType= ForeignType.GetProperties().Where(x=> x.Name==propertyName).FirstOrDefault();
                    ForeignKeyAttribute foreignKeyAttribute = propertyType.GetCustomAttribute<ForeignKeyAttribute>();
                    if (foreignKeyAttribute != null){
                        string foreignKeyNameFk = foreignKeyAttribute.Name; 
                        string HiddenFieldsValue = (!string.IsNullOrEmpty(ForeingName)) ? $"{propertyName}_{NamePropertyForeing}_{ForeingName}_FK" : $"{propertyName}_{NamePropertyForeing}_FK";
                        var RelationAttributeFk =  ForeignType.GetProperties().Where(x=> x.Name==foreignKeyNameFk).FirstOrDefault();
                        await CalculateParentsRelations(RelationAttributeFk.PropertyType, MapFk.NameInternalIndex, HiddenFieldsValue, foreignKeyNameFk, ForeignType.Name);
                    }
                }
                ListMapRelationsImport.Add(MapFk);
            }
        }
    }

    private async Task ImportData()
    {
        ErrorList.Clear();
        importDataDTO.BusinessName = BusinessName;
        importDataDTO.Data = DataMapped;
        importDataDTO.UrlResponse = "https://en77cb5mgajpj.x.pipedream.net";
        var bl = BackendRouterService.GetSDKBusinessModel("BLIntegrationService", AuthenticationService);
        var result = await bl.Call("BulkImportData", importDataDTO);      

        if(result.Success){
            SDKResponseImportDTO response = (SDKResponseImportDTO)result.Data;
            if(response.Status == enumSDKIntegrationStatus.Success){
                NotificationService.ShowSuccess(response.Message);
                JsonObject = JsonConvert.SerializeObject(response.Guid, Newtonsoft.Json.Formatting.None);   
            }else if(response.Status == enumSDKIntegrationStatus.Failed){
                NotificationService.ShowWarning(response.Message);
                JsonObject = JsonConvert.SerializeObject(response.Guid, Newtonsoft.Json.Formatting.None);
            }
            
        }else{
            NotificationService.ShowError(result.Errors.FirstOrDefault());
            //JsonObject = JsonConvert.SerializeObject(result.Errors, Newtonsoft.Json.Formatting.None);
            ErrorList = result.Errors.ToList();
        }
        StateHasChanged();
    }


    private async Task DownloadFileTemplate(){
    using (var stream = new MemoryStream()){
        using (Workbook workbook = new Workbook()){

            List<string> Headers = _fieldsEntity.Where(p=> !HiddenFields.Contains(p.Value)).Select(x => x.Key).ToList();

            Worksheet worksheet = workbook.Worksheets[0];

            var EntityName = await ResourceManager.GetResource($"{EntityType.Name}.plural", AuthenticationService); 
            var TemplateResource = await ResourceManager.GetResource("Custom.SDK.Integration.Template", AuthenticationService); 
            var DataResource= await ResourceManager.GetResource("Custom.SDK.Integration.Data", AuthenticationService); 
            
            worksheet.Name = $"{DataResource} - {EntityName}";

            workbook.BeginUpdate();

            try{
                for (int i = 0; i < Headers.Count(); i++){
                    worksheet.Rows["1"][i].Value = Headers[i];   
                }
                worksheet.Rows.AutoFit(0, Headers.Count()-1);     
                worksheet.Columns.AutoFit(0, Headers.Count()-1); 
                
            }finally{
                workbook.EndUpdate();
            }
                //workbook.Calculate();

            workbook.SaveDocument(stream, DocumentFormat.OpenXml);
            byte[] bytes = stream.ToArray();
            string FileNameResource = $"{TemplateResource} - {EntityName}";
            await JSRuntime.InvokeVoidAsync("downloadFileFromStream", FileNameResource, bytes);
            }
        }
    }

    private DocumentFormat? SetDocumentFormat(string Type){
        
        if(Type == MimeTypes.ExcelDocument03) return DocumentFormat.Xls;
        
        if(Type == MimeTypes.ExcelDocument) return DocumentFormat.Xlsx;

        ErrorList.Add("Custom.SDK.Integration.Msg.ErrorFileType");
        return null;

    } 

    private async Task LoadFiles(InputFileChangeEventArgs InputFile){
        var DocumentFormatType = SetDocumentFormat(InputFile.File.ContentType);
        if(DocumentFormatType is null){
            return;
        }
        ErrorList.Clear();
        FileData = new List<dynamic>();
        IsLoadingGrid = false;
        using (var stream = new MemoryStream()){
            await InputFile.File.OpenReadStream(51200000).CopyToAsync(stream);
            SDKGlobalLoaderService.Show();
            stream.Position = 0;
                Workbook workbook = new Workbook();
                workbook.LoadDocument(stream, DocumentFormatType.Value);
                Worksheet worksheet = workbook.Worksheets[0];
                var HeaderRowObj = worksheet.Rows[0];
                List<string> Headers = new();
                
                foreach( var cellHeader in HeaderRowObj){
                    if(cellHeader.HasData){
                        var CellValueData = cellHeader.Value;
                        if(CellValueData.IsText){
                            Headers.Add(CellValueData.TextValue);
                        }
                    }else{
                        break;
                    }
                }

                List<dynamic> DataCells = new();
                int RowCounter = 1;
                var ActualRow = worksheet.Rows[RowCounter];

                do{
                    ExpandoObject obj = new ExpandoObject();
                    for(int i = 0; i < Headers.Count(); i++){
                        var cellData = ActualRow[i];
                        dynamic value = "";
                        if(cellData.HasData){
                            var CellValueData = cellData.Value;
                            switch (CellValueData.Type){
                                case CellValueType.Text:
                                DataCells.Add(CellValueData.TextValue);
                                value = CellValueData.TextValue;
                                break;
                                case CellValueType.Numeric:
                                DataCells.Add(CellValueData.NumericValue);
                                value = CellValueData.NumericValue;
                                break;
                                case CellValueType.DateTime:
                                DataCells.Add(CellValueData.DateTimeValue);
                                value = CellValueData.DateTimeValue;
                                break;
                                case CellValueType.Boolean:
                                DataCells.Add(CellValueData.BooleanValue);
                                value = CellValueData.BooleanValue;
                                break;
                            }
                        }
                        ((IDictionary<string, object>)obj).Add(Headers[i], value);
                    }
                    FileData.Add(obj);
                    RowCounter ++;
                    ActualRow = worksheet.Rows[RowCounter];
                }while(ActualRow.HasData);

                var t = worksheet.Rows[0];
                var t2 = worksheet.Rows[2];

                foreach( var gt in t){
                    var  tt = gt.Value;
                }
        }
        IsLoadingGrid = true;
        await InvokeAsync(() => SDKGlobalLoaderService.Hide());
        _ = InvokeAsync(() => StateHasChanged());   
    }

    public void  OnChangeSteps(int index){
        SelectedIndex = index;
        switch (index){
            case 1:
                if(FileData == null || FileData.Count == 0)
                {
                    SelectedIndex = 0;
                    //NotificationService.ShowError("Custom.SDK.Import.ErrorLoadFile");
                    if(!ErrorList.Contains("Custom.SDK.Import.ErrorLoadFile")){
                        ErrorList.Add("Custom.SDK.Import.ErrorLoadFile");
                    }
                }else{
                    ErrorList.Clear();
                }
            break;
            case 2:
                if(_newKeys == null || _newKeys.Count == 0)
                {
                    SelectedIndex = 0;
                    //NotificationService.ShowError("Custom.SDK.Import.ErrorMappingData"); 
                    if(!ErrorList.Contains("Custom.SDK.Import.ErrorMappingData")){
                        ErrorList.Add("Custom.SDK.Import.ErrorMappingData");
                    }
                }else
                {
                    ErrorList.Clear();
                    _= MappingData();
                }
            break;

            default:
            break;
        }

        StateHasChanged();
    }

    private async Task MappingData()
    {
        
        Dictionary<string, string> indexes = new();
        List<string> llaves = new();
        ListMapRelationsImport.ForEach(lista =>{
            llaves.AddRange(lista.ListIndexForeingFields);
            indexes.Add(lista.NameInternalIndex, string.Empty);
        });

        string nameKey;
        DataMapped = new List<Dictionary<string, object>>();
        foreach (var item in FileData){
            var row = new Dictionary<string, object>();
            foreach (var key in _newKeys){
                object value = GetPropertyValue(item, key.Key);
                if (GetPropertyValue(item, key.Key) != null){
                    if(row.TryGetValue(key.Value, out var val)){
                        row[key.Value] = value;
                    }else{
                        row.Add(key.Value,value);
                    } 
                }
                nameKey = TransformNameKey(key.Value);
                if (llaves.Contains(key.Value)) indexes[nameKey] += value;
            }

            foreach(var field in HiddenFields){
                row.Add(field, null);
            }

            foreach (var t in indexes){
                row.Add(t.Key, t.Value);
            }
            DataMapped.Add(row);
            CleanvaluesIndexInternal(indexes);
        }

            foreach (var mapRelationImport in ListMapRelationsImport){

                List<string> values = DataMapped.Where(p => p.ContainsKey(mapRelationImport.NameInternalIndex)).Select(p => (string)p[mapRelationImport.NameInternalIndex]).ToList<string>();

                var bl = BackendRouterService.GetSDKBusinessModel(GetBLNameFromString(mapRelationImport.NameInternalIndex ,'_'), AuthenticationService);
                var response = await bl.Call("SetListForeingRowid", mapRelationImport.ListIndexForeingFields, values);
            
                if(response.Success){ 
                    UpdateForeingKeysValues(response.Data, mapRelationImport.NameInternalIndex,
                                            mapRelationImport.IdFieldFkEntity,
                                            mapRelationImport.DependencyIdFieldFKEntity);
                }

    }
        CleanAuxiliarColumnsDataMapped();
        StateHasChanged();
    }

    private string GetBLNameFromString(string InternalIndex , char separator){
        int starIndex = InternalIndex.IndexOf(separator) +1;
        int midleIndex = InternalIndex.IndexOf(separator, starIndex);
        string  BLName = InternalIndex.Substring(starIndex, midleIndex-starIndex);
        return $"BL{BLName}";
    }


    private void  CleanAuxiliarColumnsDataMapped(){
        HashSet<Dictionary<string,object>> SetDataMapped = new HashSet<Dictionary<string, object>>(DataMapped);
        foreach(var itemRelationShip in ListMapRelationsImport){  
            SetDataMapped.Where(x => ((Dictionary<string, object>)x).Remove(itemRelationShip.NameInternalIndex)).ToList();
            itemRelationShip.ListIndexForeingFields.ForEach(list=>{ SetDataMapped.Where(x => ((Dictionary<string, object>)x).Remove(list)).ToList(); });  
        } 

    }
    static string TransformNameKey(string key){
        return "Index" + key.Substring(key.IndexOf('_') > 0 ? key.IndexOf('_') : key.Length);
    }

    static Dictionary<string, string> CleanvaluesIndexInternal(Dictionary<string, string> dic){
        foreach (var t in dic) { dic[t.Key] = String.Empty; }
        return dic;
    }

    private void UpdateForeingKeysValues(List<MyDTO> DataIn, string indexFks, string fieldToRepalce, string dependencyIndex)
    {
        DataIn .Join(
                    DataMapped,
                    dataIn => dataIn.InternalIndex,
                    dataMapped => dataMapped[indexFks],
                    (dataIn, dataMapped) =>
                        { 
                            dataMapped[fieldToRepalce] = dataIn.Rowid;
                            if(!string.IsNullOrEmpty(dependencyIndex)){
                                dataMapped[dependencyIndex] += dataIn.Rowid.ToString();
                            }
                        return dataMapped;
                    }
                ).ToList();
    }

}
