@page "/{BusinessName}/Import"
@using System.Reflection
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using Siesa.SDK.Frontend.Components.Visualization
@using Siesa.SDK.Components.Visualization
@using Siesa.SDK.Shared.Services
@using System.Globalization
@using System.IO
@using System.Text
@using CsvHelper
@using System.ComponentModel.DataAnnotations.Schema
@using Microsoft.AspNetCore.Components.Forms
@using  CsvHelper.Configuration
@using Siesa.SDK.Frontend.Components.Fields

@inherits Siesa.SDK.Frontend.Components.FormManager.ViewModels.DynamicBaseViewModel

@inject IResourceManager ResourceManager
@inject IAuthenticationService AuthenticationService
@inject IJSRuntime JSRuntime


<h3>Descargue el demo para este BL</h3>

<SDKButton RenderStyle="SDKButtonRenderStyle.Secondary" ResourceTag="Descargar Demo" Click="@Download" />


<h3>Importar Archivo CSV</h3>


<InputFile OnChange="@LoadFiles" />


@if (IsLoading)
{
    <SDKGrid Data="@Data" TItem="dynamic">
        <Columns>
            @foreach (var field in Data)
            {
                
                
                
            }
        </Columns>
    </SDKGrid>
    
}





@code {
    [Parameter] public dynamic businessObj { get; set; }
    
    private RenderFragment RenderMain = null;
    

    private Dictionary<string, string> Fields = new Dictionary<string,string>();

    private Type EntityType = null;

    private List<dynamic> Data = new List<dynamic>();

    private bool IsLoading = false;


    protected override async Task OnInitializedAsync()
    {
        await GetEntityFields();

        base.OnInitialized();  
    }

    private async Task GetEntityFields()
    {   
        EntityType = BusinessObj.BaseObj.GetType();
        var EntityFields = EntityType.GetProperties();

        var _bannedTypes = new List<Type>() { typeof(byte[]),  typeof(string) };

        var ignoreEntityFields = EntityType.GetProperties().Where(
                                                     p => p.PropertyType.IsClass
                                                                    && !p.PropertyType.IsPrimitive
                                                                    && !p.PropertyType.IsEnum
                                                                    && !_bannedTypes.Contains(p.PropertyType)
                                                                    && p.Name != "RowVersion"
                                                                    && p.GetCustomAttribute(typeof(NotMappedAttribute)) == null
                                                     ).Select(p => p.Name).ToArray();

        foreach (var field in EntityFields.Where(x=> !ignoreEntityFields.Contains(x.Name)).ToList())
        {
            var ResourceName = await ResourceManager.GetResource($"{EntityType.Name}.{field.Name}", AuthenticationService.GetRoiwdCulture()); 

            Fields.Add(field.Name , ResourceName);
        }
    }

    private async Task Download()
    {
        using (var stream = new MemoryStream())
        {
            using (var CsvWriter = new CsvWriter(new StreamWriter(stream, Encoding.UTF8), CultureInfo.InvariantCulture))
            {
                List<string> Headers = Fields.Select(x => x.Value).ToList();
                CsvWriter.WriteField(Headers);
                CsvWriter.Flush();
                byte[] bytes = stream.ToArray();

                string fileName = $"{EntityType.Name}";
                await JSRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, bytes);
            }
        }
        
    }

    private async Task LoadFiles(InputFileChangeEventArgs InputFile)
    {
        using (var stream = new MemoryStream())
        {
            await InputFile.File.OpenReadStream().CopyToAsync(stream);
            stream.Position = 0;
            var csvConfig = new CsvConfiguration(CultureInfo.InvariantCulture)
            {
                HasHeaderRecord = true
            };

            using (var CsvReader = new CsvReader(new StreamReader(stream), csvConfig))
            {
                var records = CsvReader.GetRecords<dynamic>();
                
                foreach (var record in records)
                {
                    foreach (KeyValuePair<string, object> kvp in record)
                    {
                        Console.WriteLine($"{record}");
                    }

                }
            }
        }

        IsLoading = true;
        StateHasChanged();     
    }

    private RenderFragment GetRenderFragment(){
        if(BusinessObj == null){
            return null;
        }
        MethodInfo method = BusinessObj.GetType().GetMethod("Main");
        return (RenderFragment)method.Invoke(BusinessObj, null);
    }


}
