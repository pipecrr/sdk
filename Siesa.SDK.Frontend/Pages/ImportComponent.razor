@page "/{BusinessName}/Import"
@using System.Reflection
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using Siesa.SDK.Frontend.Components.Visualization
@using Siesa.SDK.Components.Visualization
@using Siesa.SDK.Shared.Services
@using System.Globalization
@using System.IO
@using System.Text
@using CsvHelper

@inherits Siesa.SDK.Frontend.Components.FormManager.ViewModels.DynamicBaseViewModel

@inject IResourceManager ResourceManager
@inject IAuthenticationService AuthenticationService
@inject IJSRuntime JSRuntime


<h3>servicio de importacion, puedes utilizar un archivo csv para cargar registros a una tabla</h3>

<SDKButton RenderStyle="SDKButtonRenderStyle.Secondary" ResourceTag="DescargarDemo" Click="@DownloadDemo" />




@code {
    [Parameter] public dynamic businessObj { get; set; }
    
    private RenderFragment RenderMain = null;

    private List<HeadersCsv> Headers = new List<HeadersCsv>();
    
    private Stream streamFile = new MemoryStream();

    protected override void OnInitialized()
    {
        //ViewType = ViewModels.DynamicViewType.List;
        base.OnInitialized();  
    }
    protected override void SetParameters(dynamic _businessObj, string businessName)
    {

        
    }
    private async Task DownloadDemo()
    {
        Type EntityType = BusinessObj.BaseObj.GetType();
        
        var EntityFields = EntityType.GetProperties();

        foreach (var field in EntityFields)
        {

            if(field.PropertyType.FullName.Contains("Siesa.SDK.Entities"))
                continue;


            var FieldName = await ResourceManager.GetResource($"{EntityType.Name}.{field.Name}", AuthenticationService.GetRoiwdCulture()); 

            Headers.Add(new HeadersCsv(){ColumnName = FieldName});
        }


        using (var stream = new MemoryStream())
        {
            using (var csvwriter = new CsvWriter(new StreamWriter(stream, Encoding.UTF8), CultureInfo.InvariantCulture))
            {
                csvwriter.WriteRecords(Headers);
                csvwriter.Flush();
                byte[] bytes = stream.ToArray();

                string fileName = $"{EntityType.Name}.csv";
                await JSRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, bytes);
            }
        }
        
    }

    private async Task GetStream(List<string> Headers)
    {
        
    }

    public class HeadersCsv 
    {
        public string ColumnName { get; set; }
    }

    
    private RenderFragment GetRenderFragment(){
        if(BusinessObj == null){
            return null;
        }
        MethodInfo method = BusinessObj.GetType().GetMethod("Main");
        return (RenderFragment)method.Invoke(BusinessObj, null);
    }


}
