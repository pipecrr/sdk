@page "/{BusinessName}/Import"
@using System.Reflection
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using Siesa.SDK.Frontend.Components.Visualization
@using Siesa.SDK.Components.Visualization
@using Siesa.SDK.Shared.Services
@using System.Globalization
@using System.IO
@using System.Text
@using CsvHelper
@using System.ComponentModel.DataAnnotations.Schema
@using Microsoft.AspNetCore.Components.Forms
@using  CsvHelper.Configuration
@using Siesa.SDK.Frontend.Components.Fields
@using System.Dynamic
@using Newtonsoft.Json;

@inherits Siesa.SDK.Frontend.Components.FormManager.ViewModels.DynamicBaseViewModel

@inject IResourceManager ResourceManager
@inject IAuthenticationService AuthenticationService
@inject IJSRuntime JSRuntime

@if (IsImportFile)
{
    <h3>Descargar Demo:</h3>

    <SDKButton RenderStyle="SDKButtonRenderStyle.Secondary" ResourceTag="Descargar Demo" Click="@Download" />


    <h3>Importar Archivo CSV</h3>

    <InputFile OnChange="@LoadFiles" />


    @if (IsLoadingGrid)
    {
        <h3> Previsualización de los primeros registros del archivo cargado:</h3>

        @if (Data != null && Data.Count > 0)
        {     
            <SDKGrid TItem="dynamic"  Data="@Data">
                <Columns>
                
                    @foreach (var propertyKey in ((System.Dynamic.ExpandoObject)Data.FirstOrDefault())?.Select(x => x.Key))
                    {
                        <SDKGridColumn TItem="dynamic" Property="@propertyKey" Title="@propertyKey">
                            <Template Context="data">
                                @if (data != null)
                                {
                                    @GetPropertyValue(data, propertyKey)
                                }
                            </Template>
                        </SDKGridColumn>
                    }
                </Columns>
            </SDKGrid>

            <br />

            <SDKButton RenderStyle="SDKButtonRenderStyle.Secondary" ResourceTag="Siguiente" Click="@MappaingData" />

        }else
        {
            <p>No se encontraron registros en el Archivo </p>
        }
    }
}else
{
    <h3>Confirme los campos e importe</h3>

    <p>La siguiente tabla contiene todos los campos del módulo que se puede relacionar a los datos en el archivo de importación. Si el archivo contiene una fila de cabecera, las columnas en el archivo han sido asignadas a los campos de importación. Compruebe las asignaciones para asegurarse de que son lo que usted espera, y hacer los cambios, según sea necesario. Para ayudarte a comprobar las asignaciones, la fila 1 muestra los datos en el archivo.</p>
}



@code {

    private Dictionary<string, string> Fields = new Dictionary<string,string>();

    private Type EntityType = null;

    private List<dynamic> Data = new List<dynamic>();

    private bool IsLoadingGrid = false;

    private bool IsImportFile = true;

    private List<dynamic> MappedData = new List<dynamic>();

    private object GetPropertyValue(System.Dynamic.ExpandoObject obj, string propertyName)
    {
        return ((IDictionary<string, object>)obj)[propertyName];
    }

 
    protected override async Task OnInitializedAsync()
    {
        await GetEntityFields();

        base.OnInitialized();  
    }

    private async Task GetEntityFields()
    {   
        EntityType = BusinessObj.BaseObj.GetType();
        var EntityFields = EntityType.GetProperties();

        var _bannedTypes = new List<Type>() { typeof(byte[]),  typeof(string) };

        var ignoreEntityFields = EntityType.GetProperties().Where(
                                                     p => p.PropertyType.IsClass
                                                                    && !p.PropertyType.IsPrimitive
                                                                    && !p.PropertyType.IsEnum
                                                                    && !_bannedTypes.Contains(p.PropertyType)
                                                                    && p.Name != "RowVersion"
                                                                    && p.GetCustomAttribute(typeof(NotMappedAttribute)) == null
                                                     ).Select(p => p.Name).ToArray();

        foreach (var field in EntityFields.Where(x=> !ignoreEntityFields.Contains(x.Name)).ToList())
        {
            var ResourceName = await ResourceManager.GetResource($"{EntityType.Name}.{field.Name}", AuthenticationService.GetRoiwdCulture()); 

            Fields.Add(ResourceName,field.Name);
        }
    }

    private async Task Download()
    {
        using (var stream = new MemoryStream())
        {
            using (var CsvWriter = new CsvWriter(new StreamWriter(stream, Encoding.UTF8), CultureInfo.InvariantCulture))
            {
                List<string> Headers = Fields.Select(x => x.Key).ToList();
                CsvWriter.WriteField(Headers);
                CsvWriter.Flush();
                byte[] bytes = stream.ToArray();

                string fileName = $"{EntityType.Name}";
                await JSRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, bytes);
            }
        }
        
    }

    private async Task LoadFiles(InputFileChangeEventArgs InputFile)
    {
        Data = new List<dynamic>();
        IsLoadingGrid = false;
        using (var stream = new MemoryStream())
        {
            await InputFile.File.OpenReadStream().CopyToAsync(stream);
            stream.Position = 0;
            var csvConfig = new CsvConfiguration(CultureInfo.InvariantCulture)
            {
                HasHeaderRecord = true
            };

            using (var CsvReader = new CsvReader(new StreamReader(stream), csvConfig))
            {
                var records = CsvReader.GetRecords<dynamic>();

                foreach (var record in records)
                {                    
                    ExpandoObject obj = new ExpandoObject();

                    foreach(var prop in record) 
                    {
                        var key = prop.Key;
                        var value = prop.Value;
                        ((IDictionary<string, object>)obj).Add(key, value);
                    }

                    Data.Add(obj);
                }
            }
        }

        IsLoadingGrid = true;
        _ = InvokeAsync(() => StateHasChanged());     
    }

    private async Task MappaingData()
    {
        foreach (var item in Data)
        {
            foreach(var prop in item) 
            {     
                if(Fields.ContainsKey(prop.Key))
                    {
                        var field = Fields[prop.Key];

                        MappedData.Add(new { field = field});
                    }
            }
        }

        IsImportFile = false;
        _ = InvokeAsync(() => StateHasChanged());
    }
}
