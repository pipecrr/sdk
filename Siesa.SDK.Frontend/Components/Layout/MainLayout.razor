@inherits LayoutComponentBase
@using Microsoft.Extensions.Hosting
@using Siesa.SDK.Frontend.Components.Layout.Header
@using System
@using Microsoft.AspNetCore.Components
@using Siesa.SDK.Frontend.Components.Layout.NavMenu
@using Siesa.SDK.Shared.Services
@inject IAuthenticationService AuthenticationService
@using Siesa.SDK.Frontend.Components.FormManager.Model
@inject UtilsManager UtilsManager 
@inject IJSRuntime JSRuntime

@if(AuthenticationService.GetSelectedConnection() != null && AuthenticationService.GetSelectedConnection().Rowid != 0)
{
    @if(AuthenticationService.GetSelectedConnection().IsTest && !string.IsNullOrEmpty(WatermarkText))
    {
        <div class="sdk-test-watermark" data-watermark="@WatermarkText"></div>
    }

    @if(!string.IsNullOrEmpty(AuthenticationService.GetSelectedConnection().StyleUrl))
    {
        <head>
            <link rel="stylesheet" href="@AuthenticationService.GetConnectionStyle()">
        </head>
    }
}

<RadzenDialog />
<RadzenNotification />


@if(IsEmptyLayout)
{
    <ErrorBoundary @ref="errorBoundary">
        <ChildContent>
            <CascadingValue Value="@this">
                <div class="main">    
                    <div>
                        @Body
                    </div>
                </div>
            </CascadingValue>
        </ChildContent> 
        <ErrorContent Context="Exception" >
            <SDKError CurrentException="@Exception" Error="@errorBoundary" IsEmptyLayout="true" />
        </ErrorContent>
    </ErrorBoundary>
}else{
    <DxGridLayout>
        <Rows>
            <DxGridLayoutRow Height="auto" />
            <DxGridLayoutRow />
        </Rows>
        <Columns>
            <DxGridLayoutColumn />
        </Columns>
        <Items>
            <DxGridLayoutItem Row="0" Column="0">
                <Template>
                    <SDKHeader />
                </Template>
            </DxGridLayoutItem>
            <DxGridLayoutItem Row="1" Column="0">
                <Template>
                    <div class="sdk_nav">
                        <NavMenu ShowMenu="@showNavMenu" />
                            <ErrorBoundary @ref="errorBoundary">
                                <ChildContent> 
                                <aside class="col-12 sdk_home_content">
                                    <div
                                        class="offset-lg-0 col-lg-12 offset-xl-0 col-xl-12 offset-xxl-1 col-xxl-10 px-0 px-md-3">

                                        <BreadCrumb />
                                        <CascadingValue Value="@this">
                                            @if(IsDefaultArea)
                                            {
                                                <div class="col-12 area2 px-3">
                                                    <TopBar />
                                                    <div class="col-12 px-0 py-3">
                                                        @Body
                                                    </div>
                                                </div>
                                            }else{
                                                @Body
                                            }
                                        </CascadingValue>
                                    </div>
                                </aside>
                                </ChildContent> 
                                <ErrorContent Context="Exception" >
                                    <SDKError CurrentException="@Exception" Error="@errorBoundary" />
                                </ErrorContent>
                        </ErrorBoundary>
                    </div>

                </Template>
            </DxGridLayoutItem>
        </Items>
    </DxGridLayout>
}

<SDKGoTop />
@code {
    private bool showNavMenu = false;
    [Parameter]
    public bool ShowMenu { get; set; }

    private ErrorBoundary? errorBoundary;

    [Parameter]
    public bool IsDefaultArea { get; set; }

    public bool IsEmptyLayout { get; set; } = false;

    private string WatermarkText { get; set; }
    private IJSObjectReference _jsModule;

    public void SetDefaultArea(bool isDefaultArea)
    {
        bool refresh = IsDefaultArea != isDefaultArea;
        IsDefaultArea = isDefaultArea;
        if(refresh)
        {
            StateHasChanged();
        }
    }

    public void SetEmptyLayout(bool isEmptyLayout)
    {
        bool refresh = IsEmptyLayout != isEmptyLayout;
        IsEmptyLayout = isEmptyLayout;
        if(refresh)
        {
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        IsDefaultArea = true;
        base.OnInitializedAsync();
        errorBoundary = new ErrorBoundary();
        PoblateWatermark();
    }

    private async Task PoblateWatermark()
    {
        WatermarkText = await UtilsManager.GetResource("Custom.TestConnection");
        try
        {
            if(_jsModule == null)
            {
                await ImportJs();
            }
            await _jsModule.InvokeVoidAsync("PoblateWatermark");
        }
        catch (Exception)
        {
        }
        StateHasChanged();
    }

    private async Task ImportJs()
    {
        try
        {
            _jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/Siesa.SDK.Frontend/Components/Layout/MainLayout.razor.js");
        }
        catch (Exception)
        {
        }
    }

    private void ToggleNavMenu()
    {
        showNavMenu = !showNavMenu;
        StateHasChanged();
    }

    private void HideNavMenu()
    {
        showNavMenu = false;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender || _jsModule == null){
            await ImportJs();
        }
    }
}