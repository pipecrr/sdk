@inherits LayoutComponentBase
@using Microsoft.Extensions.Hosting
@using Siesa.SDK.Frontend.Components.Layout.Header
@using System
@using Microsoft.AspNetCore.Components
@using Siesa.SDK.Frontend.Components.Layout.NavMenu
@using Siesa.SDK.Shared.Services
@using Siesa.SDK.Frontend.Services
@inject IAuthenticationService AuthenticationService
@using Siesa.SDK.Frontend.Components.FormManager.Model
@using Siesa.SDK.Frontend.Pages.Login
@using Siesa.SDK.Frontend.Components.Visualization
@inject UtilsManager UtilsManager 
@inject IJSRuntime JSRuntime
@inject NavigationService NavigationService
@inject SDKDialogService SDKDialogService
@inject SDKNotificationService SDKNotificationService

@if(AuthenticationService.GetSelectedConnection() != null && AuthenticationService.GetSelectedConnection().Rowid != 0)
{
    @if(AuthenticationService.GetSelectedConnection().IsTest && !string.IsNullOrEmpty(WatermarkText))
    {
        <div class="sdk-test-watermark" data-watermark="@WatermarkText"></div>
    }

    @if(!string.IsNullOrEmpty(AuthenticationService.GetSelectedConnection().StyleUrl))
    {
        <head>
            <link rel="stylesheet" href="@AuthenticationService.GetConnectionStyle()">
        </head>
    }
}

<RadzenDialog />
<NotificationServiceSDK />
<SDKGlobalLoader />

<DxGridLayout>
    <Rows>
        <DxGridLayoutRow Height="auto" />
        <DxGridLayoutRow />
    </Rows>
    <Columns>
        <DxGridLayoutColumn />
    </Columns>
    <Items>
        <DxGridLayoutItem Row="0" Column="0">
            <Template>
                @if(!IsEmptyLayout)
                {
                    <SDKHeader />
                }
            </Template>
        </DxGridLayoutItem>
        <DxGridLayoutItem Row="1" Column="0">
            <Template>
                <div class="@GetCssNav()">
                    @if(!IsEmptyLayout)
                    {
                        <NavMenu ShowMenu="@showNavMenu" />
                    }
                     
                            <aside class="@GetCssAside()">
                                <div
                                    class="@GetCssBody()">
                                    @if(!IsEmptyLayout)
                                    {
                                        <BreadCrumb />
                                    }
                                    <CascadingValue Value="@this">
                                        <div class="@GetCssMainArea()">
                                            @if(!IsEmptyLayout)
                                            {
                                                <TopBar />
                                            }
                                            <div class="@GetCssInternalArea()">
                                                <ErrorBoundary @ref="errorBoundary">
                                                    <ChildContent>
                                                        @Body
                                                    </ChildContent> 
                                                    <ErrorContent Context="Exception" >
                                                        @{
                                                            List<string> errors = new List<string>();
                                                            errors.Add("Exception: " + Exception.StackTrace);
                                                        }
                                                        <ErrorsWindow ErrorsMsg="@errors" />
                                                    </ErrorContent>
                                                </ErrorBoundary>
                                            </div>
                                        </div>
                                    </CascadingValue>
                                </div>
                            </aside>                        
                </div>
            </Template>
        </DxGridLayoutItem>
    </Items>
</DxGridLayout>


<SDKGoTop />
@code {
    private bool showNavMenu = false;
    [Parameter]
    public bool ShowMenu { get; set; }

    private ErrorBoundary? errorBoundary;

    [Parameter]
    public bool IsDefaultArea { get; set; }

    public bool IsEmptyLayout { get; set; } = false;

    private string WatermarkText { get; set; }
    private IJSObjectReference _jsModule;

    private bool _showingLogin = false;

    private bool isMaximized = false;

    public async Task ToogleMaximize()
    {
        isMaximized = !isMaximized;
        StateHasChanged();
    }

    public bool IsMaximized()
    {
        return isMaximized;
    }

    public void SetDefaultArea(bool isDefaultArea)
    {
        bool refresh = IsDefaultArea != isDefaultArea;
        IsDefaultArea = isDefaultArea;
        if(refresh)
        {
            StateHasChanged();
        }
    }

    public void SetEmptyLayout(bool isEmptyLayout)
    {
        bool refresh = IsEmptyLayout != isEmptyLayout;
        IsEmptyLayout = isEmptyLayout;
        if(refresh)
        {
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        IsDefaultArea = true;
        base.OnInitializedAsync();
        errorBoundary = new ErrorBoundary();        
        InitSDKJS();
    }

    private async Task InitSDKJS()
    {
        WatermarkText = await UtilsManager.GetResource("Custom.TestConnection");
        try
        {
            if(_jsModule == null)
            {
                await ImportJs();
            }
            await _jsModule.InvokeVoidAsync("PoblateWatermark");
            await _jsModule.InvokeVoidAsync("InitSDK", DotNetObjectReference.Create(this));
        }
        catch (Exception)
        {
        }
        StateHasChanged();
    }

    private async Task ImportJs()
    {
        try
        {
            _jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/Siesa.SDK.Frontend/Components/Layout/MainLayout.razor.js");
        }
        catch (Exception)
        {
        }
        try
        {
            await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/Siesa.SDK.Frontend/js/utils.js");
        }catch (Exception)
        {
        }
    }

    private void ToggleNavMenu()
    {
        showNavMenu = !showNavMenu;
        StateHasChanged();
    }

    private void HideNavMenu()
    {
        showNavMenu = false;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender || _jsModule == null){
            await ImportJs();
        }
    }

    [JSInvokable]
    public async Task ShowLogin()
    {
        if(!_showingLogin)
        {
            _showingLogin = true;
            var confirmDialogPolitic = await SDKDialogService.ShowCustomDialog(ds => @<ModalLogin DialogService=@ds />, "600px", "",false, false);
            _showingLogin = false;
        }else{
            if(AuthenticationService != null && AuthenticationService.User != null && await AuthenticationService.IsValidToken()){
                SDKDialogService.ds.Close(true);
                _showingLogin = false;
            }
        }
        
        StateHasChanged();
    }

    [JSInvokable]
    public async Task RenewToken()
    {
        if(AuthenticationService?.User != null )
        { 
            await AuthenticationService.RenewToken();
        }
        StateHasChanged();
    }

    [JSInvokable]
    public async Task HideLogin()
    {
        if(_showingLogin && AuthenticationService != null && AuthenticationService.User != null && await AuthenticationService.IsValidToken()){
            SDKDialogService.ds.Close(true);
            _showingLogin = false;
        }
        StateHasChanged();
    }

    private string GetCssBody()
    {
        if(IsEmptyLayout)
        {
            return "";
        }
        var xxl_offset = "offset-xxl-1";
        var xxl = "col-xxl-10";

        if(isMaximized)
        {
            xxl_offset = "offset-xxl-0";
            xxl = "col-xxl-12";
        }

        return $"offset-lg-0 col-lg-12 offset-xl-0 col-xl-12 {xxl_offset} {xxl} px-0 px-md";
    }

    private string GetCssNav()
    {
        if(IsEmptyLayout)
        {
            return "";
        }

        return "sdk_nav";
    }

    private string GetCssAside()
    {
        if(IsEmptyLayout)
        {
            return "";
        }

        return "col-12 sdk_home_content";
    }

    private string GetCssMainArea()
    {
        if(IsEmptyLayout || !IsDefaultArea)
        {
            return "";
        }

        return "col-12 area2 px-3";
    }

    private string GetCssInternalArea()
    {
        if(IsEmptyLayout || !IsDefaultArea)
        {
            return "";
        }

        return "col-12 px-0 py-3";
    }


    
    [JSInvokable]
    public async Task ShowError(string msg, object?[] variables = null){
        await SDKNotificationService.ShowError(msg, variables);
    }

    [JSInvokable]
    public async Task ShowSuccess(string msg, object?[] variables = null){
        await SDKNotificationService.ShowSuccess(msg, variables);
    }


    [JSInvokable]
    public void NavigateTo(string url)
    {
        NavigationService.NavigateTo(url);
    }
}