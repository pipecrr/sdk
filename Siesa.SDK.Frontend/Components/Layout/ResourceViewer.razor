@using Siesa.SDK.Frontend.Application
@using Siesa.SDK.Shared.Services
@inject IResourceManager ResourceManager
@inject IAuthenticationService AuthenticationService

@Text

@code {
    [Parameter] public string ResourceTag { get; set; }
    [Parameter] public Int64? RowidResource { get; set; }

    [Parameter] public Int64 RowidCulture { get; set; }

    [Parameter] public Int64 DefaultRowidCulture { get; set; }
    [Parameter] public object[] FormatString { get; set; } = null;
    private string Text { get; set; }
    private string Resource { get; set; }

    private async Task<string> GetText()
    {
        if (DefaultRowidCulture != 0 && RowidCulture == 0 && (AuthenticationService.GetRowidCulture() == 0))
        {
            RowidCulture = DefaultRowidCulture;
        }

        if (!String.IsNullOrEmpty(ResourceTag))
        {
            if (RowidCulture != 0 && (AuthenticationService == null || AuthenticationService.GetRowidCulture() == 0))
            {
                return await ResourceManager.GetResource(ResourceTag, RowidCulture);
            }
            else
            {
                return await ResourceManager.GetResource(ResourceTag, AuthenticationService);
            }
        }
        if (RowidResource != 0 && RowidResource != null)
        {
            if (RowidCulture != 0 && (AuthenticationService == null || AuthenticationService.GetRowidCulture() == 0))
            {
                return await ResourceManager.GetResource(Convert.ToInt64(RowidResource), RowidCulture);
            }
            else
            {
                return await ResourceManager.GetResource(Convert.ToInt64(RowidResource), AuthenticationService);
            }
        }
        return Text;
    }

    private async Task<string> StringFormat(string text)
    {
        if (FormatString != null && FormatString.Length > 0)
        {
            var formatArgs = new List<object>();

            foreach (var item in FormatString)
            {
                var FormatTag = await ResourceManager.GetResource(item.ToString() , AuthenticationService);
                formatArgs.Add(FormatTag);
            }
            
            try
            {
                return String.Format(text, formatArgs.ToArray());
            }
            catch (System.Exception)
            {   
                return "";             
            }

        }
        return "";
    }

    protected override async Task OnInitializedAsync()
    {
        Text = ResourceTag;
        await base.OnInitializedAsync();
        Text = await GetText();
        Resource = await StringFormat(Text);
        if (!string.IsNullOrEmpty(Resource))
        {
            Text = Resource;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        Text = ResourceTag;
        await base.OnParametersSetAsync();
        Text = await GetText();
        Resource = await StringFormat(Text);
        if (!string.IsNullOrEmpty(Resource))
        {
            Text = Resource;
        }
    }
}

