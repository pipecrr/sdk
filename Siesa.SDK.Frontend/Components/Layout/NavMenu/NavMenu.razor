@using Siesa.SDK.Entities
@implements IDisposable
@using SDK.Components.Visualization
@using Siesa.SDK.Shared.Backend
@using Siesa.SDK.Frontend.Components.Layout.Menu
@using Siesa.SDK.Shared.Services
@using Siesa.Global.Enums
@using Siesa.SDK.Frontend.Components.Dashboard.UserComponent
@using Siesa.SDK.Frontend.Services
@using Siesa.SDK.Frontend.Components.Layout
@using Siesa.SDK.Frontend.Components
@inject IAuthenticationService AuthenticationService
@inject NavigationManager NavigationManager
@inject MenuService MenuService
@inject UtilsManager UtilManager
@inject SDKNotificationService NotificationService
@inject SDKDialogService DialogService

<input type="checkbox" name="" checked id="menu">
    <label class="sdk_nav_head" for="menu">
        <div class="nav_btn_standar_suite_active" data-toggle="tooltip" data-placement="right" title="@MenuService?.SelectedSuite?.CurrentText">
            <div class="back_suite_active" style="background: #@MenuService?.SelectedSuite?.HexColor"></div>
            <div class="nav_btn_standar_icon_suite_active">
                <SDKIcon Name="@GetIconsuite()"></SDKIcon> 
            </div>
        </div>
    </label>

<input class="" type="checkbox" name="" id="collapse_open" data-automation-id="Button_Menu_Collapse">
<label class="collapse_open_btn" for="collapse_open" style="background: #@MenuService?.SelectedSuite?.HexColor">
    <div class="open_nav_btn">
        <SDKIcon Name="fa-chevron-right"/>
    </div>
    @* <div class="nav_btn_standar_text">
        <ResourceViewer ResourceTag="Custom.Menu.Collapse" />
    </div> *@
</label>
<nav class="menu_content">
    <div class="nav_section_1 w-100">
        <a class="nav_logo" href="/">
            <img class="" src="@LogoUrl" height="30px" alt="Logo compania">
        </a>
         <div class="p-2 input-group input-group-sm d-flex align-items-center d-block d-sm-none">
            <SDKSearch />
        </div>
        @foreach (var menuItem in MenuService?.Menus?.OrderBy(x => x.Order))
        {
            <NavMenuItem MenuItem="@menuItem" OnClick="@OnMenuItemClick" Focus="@(SelectedMainMenu == menuItem)" />
        }
    </div>
        <div class="nav_section_2 w-100">
            <hr class="mb-2">
            <a class="nav_btn_standar_suite my-1" data-toggle="tooltip" data-placement="right" 
            title="@TitleSuite" @onclick="@(()=> ShowSuiteMenu())" data-automation-id="Button_ShowSuiteMenu">
                    <div class="back_suite back_suite_general"></div>
                    <div class="nav_btn_standar_icon_suite">
                        <SDKIcon Name="fa-grid" Style="@GetIconColorsuite()" CssClass="font_size_125"/> 
                    </div>
                    <div class="nav_btn_standar_text">
                       <ResourceViewer ResourceTag="@SuiteMenu.ResourceTag" />
                    </div>  
            </a>	
            <a class="nav_btn_standar my-1" data-toggle="tooltip" data-placement="right" 
            title="@TitleLogout" @onclick="@(async ()  =>{await Logout();})" data-automation-id="Button_Logout">
                    <div class="nav_btn_standar_icon">
                        <SDKIcon Name="fa-right-from-bracket" CssClass="font_size_112"/>
                    </div>
                    <div class="nav_btn_standar_text">
                       <ResourceViewer ResourceTag="BLUser.Logout" />
                    </div>
            </a>
            @if (AuthenticationService.User != null)
            {
                <div class="nav_profile_btn" @onclick="@(async ()=> OpenModalPreferences())" data-automation-id="Button_ShowProfileMenu">
                    <div class="nav_btn_standar_icon nav_profile_photo">
                        <img src="@UserPhoto" height="36px" alt="imagen perfil">
                    </div>
                    <div class="nav_btn_standar_text">
                        @AuthenticationService.User
                    </div>
                </div>
            }
            
        </div>

</nav>
@if (SelectedMenu != null && ShowSubMenu && SelectedMenu.SubMenus?.Count > 0)
{
    
    <CascadingValue Value="HideSubmenu">
        <SubMenu MainItem="@SelectedMenu" OnClick="@OnMenuItemClick" />
    </CascadingValue>
}
@code {
    [Parameter]
    public bool ShowMenu { get; set; }

    private E00061_Menu SelectedMenu { get; set; }

    private E00061_Menu SelectedMainMenu { get; set; }

    private bool ShowSubMenu { get; set; }

    private E00061_Menu ProfileMenu { get; set; }

    private E00061_Menu SuiteMenu { get; set; }
    private string TitleSuite { get; set; }
    private string TitleLogout { get; set; }

    private string LogoUrl { get; set; } = "";

    private string UserPhoto { get; set; } = "";

    
    public void OnMenuItemClick(E00061_Menu menuItem)
    {
        
        SelectedMenu = menuItem;
        if(menuItem?.SubMenus?.Count > 0)
        {
            ShowSubMenu = true;
        }else{
            ShowSubMenu = false;
        }
        if(menuItem?.RowidMenuParent == null)
        {
            SelectedMainMenu = menuItem;
        }else{
            if(!ShowSubMenu){
                SelectedMainMenu = null;
            }
        }
        StateHasChanged();
    }

    private async Task Logout()
    {
        var result = await DialogService.ShowConfirmDialog(@<LogoutWindow/>, standardWidth: SDKModalWidth.Undefined);
        if(result != null && result == true)
        {
            MenuService.ClearMenu();
            await AuthenticationService.Logout();
        }
    }

    protected async override Task OnInitializedAsync()
    {
        
        MenuService.MenuLoaded += OnMenuLoaded;

        SuiteMenu = new E00061_Menu()
        {
            ResourceTag = "Custom.Menu.Suite",
            SubMenus = new List<E00061_Menu>(),
            Type  = EnumMenuType.CustomMenu
        };

        if(AuthenticationService.User != null)
        {
            ProfileMenu = new E00061_Menu()
            {
                ResourceTag = "BLUser.Profile",
                SubMenus = new List<E00061_Menu>(),
                CurrentText = "",
            };
            ProfileMenu.SubMenus.Add(new E00061_Menu()
            {
                ResourceTag = "BLUser.EditProfile",
                Url = $"/BLUser/edit/{AuthenticationService.User.Rowid}/",
                Type = EnumMenuType.CustomMenu
            });
            ProfileMenu.SubMenus.Add(new E00061_Menu()
            {
                ResourceTag = "BLUser.Logout",
                Url = "logout",
                Type = EnumMenuType.CustomMenu
            });
        }

        LogoUrl = AuthenticationService.GetConnectionLogo();
        UserPhoto = AuthenticationService.GetUserPhoto();

        await base.OnInitializedAsync();

        if(MenuService.Menus == null || MenuService.Menus.Count == 0 || MenuService.Suites == null || MenuService.Suites.Count == 0)
        {
            _  = MenuService.ReloadMenu();
        }

        TitleSuite = await UtilManager.GetResource("Custom.Menu.Suite");
        TitleLogout = await UtilManager.GetResource("BLUser.Logout");
        SuiteMenu.CurrentText = await UtilManager.GetResource("Custom.Menu.Suite");
        
    }
    private void ShowProfileMenu()
    {
        ShowSubMenu = true;
        SelectedMenu = ProfileMenu;
        StateHasChanged();
    }
    private async Task OpenModalPreferences()
    {
        var modal = await DialogService.ShowCustomDialog(ds => 
        @<UserPreferences />, title: "Custom.SDK.UserPreference", standardWidth: SDKModalWidth.Large);

        if(modal){
            UserPhoto = AuthenticationService.GetUserPhoto();
            StateHasChanged();
        }
    }
	

    private async Task SetSuite(E00061_Menu _tempMenu)
    {
        await MenuService.SetSelectedSuite(_tempMenu.Rowid);
        ShowSubMenu = false;
        StateHasChanged();
    }

    private void _setSuite(E00061_Menu _tempMenu)
    {
        _ = SetSuite(_tempMenu);
    }

    private void ShowSuiteMenu()
    {
        if(MenuService.Suites != null)
        {   
            if (SuiteMenu.SubMenus.Count == 0)
            {    
                foreach (var suite in MenuService.Suites)
                {
                    SuiteMenu.SubMenus.Add(new E00061_Menu()
                    {
                        CurrentText = suite.CurrentText,
                        Type = EnumMenuType.Suite,
                        IconClass = suite.IconClass,
                        StyleColor = suite.HexColor,
                        Rowid = suite.Rowid,
                        CustomAction = _setSuite
                    });
                }
            }
            ShowSubMenu = true;
            SelectedMenu = SuiteMenu;  
        }
        StateHasChanged();
    }

    private void HideSubmenu()
    {
        ShowSubMenu = false;
        SelectedMainMenu = null;
        StateHasChanged();
    }

    [Inject]
    public IJSRuntime JSRuntime { get; set; }
    private IJSObjectReference _jsModule;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender){
            _jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/Siesa.SDK.Frontend/Components/Layout/NavMenu/NavMenu.razor.js");
        }
    }

    private void OnMenuLoaded(dynamic sender, EventArgs e)
    {
        StateHasChanged();
    }

    public void Dispose()
    {

        if (MenuService != null)
        {
            MenuService.MenuLoaded -= OnMenuLoaded;
        }
    }

    public string GetIconColorsuite()
    {
        string ColorSuite = "color: #";

        if (MenuService?.SelectedSuite != null)
        {
            ColorSuite += MenuService.SelectedSuite.HexColor;
        }

        return ColorSuite;
    }

    public string GetIconsuite()
    {
        string IconSuite = "";

        if (MenuService?.SelectedSuite != null)
        {
            IconSuite = MenuService.SelectedSuite.IconClass;
        }

        return IconSuite;
    }

}
