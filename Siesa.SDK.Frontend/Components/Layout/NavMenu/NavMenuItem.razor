@using Siesa.SDK.Entities
@using Siesa.SDK.Frontend.Application
@using Siesa.SDK.Shared.Services
@inject IResourceManager ResourceManager
@inject IAuthenticationService AuthenticationService
@using Siesa.SDK.Shared.Utilities
@using Siesa.SDK.Entities.Enums
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@if(MenuItem.SubMenus?.Count > 0){
    @* <DxMenuItem Text="@Title" IconCssClass="@MenuItem.IconClass"> 
        <Items>
        @foreach(var subMenuItem in MenuItem.SubMenus.OrderBy(x => x.Order)){
            <SDKMenuItem MenuItem="@subMenuItem" />
        }
        </Items>
    </DxMenuItem>        *@
    <a href="#" @ref="btnRef" @attributes="@menuItemAttributes" @onclick:stopPropagation="true" @onclick="()=> OnClick(MenuItem)"  @onclick:preventDefault class="nav_btn_standar my-1" data-toggle="tooltip" data-placement="right"
        title="@Title">
        @if(MenuItem.IconClass != null){
            <div class="nav_btn_standar_icon">
                <i class=@(MenuItem.IconClass + " font_size_112")></i>
            </div>
        }
        
        <div class="nav_btn_standar_text">
            @Title
        </div>

        <span class="dropdown-toggle right"></span>
    </a>

}else{
    @if(MenuItem.Type == MenuType.Separator)
    {
        @* <DxMenuItem CssClass="separator" /> *@
    }else{
        @if(MenuItem.Feature != null)
        {
            @if(Utilities.CheckUserActionPermission(MenuItem.Feature.Rowid, 4, AuthenticationService))
            {
                <a href="@MenuItem.CurrentURL" @attributes="@menuItemAttributes" @onmouseover="MouseOver" @onmouseout="MouseOut" @onclick:stopPropagation="true" @onclick="()=> OnClickItem(MenuItem)"  @onclick:preventDefault  class="nav_btn_standar my-1" data-toggle="tooltip" data-placement="right"
                    title="@Title">
                    @if(MenuItem.IconClass != null){
                        <div class="nav_btn_standar_icon">
                            <i class=@(MenuItem.IconClass + " font_size_112")></i>
                        </div>
                    }
                    <div class="nav_btn_standar_text">
                        @Title
                    </div>
                    <div class="nav_btn_standar_text nav_btn_external" hidden="@(!ShowIconExternal)"  @onclick:stopPropagation="true"  @onclick="()=> OnClickItem(MenuItem, true)"  @onclick:preventDefault ><i class="fa-solid fa-arrow-up-right-from-square"></i></div>
                </a>

            }

        }else{
            <a href="@MenuItem.CurrentURL" @attributes="@menuItemAttributes" @onmouseover="MouseOver" @onmouseout="MouseOut" @onclick:stopPropagation="true" @onclick="()=> OnClickItem(MenuItem)"  @onclick:preventDefault class="nav_btn_standar my-1" data-toggle="tooltip" data-placement="right"
                title="@Title">
                @if(MenuItem.IconClass != null){
                    <div class="nav_btn_standar_icon">
                        <i class=@(MenuItem.IconClass + " font_size_112")></i>
                    </div>
                }
                <div class="nav_btn_standar_text">
                    @Title
                </div>
                <div class="nav_btn_standar_text nav_btn_external" hidden="@(!ShowIconExternal)"  @onclick:stopPropagation="true"  @onclick="()=> OnClickItem(MenuItem, true)"  @onclick:preventDefault ><i class="fa-solid fa-arrow-up-right-from-square"></i></div>
            </a>
        }
    }
}

@code {
    [Parameter] public E00061_Menu MenuItem { get; set; }

    [Parameter] public Action<E00061_Menu> OnClick { get; set; }
    [CascadingParameter] public Action HideSubmenu { get; set; }

    [Parameter] public bool Focus { get; set; }

    private string Title { get; set; } = "";

    private ElementReference btnRef;

    private bool ShowIconExternal { get; set; }

    private Dictionary<string, object> menuItemAttributes { get; set; } = new Dictionary<string, object>();

    private async Task<string> GetTitle(){
        if((MenuItem.RowidResource == null || MenuItem.RowidResource == 0) && MenuItem.ResourceTag != null){
            return await ResourceManager.GetResource(MenuItem.ResourceTag, AuthenticationService);
        }
        return await ResourceManager.GetResource(Convert.ToInt64(MenuItem.RowidResource), AuthenticationService);
    }

    protected override async Task OnInitializedAsync(){
        if(MenuItem.ResourceTag != null){
            menuItemAttributes.Add("sdk-resource-id", MenuItem.ResourceTag);
        }

        if(MenuItem.RowidResource != null && MenuItem.RowidResource != 0){
            menuItemAttributes.Add("sdk-resource-rowid", MenuItem.RowidResource);
        }

        if(String.IsNullOrEmpty(MenuItem.CurrentText))
        {
            Title = MenuItem.ResourceTag;
            Title = await GetTitle();
            MenuItem.CurrentText = Title;
        }else{
            Title = MenuItem.CurrentText;
        }
    }

    //on parameter change
    protected override async Task OnParametersSetAsync(){
        if(btnRef.Context != null && Focus)
        {
            btnRef.FocusAsync();
        }
        if(String.IsNullOrEmpty(MenuItem.CurrentText))
        {
            Title = MenuItem.ResourceTag;
            Title = await GetTitle();
            MenuItem.CurrentText = Title;
        }else{
            Title = MenuItem.CurrentText;
        }
    }

    private void OnClickItem(E00061_Menu menuItem, bool newTab = false){
        if(newTab)
        {
            try
            {
                JSRuntime.InvokeAsync<object>("open", menuItem.CurrentURL, "_blank");
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }else{
            NavigationManager.NavigateTo(menuItem.CurrentURL);
        }
        if(HideSubmenu != null){
            HideSubmenu();
        }
    }
    private void MouseOver(MouseEventArgs e)
    { 
        ShowIconExternal=true; 
    }
    private void MouseOut(MouseEventArgs e)
    { 
        ShowIconExternal=false; 
    }

}