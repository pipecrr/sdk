@using Siesa.SDK.Entities
@using Siesa.SDK.Frontend.Application
@using Siesa.SDK.Shared.Services
@inject IResourceManager ResourceManager
@inject IAuthenticationService AuthenticationService
@using Siesa.SDK.Shared.Utilities
@using Siesa.Global.Enums
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IFeaturePermissionService FeaturePermissionService
@inherits Siesa.SDK.Frontend.Components.SDKComponent
@using Siesa.Global.Enums

@if(MenuItem.SubMenus?.Count > 0){
    <a href="#" @ref="btnRef" @attributes="@menuItemAttributes" @onclick:stopPropagation="true" @onclick="()=> OnClick(MenuItem)"  @onclick:preventDefault class="nav_btn_standar my-1" data-toggle="tooltip" data-placement="right"
        title="@Title" data-automation-id="@GetAutomationId()">
        @if(MenuItem.IconClass != null){
            <div class="nav_btn_standar_icon">
                <SDKIcon Name="@GetIconClass()" CssClass="font_size_112"></SDKIcon>
            </div>
        }
        
        <div class="nav_btn_standar_text">
            @Title
        </div>

        <span class="dropdown-toggle right"></span>
    </a>

}else{
    @if(MenuItem.Type == EnumMenuType.Separator)
    {
       <hr class="m-0 sdk_separator"> 
    }else{
        @if(MenuItem.Feature != null && MenuItem.Type == EnumMenuType.Feature)
        {   
            @if(ShowItemFeature)
            {
                <MenuItem Menu="@MenuItem" MenuItemAttributes="@menuItemAttributes" Title="@Title" OnClick="@OnClick" />
            }

        }else if(MenuItem.Type == EnumMenuType.Suite)
        {

            <MenuItem Menu="@MenuItem" MenuItemAttributes="@menuItemAttributes" Title="@Title" OnClick="@OnClick" IsSuite="true" />
        }else
        {   
            <MenuItem Menu="@MenuItem" MenuItemAttributes="@menuItemAttributes" Title="@Title" OnClick="@OnClick" />
        }
    }
}

@code {
    [Parameter] public E00061_Menu MenuItem { get; set; }

    [Parameter] public Action<E00061_Menu> OnClick { get; set; }

    [CascadingParameter] public Action HideSubmenu { get; set; }

    [Parameter] public bool Focus { get; set; }

    private string Title { get; set; } = "";

    private ElementReference btnRef;

    private bool ShowItemFeature { get; set; }

    private Dictionary<string, object> menuItemAttributes { get; set; } = new Dictionary<string, object>();

    private string GetIconClass()
    {
        string MenuIcon = "";

        if(!String.IsNullOrEmpty(MenuItem.IconClass))
        {
            MenuIcon = MenuItem.IconClass; 
        }

        return MenuIcon;
    }

    private async Task<string> GetTitle(){
        if((MenuItem.RowidResource == null || MenuItem.RowidResource == 0) && MenuItem.ResourceTag != null){
            return await ResourceManager.GetResource(MenuItem.ResourceTag, AuthenticationService);
        }
        return await ResourceManager.GetResource(Convert.ToInt64(MenuItem.RowidResource), AuthenticationService);
    }

    private async Task ItemFeature()
    {
        if(MenuItem.Feature != null && MenuItem.Type == EnumMenuType.Feature)
        {
            ShowItemFeature = await FeaturePermissionService.CheckUserActionPermission(MenuItem.Feature.BusinessName, enumSDKActions.Access, AuthenticationService);
        }
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync(){
        if(MenuItem.ResourceTag != null){
            menuItemAttributes.Add("sdk-resource-id", MenuItem.ResourceTag);
        }

        if(MenuItem.RowidResource != null && MenuItem.RowidResource != 0){
            menuItemAttributes.Add("sdk-resource-rowid", MenuItem.RowidResource);
        }
        _ = ItemFeature();

        if(String.IsNullOrEmpty(MenuItem.CurrentText))
        {
            Title = MenuItem.ResourceTag;
            Title = await GetTitle();
            MenuItem.CurrentText = Title;
        }else{
            Title = MenuItem.CurrentText;
        }
    }

    //on parameter change
    protected override async Task OnParametersSetAsync(){
        if(btnRef.Context != null && Focus)
        {
            btnRef.FocusAsync();
        }
        if(String.IsNullOrEmpty(MenuItem.CurrentText))
        {
            Title = MenuItem.ResourceTag;
            Title = await GetTitle();
            MenuItem.CurrentText = Title;
        }else{
            Title = MenuItem.CurrentText;
        }
        AutomationId = Title;
        _ = ItemFeature();
    }
}