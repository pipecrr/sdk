@using Siesa.SDK.Entities
@using Siesa.SDK.Frontend.Application
@using Siesa.SDK.Shared.Services
@inject IResourceManager ResourceManager
@inject IAuthenticationService AuthenticationService
@using Siesa.SDK.Shared.Utilities
@using Siesa.Global.Enums
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IFeaturePermissionService FeaturePermissionService
@inherits Siesa.SDK.Frontend.Components.SDKComponent
@using Siesa.Global.Enums

@if(MenuItem.SubMenus?.Count > 0){
    <a href="#" @ref="btnRef" @attributes="@menuItemAttributes" @onclick:stopPropagation="true" @onclick="()=> OnClick(MenuItem)"  @onclick:preventDefault class="nav_btn_standar my-1" data-toggle="tooltip" data-placement="right"
        title="@Title" data-automation-id="@GetAutomationId()">
        @if(MenuItem.IconClass != null){
            <div class="nav_btn_standar_icon">
                <SDKIcon Name="@GetIconClass()" CssClass="font_size_112"></SDKIcon>
            </div>
        }
        
        <div class="nav_btn_standar_text">
            @Title
        </div>

        <span class="dropdown-toggle right"></span>
    </a>

}else{
    @if(MenuItem.Type == MenuType.Separator)
    {
       <hr class="m-0 sdk_separator"> 
    }else{
        @if(MenuItem.Feature != null && MenuItem.Type == MenuType.Feature && string.IsNullOrEmpty(MenuItem.Url))
        {
            @if(ShowItemFeature)
            {
                <a href="@MenuItem.CurrentURL" @attributes="@menuItemAttributes" @onmouseover="MouseOver" @onmouseout="MouseOut" @onclick:stopPropagation="true" @onclick="()=> OnClickItem(MenuItem)"  @onclick:preventDefault  class="nav_btn_standar my-1" data-toggle="tooltip" data-placement="right"
                    title="@Title" data-automation-id="@GetAutomationId()">
                    @if(MenuItem.IconClass != null){
                        <div class="nav_btn_standar_icon">
                            <SDKIcon Name="@GetIconClass()" CssClass="font_size_112"></SDKIcon>
                        </div>
                    }
                    <div class="nav_btn_standar_text">
                        @Title
                    </div>
                    <div class="nav_btn_standar_text nav_btn_external" hidden="@(!ShowIconExternal)"  @onclick:stopPropagation="true"  @onclick="()=> OnClickItem(MenuItem, true)"  @onclick:preventDefault >
                        <SDKIcon Name="fa-arrow-up-right-from-square"></SDKIcon>
                    </div>
                </a>
            }

        }else{
            <a href="@MenuItem.CurrentURL" @attributes="@menuItemAttributes" @onmouseover="MouseOver" @onmouseout="MouseOut" @onclick:stopPropagation="true" @onclick="()=> OnClickItem(MenuItem)"  @onclick:preventDefault class="nav_btn_standar my-1" data-toggle="tooltip" data-placement="right"
                title="@Title" data-automation-id="@GetAutomationId()">
                @if(MenuItem.IconClass != null){
                    <div class="nav_suite_box_icon" style="background: @GetStyleColor()">
                        <SDKIcon Name="@GetIconClass()" CssClass="font_size_112"></SDKIcon>
                    </div>
                }
                <div class="nav_btn_standar_text">
                    @Title
                </div>
                <div class="nav_btn_standar_text nav_btn_external" hidden="@(!ShowIconExternal)"  @onclick:stopPropagation="true"  @onclick="()=> OnClickItem(MenuItem, true)"  @onclick:preventDefault> 
                    <SDKIcon Name="fa-arrow-up-right-from-square"></SDKIcon>
                </div>
            </a>
        }
    }
}

@code {
    [Parameter] public E00061_Menu MenuItem { get; set; }

    [Parameter] public Action<E00061_Menu> OnClick { get; set; }
    [CascadingParameter] public Action HideSubmenu { get; set; }

    [Parameter] public bool Focus { get; set; }

    private string Title { get; set; } = "";

    private ElementReference btnRef;

    private bool ShowIconExternal { get; set; }
    private bool ShowItemFeature { get; set; }

    private Dictionary<string, object> menuItemAttributes { get; set; } = new Dictionary<string, object>();

    private string GetIconClass()
    {
        string MenuIcon = "";

        if(!String.IsNullOrEmpty(MenuItem.IconClass))
        {
            MenuIcon = MenuItem.IconClass; 
        }

        return MenuIcon;
    }

    private async Task<string> GetTitle(){
        if((MenuItem.RowidResource == null || MenuItem.RowidResource == 0) && MenuItem.ResourceTag != null){
            return await ResourceManager.GetResource(MenuItem.ResourceTag, AuthenticationService);
        }
        return await ResourceManager.GetResource(Convert.ToInt64(MenuItem.RowidResource), AuthenticationService);
    }

    private async Task ItemFeature()
    {
        if(MenuItem.Feature != null && MenuItem.Type == MenuType.Feature && string.IsNullOrEmpty(MenuItem.Url))
        {
            ShowItemFeature = await FeaturePermissionService.CheckUserActionPermission(MenuItem.Feature.BusinessName, enumSDKActions.Access, AuthenticationService);
        }
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync(){
        if(MenuItem.ResourceTag != null){
            menuItemAttributes.Add("sdk-resource-id", MenuItem.ResourceTag);
        }

        if(MenuItem.RowidResource != null && MenuItem.RowidResource != 0){
            menuItemAttributes.Add("sdk-resource-rowid", MenuItem.RowidResource);
        }
        _ = ItemFeature();

        if(String.IsNullOrEmpty(MenuItem.CurrentText))
        {
            Title = MenuItem.ResourceTag;
            Title = await GetTitle();
            MenuItem.CurrentText = Title;
        }else{
            Title = MenuItem.CurrentText;
        }
    }

    //on parameter change
    protected override async Task OnParametersSetAsync(){
        if(btnRef.Context != null && Focus)
        {
            btnRef.FocusAsync();
        }
        if(String.IsNullOrEmpty(MenuItem.CurrentText))
        {
            Title = MenuItem.ResourceTag;
            Title = await GetTitle();
            MenuItem.CurrentText = Title;
        }else{
            Title = MenuItem.CurrentText;
        }
        AutomationId = Title;
        _ = ItemFeature();
    }

    private void OnClickItem(E00061_Menu menuItem, bool newTab = false){
        if(menuItem != null && menuItem.CustomAction != null){
            menuItem.CustomAction.Invoke(menuItem);
            return;
        }
        if(newTab)
        {
            try
            {
                JSRuntime.InvokeAsync<object>("open", menuItem.CurrentURL, "_blank");
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }else{
            NavigationManager.NavigateTo(menuItem.CurrentURL);
        }
        if(HideSubmenu != null){
            HideSubmenu();
        }
    }
    private void MouseOver(MouseEventArgs e)
    { 
        ShowIconExternal=true; 
    }
    private void MouseOut(MouseEventArgs e)
    { 
        ShowIconExternal=false; 
    }

    private string GetStyleColor(){

        if(!string.IsNullOrEmpty(MenuItem.StyleColor))
        {
            return $"#{MenuItem.StyleColor};";
        }
        return "";
    }

    protected override string GetAutomationId()
    {
        if(!string.IsNullOrEmpty(AutomationId))
        {
            if (MenuItem != null && MenuItem.Level > 1 && OnClick.Target != null)
            {
                var ParentMenu =  OnClick.Target.GetType().GetProperty("MainItem").GetValue(OnClick.Target);
                if (ParentMenu != null)
                {
                    var ParentMenuName = ParentMenu.GetType().GetProperty("CurrentText").GetValue(ParentMenu);
                    if (!string.IsNullOrEmpty(ParentMenuName.ToString()))
                    {
                        AutomationId = $"{ParentMenuName}_SubMenu_{Title}";
                    }
                }
            }
        }
        return base.GetAutomationId();
    }

}