@using SDK.Components.Visualization
@using Siesa.SDK.Frontend.Application
@using Siesa.SDK.Shared.Services
@using Siesa.SDK.Frontend.Components.Visualization

@inject IResourceManager ResourceManager
@inject IAuthenticationService AuthenticationService
@inject NavigationManager NavigationManager
@inject IFeaturePermissionService FeaturePermissionService
@inherits Siesa.SDK.Frontend.Components.SDKComponent

@if(HasPermission)
{
    @if(!String.IsNullOrEmpty(form) && SubmitFormOnClick)
    {
        <button class="@GetCssClass()" data-toggle="tooltip" disabled="@(!Enabled)"
            data-placement="top" title="@Text" form="@form" type="submit" data-automation-id="@GetAutomationId()">
            <SDKIcon Name="@IconCssClass" />
        </button>
    }else{
        <button class="@GetCssClass()" data-toggle="tooltip" disabled="@(!Enabled)"
            data-placement="top" title="@Text" form="@form" @onclick="@OnClick" data-automation-id="@GetAutomationId()" @onclick:preventDefault>
            <SDKIcon Name="@IconCssClass" />
        </button>
    }
}



@code {
    [Parameter] public EventCallback<MouseEventArgs> Click { get; set; }

    [Parameter] public string form { get; set; }

    [Parameter] public bool SubmitFormOnClick { get; set; } =  false;

    [Parameter] public string IconCssClass { get; set; }

    [Parameter] public bool Enabled { get; set; } = true;

    [Parameter] public List<string> ListPermission { get; set; }
    [Parameter] public string BusinessName { get; set; } 

    [Parameter] public string CssClass { get; set; }
    private string Text { get; set; }

    private bool HasPermission = true;

    [Parameter] public string NavigateUrl { get; set; }
    [CascadingParameter]
    public TopBar? topBar { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if(ListPermission != null && ListPermission.Count > 0)
        {
            HasPermission = false;
      
            HasPermission = await FeaturePermissionService.CheckUserActionPermissions(BusinessName, ListPermission, AuthenticationService);
        }
        Text = ResourceTag;
        await base.OnInitializedAsync();
        Text = await GetText();
    }

    private async Task OnClick(MouseEventArgs e)
    {
        if(NavigateUrl != null){
            NavigationManager.NavigateTo(NavigateUrl);
            topBar?.CloseExtraButtons();
        }else{
            await Click.InvokeAsync(e);
        }
        topBar?.CloseExtraButtons();
        
    }

    protected override string GetAutomationId()
    {
        if(string.IsNullOrEmpty(AutomationId))
        {
            if(!string.IsNullOrEmpty(ResourceTag))
            {
                AutomationId = ResourceTag;
            }
        }
        return base.GetAutomationId();
    }
    public async Task SetEnabled(bool value)
    {
        this.Enabled = true;
        StateHasChanged();
    }

    private string GetCssClass()
    {
        string CssDefault = "btn btn-sm layout_btn_standar-sm ml-1";

        if (!String.IsNullOrEmpty(CssClass))
        {
            return $"{CssDefault} {CssClass}";
        }
        
        return CssDefault;
    }
}