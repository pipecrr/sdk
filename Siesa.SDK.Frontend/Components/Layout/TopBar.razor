@implements IDisposable
@inject IJSRuntime JSRuntime
@if (LayoutService.TopBarTitle != null || LayoutService.TopBarButtons != null || LayoutService.TopBarExtraButtons != null)
{
    <div class=@("col-12 p-3 whcm_toolbar " + LayoutService.StyleName)>
        <div class="whcm_toolbar_text d-flex align-items-center">
            <button class="btn btn-sm layout_btn_standar-sm mr-3" data-toggle="tooltip"
                data-placement="top" title="Atras" @onclick="@OnClick" >
                <i class="fa-solid fa-chevron-left"></i>
            </button>
            <h3 class="mb-0">@LayoutService.TopBarTitle</h3>
        </div>
        <div class="d-flex align-items-center position-relative">
            @LayoutService.TopBarButtons
            @if(LayoutService.HasExtraButtons)
            {
                <button @onclick="@(()=>ShowMoreOptions = !ShowMoreOptions)" class="btn btn-sm layout_btn_standar-sm ml-1"
                    data-toggle="tooltip" data-placement="top" title="Más opciones">
                    <i class="fa-solid fa-ellipsis-vertical"></i>
                </button>
                <div id="boxToolbar" class="whcm_toolbar_tooltip px-2 pt-3 pb-2" hidden="@(!ShowMoreOptions)">
                    @LayoutService.TopBarExtraButtons
                </div>
            }
        </div>
    </div>
}

@code {
    private bool ShowMoreOptions = false;
    [Inject]
    public ILayoutService LayoutService { get; set; }

    protected override void OnInitialized()
    {
        LayoutService.PropertyChanged += LayoutService_PropertyChanged;
        base.OnInitialized();
    }

    private void LayoutService_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        if (
            e.PropertyName == nameof(ILayoutService.TopBarTitle) || 
            e.PropertyName == nameof(ILayoutService.TopBarButtons) || 
            e.PropertyName == nameof(ILayoutService.TopBarExtraButtons) || 
            e.PropertyName == nameof(ILayoutService.StyleName) ||
            e.PropertyName == nameof(ILayoutService.HasExtraButtons)
        )
        {
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        if (LayoutService != null)
        {
            LayoutService.PropertyChanged -= LayoutService_PropertyChanged;
        }
    }

    private async Task OnClick(MouseEventArgs e)
    {
        try
        {
            JSRuntime.InvokeAsync<object>("window.history.go", -1);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
       
    }

}