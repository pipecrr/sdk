@using Siesa.SDK.Entities;
@using Siesa.SDK.Shared.Services 
@using Newtonsoft.Json;
@using System.Linq;

@implements IDisposable

@inject IAuthenticationService AuthenticationService
@inject IBackendRouterService BackendRouterService
@inject IJSRuntime JSRuntime
@inject NavigationService navigationService

@if (LayoutService.TopBarTitle != null || LayoutService.TopBarButtons != null || LayoutService.TopBarExtraButtons != null)
{
    <div class=@("col-12 p-2 p-sm-3 whcm_toolbar " + LayoutService.StyleName)>
        <div class="whcm_toolbar_text d-flex align-items-center">
            @if (ShowBackButton==true && navigationService.CanNavigateBack)
            {
            <button Value="@ShowBackButton" class="btn btn-sm layout_btn_standar-sm mr-1 mr-sm-3" data-toggle="tooltip"
                data-placement="top" title="Atras" @onclick="@OnClick" >
                <i class="fa-solid fa-chevron-left"></i>
            </button>
            }
            <h3 class="mb-0">@LayoutService.TopBarTitle</h3>
        </div>
        <div class="whcm_toolbar_button d-flex align-items-center position-relative pt-2 pt-sm-0">
            @LayoutService.TopBarButtons
            @if(LayoutService.HasExtraButtons)
            {
                <button id="TopBarExtraButtons" @onclick="@(()=>ShowMoreOptions = !ShowMoreOptions)" class="btn btn-sm layout_btn_standar-sm ml-1"
                    data-toggle="tooltip" data-placement="top" title="Más opciones">
                    <i class="fa-solid fa-ellipsis-vertical"></i>
                </button>

                <DxDropDown @bind-IsOpen="@ShowMoreOptions" PositionMode="DropDownPositionMode.Bottom" PositionTarget="#TopBarExtraButtons"
                    CloseMode="DropDownCloseMode.Close"
                    PreventCloseOnPositionTargetClick="true" CssClass="whcm_toolbar_tooltip px-2 pt-3 pb-2" HeaderVisible="false"
                    FooterVisible="false">
                    <BodyTemplate>
                        <CascadingValue Value="this">
                            @LayoutService.TopBarExtraButtons
                        </CascadingValue>
                    </BodyTemplate>
                </DxDropDown>
                
            }
        </div>
    </div>
    @if (showCompaies)
    {
        <div class="col-12 px-0 py-3">
            <div class="whcm_company_select">
                        <select class="form-select form-control form-control-sm font-weight-bold" id="inputCompany">
                            @foreach (var company in CompaniesList)
                                {
                                    <option value="@company.Rowid">@company.Name</option>
                                }
                        </select>
            </div>
        </div>
    }
}
@code {

    [Parameter] public bool ShowBackButton { get; set; } = true;

    private bool ShowMoreOptions = false;
    [Inject]
    public ILayoutService LayoutService { get; set; }

    [Parameter]
    public bool showCompaies { get; set; } = true; //true, solo si el BL tiene relacion con company

    public List<E00201_Company> CompaniesList { get; set; } = new List<E00201_Company>();

    public E00201_Company SelectedCompany { get; set; } = new E00201_Company();

    protected override void OnInitialized()
    {
        
        LayoutService.PropertyChanged += LayoutService_PropertyChanged;
        GetCompany();
        base.OnInitialized();
    }

    private void LayoutService_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        if (
            e.PropertyName == nameof(ILayoutService.TopBarTitle) || 
            e.PropertyName == nameof(ILayoutService.TopBarButtons) || 
            e.PropertyName == nameof(ILayoutService.TopBarExtraButtons) || 
            e.PropertyName == nameof(ILayoutService.StyleName) ||
            e.PropertyName == nameof(ILayoutService.HasExtraButtons)
        )
        {
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        if (LayoutService != null)
        {
            LayoutService.PropertyChanged -= LayoutService_PropertyChanged;
        }
    }

    public async Task CloseExtraButtons()
    {
        if (ShowMoreOptions)
        {
            ShowMoreOptions = false;
            StateHasChanged();
        }
    }

    private async Task OnClick(MouseEventArgs e)
    {
        try
        {   
            navigationService.NavigateBack();
            //JSRuntime.InvokeAsync<object>("window.history.go", -1);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
       
    }

    public async Task GetCompany()
    {
        try
        {
            var BL = BackendRouterService.GetSDKBusinessModel("BLSDKCompany",AuthenticationService);

            var CompanyGroup = AuthenticationService.GetRowidCompanyGroup();
        
            var DataCompany = await BL.GetData(null, null);
            if (DataCompany.Data != null)
            {
                CompaniesList = DataCompany.Data.Select(x => JsonConvert.DeserializeObject<E00201_Company>(x)).Where(x => x.RowidCompanyGroup == CompanyGroup).ToList();
            }
        
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

}