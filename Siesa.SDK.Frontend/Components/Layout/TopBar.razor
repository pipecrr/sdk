@using Siesa.SDK.Entities;
@using Siesa.SDK.Shared.Services 
@using Newtonsoft.Json;
@using System.Linq;
@using Siesa.SDK.Shared.Utilities;

@implements IDisposable

@inject IAuthenticationService AuthenticationService
@inject IBackendRouterService BackendRouterService
@inject IJSRuntime JSRuntime
@inject NavigationService navigationService
@inject SDKNotificationService  NotificationService

@if (LayoutService.TopBarTitle != null || LayoutService.TopBarButtons != null || LayoutService.TopBarExtraButtons != null)
{
    <div class=@("col-12 p-2 p-sm-3 whcm_toolbar " + LayoutService.StyleName)>
        <div class="whcm_toolbar_text d-flex align-items-center">
            @if (ShowBackButton==true && navigationService.CanNavigateBack)
            {
            <button Value="@ShowBackButton" class="btn btn-sm layout_btn_standar-sm mr-1 mr-sm-3" data-toggle="tooltip"
                data-placement="top" title="Atras" @onclick="@OnClick" >
                <i class="fa-solid fa-chevron-left"></i>
            </button>
            }
            <h3 class="mb-0">@LayoutService.TopBarTitle</h3>
        </div>
        <div class="whcm_toolbar_button d-flex align-items-center position-relative pt-2 pt-sm-0">
            @if(MainLayout != null && MainLayout.IsDefaultArea)
            {
                <TopBarButton  ResourceTag="Action.Expand" IconCssClass="@GetExpandIcon()" Click="@OnClickExpand"/>
                <TopBarButton  ResourceTag="Action.AdvanceSearch" IconCssClass="fa-solid fa-magnifying-glass-plus" Click="@SearchAdvance"/>
            }
            @LayoutService.TopBarButtons
            @if(LayoutService.HasExtraButtons)
            {
                <button id="TopBarExtraButtons" @onclick="@(()=>ShowMoreOptions = !ShowMoreOptions)" class="btn btn-sm layout_btn_standar-sm ml-1"
                    data-toggle="tooltip" data-placement="top" title="Más opciones">
                    <i class="fa-solid fa-ellipsis-vertical"></i>
                </button>

                <DxDropDown @bind-IsOpen="@ShowMoreOptions" PositionMode="DropDownPositionMode.Bottom" PositionTarget="#TopBarExtraButtons"
                    CloseMode="DropDownCloseMode.Close"
                    PreventCloseOnPositionTargetClick="true" CssClass="whcm_toolbar_tooltip px-2 pt-3 pb-2" HeaderVisible="false"
                    FooterVisible="false">
                    <BodyTemplate>
                        <CascadingValue Value="this">
                            @LayoutService.TopBarExtraButtons
                        </CascadingValue>
                    </BodyTemplate>
                </DxDropDown>
                
            }
        </div>
    </div>
    @if (!HiddenCompaies)
    {
        @if (ShowCompanies)
        {
            <div>
                <div class="whcm_company_select ">
                            <select class="form-select form-control form-control-sm font-weight-bold" disabled="@DisableCompanies"
                            id="inputCompany" @onchange="@ChangeCompany">
                                @foreach (var company in CompaniesList)
                                    {
                                        <option value="@company.Rowid"
                                        selected="@(company.Rowid == SelectedCompany.Rowid)">@company.ToString()</option>
                                    }
                            </select>
                </div>
            </div>
        }
    }
}
@code {
    [CascadingParameter]
    public MainLayout MainLayout { get; set; }

    [Parameter] public bool ShowBackButton { get; set; } = true;

    [Parameter] public bool HiddenCompaies { get; set; } = false;

    [Parameter] public bool DisableCompanies { get; set; } = false;

    [Parameter] public EventCallback<E00201_Company> OnChangeCompany { get; set; } 

    [Inject] public ILayoutService LayoutService { get; set; }

    private bool ShowMoreOptions = false;

    private bool ShowCompanies { get; set; } = false;

    public List<E00201_Company> CompaniesList { get; set; } = new List<E00201_Company>();

    public E00201_Company SelectedCompany { get; set; } = new E00201_Company();

    
    protected override async Task OnInitializedAsync()
    {  
        LayoutService.PropertyChanged += LayoutService_PropertyChanged;
        
        await GetCompanies();
        base.OnInitialized();
    }


    private async Task ChangeCompany(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            var valuestr= e.Value.ToString();
            short rowidCompany = short.Parse(valuestr);

            SetCompany(rowidCompany, true);
            SelectedCompany.Rowid = rowidCompany;

            if (OnChangeCompany.HasDelegate)
            {
              await OnChangeCompany.InvokeAsync(SelectedCompany);
            }
        }
    }

    private void SetCompany(short rowidCompany, bool setObj)
    {
        if (LayoutService?.BusinessObj?.BaseObj != null && InheritCompany())
        {
             LayoutService.BusinessObj.BaseObj.RowidCompany = rowidCompany;
             if(setObj)
             {
                LayoutService.BusinessObj.BaseObj.Company = CompaniesList.FirstOrDefault(x => x.Rowid == rowidCompany);
             }
             LayoutService.BusinessObj.Refresh(true);
        } 
    }

    public bool InheritCompany(){
        Type type = LayoutService.BusinessObj.BaseObj.GetType();
        if (Utilities.IsAssignableToGenericType(type, typeof(BaseCompany<>)))
        {
            return true;
        }
        return false;
    }

    private void LayoutService_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        if(e.PropertyName == nameof(ILayoutService.BusinessObj))
        {
            if (LayoutService?.BusinessObj?.BaseObj != null && InheritCompany())
            {
                ShowCompanies = true;
                if(LayoutService.BusinessObj.BaseObj.RowidCompany != SelectedCompany.Rowid)
                {
                    SetCompany(SelectedCompany.Rowid, true);
                }
                StateHasChanged();
            }else{
                ShowCompanies = false;
                StateHasChanged();
            }
        }

        if(e.PropertyName == nameof(ILayoutService.HiddenCompaies))
        {
            if(LayoutService?.HiddenCompaies == true){

                HiddenCompaies = LayoutService.HiddenCompaies;
            }else{

                HiddenCompaies = false;
            }

            StateHasChanged();
        }

        if(e.PropertyName == nameof(ILayoutService.DisableCompanies))
        {
            if(LayoutService?.DisableCompanies == true){

                DisableCompanies = LayoutService.DisableCompanies;
            }else{

                DisableCompanies = false;
            }

            StateHasChanged();
        }

        if(e.PropertyName == nameof(ILayoutService.OnChangeCompany))
        {
            if(LayoutService != null){

                OnChangeCompany = LayoutService.OnChangeCompany;
            }
            StateHasChanged();
        }
        
        if (
            e.PropertyName == nameof(ILayoutService.TopBarTitle) || 
            e.PropertyName == nameof(ILayoutService.TopBarButtons) || 
            e.PropertyName == nameof(ILayoutService.TopBarExtraButtons) || 
            e.PropertyName == nameof(ILayoutService.StyleName) ||
            e.PropertyName == nameof(ILayoutService.HasExtraButtons)
            ) 
        {
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        if (LayoutService != null)
        {
            LayoutService.PropertyChanged -= LayoutService_PropertyChanged;
        }
    }

    public async Task CloseExtraButtons()
    {
        if (ShowMoreOptions)
        {
            ShowMoreOptions = false;
            StateHasChanged();
        }
    }

    private async Task OnClick(MouseEventArgs e)
    {
        try
        {   
            navigationService.NavigateBack();
            //JSRuntime.InvokeAsync<object>("window.history.go", -1);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
       
    }

    public async Task GetCompanies()
    {
        try
        {
            var BL = BackendRouterService.GetSDKBusinessModel("BLSDKCompany",AuthenticationService);

            var CompanyGroup = AuthenticationService.GetRowidCompanyGroup();
        
            var DataCompany = await BL.GetData(null, null);
            if (DataCompany.Data != null)
            {
                CompaniesList = DataCompany.Data.Select(x => JsonConvert.DeserializeObject<E00201_Company>(x))
                                                .Where(x => x.RowidCompanyGroup == CompanyGroup)
                                                .ToList();

                if (CompaniesList.Count > 0)
                {
                    SetCompany(CompaniesList.First().Rowid, true);
                    SelectedCompany.Rowid = CompaniesList.First().Rowid;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task OnClickExpand(MouseEventArgs e)
    {
        if(MainLayout != null)
        {
            MainLayout.ToogleMaximize();
        }
    }

    private string GetExpandIcon()
    {
        if(MainLayout != null)
        {
            if(MainLayout.IsMaximized())
            {
                return "fa-solid fa-compress";
            }
            else
            {
                return "fa-solid fa-expand";
            }
        }

        return "fa-solid fa-expand";
    }

}