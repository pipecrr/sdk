@using Siesa.SDK.Shared.Services
@using Siesa.SDK.Frontend.Components.Layout
@using Siesa.SDK.Entities;
@using Siesa.SDK.Shared.DTOS
@using Siesa.SDK.Frontend.Components.Fields;
@using Siesa.SDK.Frontend.Components.Visualization   
@using Siesa.SDK.Frontend.Components.Layout
@using Newtonsoft.Json;

@inject IAuthenticationService AuthenticationService
@inject NavigationService NavigationService
@inject IJSRuntime JSRuntime
@inject Blazored.LocalStorage.ILocalStorageService localStorageService;
@layout EmptyLayout
@inject IBackendRouterService BackendRouterService
@inherits SDKComponent;

<header class="col-12 pl-5 sdk_header">
    <div class="header_circles_box">
        <div class="header_circles_box_1">
        </div>
        <div class="header_circles_box_2">
        </div>
        <div class="header_circles_box_3">
        </div>
        <div class="header_circles_box_4">
        </div>
    </div>
    <div class="header_circles_box_logo"> 
        <div class="header_circles_box_1"></div> 
        <div class="header_circles_box_2"> </div>
        <div class="header_circles_box_3"> </div>
        <div class="header_circles_box_4"> </div>
    </div>
    <div class="col-xl-5 col-lg-4 col-md-4 col-sm-5 col-5 sdk_company_logo">
         <a class="nav_logo" href="/">
            <img class="ml-2 whcm_logo_compania" src="@LogoUrl" height="30px"
                alt="Logo compania">
        </a>
    </div>
    <div class="col-xl-2 col-lg-2 col-md-2 col-sm-3 col-0 p-0 d-none d-sm-block" id="SDKHeader_Search">
        <SDKSearch />
    </div>
    <div class="col-xl-5 col-lg-6 col-md-6 col-sm-4 col-7 p-0 d-flex justify-content-end align-items-center info_head">
        <div class="sdk_conection">

            <div class="position-relative">
                <SDKButton Click="ToogleConnect" CssClass="btn btn_connect py-0 px-2 px-lg-3 d-flex align-items-center"   
                       AutomationId="SDKHeader_ButtonConfig">
                    <div id="SDKHeader_ButtonConfig">
                        <p class="font-weight-bold m-0 text-truncate" data-toggle="tooltip" data-placement="bottom" title="">
                            @GetCurrentConnectionName()     
                            </p>
                        @if(_showCompanyGroups){
                            <p class="font-weight-bold m-0 text-truncate" data-toggle="tooltip" data-placement="bottom" title="">
                                @GetCurrentCompanyGroupName()
                            </p>
                        }
                    </div>
                    <div class="pl-2 pl-xl-3">
                        <SDKIcon Name="fa-chevron-down"/>
                    </div>
                </SDKButton>

                    <SDKDropDown @bind-IsOpen="@ConnectEnabled"
                    CssClass="connect_tooltip" 
                    AutomationId="SDKHeader_Config"
                    PositionTarget="#SDKHeader_ButtonConfig"
                    PositionMode="DropDownPositionMode.Bottom"
                    FooterVisible="true" HeaderVisible="true"
                    StopOutsideClickPropagation="true">

                        <HeaderTemplate>
                            
                            <label class="pt-3 px-3 pb-0 col-form-label font-weight-bold width_content_Header"><ResourceViewer ResourceTag="Custom.SDKHeader.Config" /></label>
                        </HeaderTemplate>

                            <BodyTemplate>
                                <div class="p-3">
                                    <div class="alert alert-info mb-3 font_size_087 p-3" role="alert">
                                        <p><ResourceViewer ResourceTag="Custom.SDKHeader.ChangeConfigCompanyGroup" /></p>
                                        <p style="margin:0px"><strong><ResourceViewer ResourceTag="Custom.SDKHeader.Connection" /></strong></p>
                                        <p style="margin:0px">@GetCurrentConnectionName()</p>
                                    </div>
                                    @if(_showCompanyGroups){
                                        <div class="connect_select_search">
                                            <label class="col-form-label col-form-label-sm font-weight-bold" for="inputGrupo"><ResourceViewer ResourceTag="Custom.SDKHeader.Group" /></label>
                                            <div class="d-flex form-control form-control-sm p-0">

                                                <SDKEntityField
                                                    RelatedBusiness="@RelatedBusiness"
                                                    BaseObj="@this"
                                                    FieldName="SelectedGroup"
                                                    RelatedParams="@RelatedParams"
                                                    CanSearch="false"
                                                />

                                            </div>
                                        </div>
                                    }
                                </div>

                            </BodyTemplate>

                                <FooterTemplate>
                                    @if(_showCompanyGroups){
                                        <div class="p-3">
                                            <SDKButton Click="@SetCompanyGroup" CssClass="btn btn-primary btn_primary_def_1 btn-sm w-100"
                                            AutomationId="SDKHeader_ButtonSetCompanyGroup">
                                                @if (loading)
                                                {
                                                    <p style="margin-bottom: 0 !important"><ResourceViewer ResourceTag="Custom.Generic.Loading" /><span class="spinner-border spinner-border-sm mr-1"></span></p>
                                                }
                                                else
                                                {
                                                    <p style="margin-bottom: 0 !important"><ResourceViewer ResourceTag="Custom.SDKHeader.ChangeSettings" /></p>
                                                }
                                            </SDKButton>
                                        </div>
                                    }
                                </FooterTemplate>
                    </SDKDropDown>
            </div>
        </div>
        <div class="sdk_conection">
            <div class="position-relative">
                <div class="px-1 d-flex align-items-center">
                    <NotificationsComponent/>
                </div>
            </div>
        </div>
        <div class="whcm_footer d-flex flex-row-reverse flex-md-row align-items-center justify-content-between">
            <div class="sdk_version px-2 px-lg-3 d-flex flex-sm-row flex-md-column">
                <p class="font-weight-bold m-0 mr-2 mr-md-0">
                    <ResourceViewer ResourceTag="Custom.Project.Copy" />
                </p>
                <p class="m-0">
                    <ResourceViewer ResourceTag="Custom.Project.Version" />
                </p>
            </div>
            <div class="sdk_logo pl-0 pl-md-5 pl-lg-4">
                <img class="whcm_logo_head d-none d-md-block" src="_content/Siesa.SDK.Frontend/assets/img/siesaLogo.png" alt="Logo siesa Enterprise 2.0">
                    <img class="whcm_logo_head d-block d-md-none" src="_content/Siesa.SDK.Frontend/assets/img/siesaLogo.png" alt="Logo siesa Enterprise 2.0">
            </div>
        </div>

    </div>
</header>

@code {

    private bool ConnectEnabled = false;

    private List<E00200_CompanyGroup> CompanyGroups { get; set; } = new List<E00200_CompanyGroup>();

    public E00200_CompanyGroup SelectedGroup { get; set; } = new E00200_CompanyGroup();

    private bool loading = false;
    
    private string LogoUrl { get; set; } = "";

    private SDKDbConnection _connection { get; set; } = new SDKDbConnection();

    private bool _showCompanyGroups { get; set; }

    private string NameTag { get; set; } = "";
    string RelatedBusiness { get; set; } = "BLSDKCompanyGroup";
    RelatedParams RelatedParams { get; set; } = new RelatedParams(){
        ExtraFields = new List<string>(){"Id","Name"}
    };



    protected override async Task OnInitializedAsync()
    {
        LogoUrl = AuthenticationService.GetConnectionLogo();
        var BL = BackendRouterService.GetSDKBusinessModel("BLSDKCompanyGroup",AuthenticationService);
        
        var DataCompanyGroup = await BL.GetData(null, null);
        
        CompanyGroups = DataCompanyGroup.Data.Select(x => JsonConvert.DeserializeObject<E00200_CompanyGroup>(x)).ToList();
        
        SelectedGroup = CompanyGroups.FirstOrDefault(x => x.Rowid == AuthenticationService.GetRowidCompanyGroup());
        if(SelectedGroup == null)
        {
            SelectedGroup = CompanyGroups.First();
            AuthenticationService.SetRowidCompanyGroup(SelectedGroup.Rowid);
        }
        await base.OnInitializedAsync(); 

        NameTag = GetCurrentCompanyGroupName();
        //companyGroups > 1
        if(CompanyGroups.Count > 1)
        {
            _showCompanyGroups = true;
        }
    }


    public async  Task SetCompanyGroup()
    {
        loading = true;
        await AuthenticationService.SetRowidCompanyGroup(SelectedGroup.Rowid);
        NavigationService.NavigateTo("/", forceLoad: true,replace: true);
        return;
    }
    private void ToogleConnect()
    {
        ConnectEnabled = !ConnectEnabled;
    }

    private string GetCurrentCompanyGroupName()
    {
        try
        {
            return SelectedGroup.Name;
        }
        catch (Exception)
        {
            return AuthenticationService.GetRowidCompanyGroup().ToString();
        }
    }

    private string GetCurrentConnectionName()
    {
        try
        {
            _connection = AuthenticationService.GetSelectedConnection();
            return _connection.Name;
        }
        catch (Exception)
        {
            return "No hay conexión";
        }
    }

    protected override string GetAutomationId()
    {
            if(string.IsNullOrEmpty(AutomationId))
            {
                    //string NameTag = GetCurrentCompanyGroupName();
                    if (!string.IsNullOrEmpty(NameTag))
                    {
                            AutomationId = NameTag;
                    }
            }
            return base.GetAutomationId();
    }
}