@implements IDisposable
@using Siesa.SDK.Entities
@using Siesa.SDK.Frontend.Services
@using Siesa.SDK.Shared.Services
@using System
@using Siesa.Global.Enums
@inject ILayoutService LayoutService
@inject NavigationManager NavigationManager
@inject MenuService MenuService
@inject IBackendRouterService BackendRouterService
@inject IAuthenticationService AuthenticationService
@inject UtilsManager UtilManager


<div class="col-12 area1 pb-3 px-0">

@if(breadcrumb != null && breadcrumb.Count > 0)
{
    <div class="dropdown position-absolute">
        <button class="btn btn-sm layout_btn_standar-sm" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" title="@TooltipRecentMenu"  @onclick="@RecentMenuClick">
            <i class="fa-solid fa-clock-rotate-left"></i>
        </button>
        <div class="dropdown-menu whcm_recent_box" aria-labelledby="dropdownMenuButton">
            <div class="pt-3 pl-3 pr-3 pb-0 text-center">
                <h6 class="font-weight-bold m-0 border-bottom pb-3">
                    <span>
                        <ResourceViewer ResourceTag="Custom.SDKBreadcrumb.ButtonRecents" RowidCulture=@AuthenticationService.GetRoiwdCulture()/>
                    </span>
                </h6>
            </div>
            <div class="whcm_recent_list">
                @foreach (var recentMenu in RecentRoutes)
                {
                    <a class="dropdown-item border-bottom py-3 px-0" href="@recentMenu.Value.Last().CurrentURL" @onclick:stopPropagation="true">
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="position-relative pr-3">
                                <div class="d-flex justify-content-center align-items-center whcm_dot font_color_primary">
                                    <i class="@recentMenu.Value.First().IconClass"></i>
                                </div>
                                <div class="d-flex justify-content-start align-items-end flex-wrap margenes_box pl-4 pt-1">
                                    @foreach (var menu in recentMenu.Value)
                                    {
                                        if(menu.Type == MenuType.Separator )
                                        {
                                            continue;
                                        }
                                        <div class="@((menu == recentMenu.Value.Last()) ? "rectangle_borders_active" : "rectangle_borders") d-flex align-items-center">
                                            @if((menu == recentMenu.Value.Last()) && (menu.Feature != null))
                                            {
                                                <p class="font_size_075 p-0 m-0"> <ResourceViewer RowidResource="@menu.Feature.RowidResource" /></p>
                                            }else
                                            {
                                                <p class="font_size_075 p-0 m-0"> <ResourceViewer RowidResource="@menu.RowidResource" /></p>
                                            }
                                        </div>
                                    }
                                </div>
                            </div>
                            <div class="pl-2 py-2 border-left">
                                <a href="@recentMenu.Value.Last().CurrentURL" target="_blank" @onclick:stopPropagation="true">
                                    <i class="fa-solid fa-arrow-up-right-from-square pointer"></i>
                                </a>
                            </div>
                        </div>
                    </a>
                }
            </div>
        </div>
    </div>
}
    <nav class="pl-4 ml-3" aria-label="breadcrumb">
        @if(breadcrumb != null && breadcrumb.Count > 0)
        {
            <ol class="breadcrumb p-0">
                @for(var i = 0; i < breadcrumb.Count; i++)
                {
                    <li class="breadcrumb-item @GetCssBreadCrumItem(i)">
                        @if(i == breadcrumb.Count - 1)
                        {
                            @if(string.IsNullOrEmpty(breadcrumb[i].CurrentText))
                            {
                                <span><ResourceViewer RowidResource="@(breadcrumb[i].RowidResource)" /></span>
                            }else{
                                <span>@(breadcrumb[i].CurrentText)</span>
                            }
                        }
                        else
                        {
                            @if(string.IsNullOrEmpty(breadcrumb[i].CurrentText))
                            {
                                <a href="@(breadcrumb[i].CurrentURL)"><ResourceViewer RowidResource="@(breadcrumb[i].RowidResource)" /></a>
                            }else{
                                <a href="@(breadcrumb[i].CurrentURL)">@(breadcrumb[i].CurrentText)</a>
                            }
                        }
                    </li>
                }
            </ol>
        }
    </nav>
    <nav class="pt-3 pt-sm-0" aria-label="breadcrumb">
        @if(LayoutService != null && LayoutService?.StyleName != null){
            <ol class="breadcrumb p-0">
                @if(LayoutService?.StyleName == "toolbar_edition")
                {
                    <li class="@("bullet-breadcrumb " + LayoutService?.StyleName)"></li>
                    <li class="estado">En edición</li>
                }else if(LayoutService?.StyleName == "toolbar_creation")
                {
                    <li class="@("bullet-breadcrumb " + LayoutService?.StyleName)"></li>
                    <li class="estado">En creación</li>
                }
            </ol>
        }
    </nav>
</div>



@code {

    private E00061_Menu _selectedMenu;
    private List<E00061_Menu> breadcrumb = new List<E00061_Menu>();
    
    private Dictionary<int, List<E00061_Menu>> RecentRoutes {get; set;} = new Dictionary<int, List<E00061_Menu>>();

    private string TooltipRecentMenu { get; set; } = "";
    

    protected override async Task OnInitializedAsync()
    {
        //RecentRoutes = await GetRecentMenus();

        LayoutService.PropertyChanged += LayoutService_PropertyChanged;
        NavigationManager.LocationChanged += OnLocationChanged;
        MenuService.MenuLoaded += OnMenuLoaded;
        //SetBreadCrum(NavigationManager.Uri);
        base.OnInitialized();

        TooltipRecentMenu = await UtilManager.GetResource("Custom.SDKBreadcrumb.ButtonRecents.Tooltip");
    }

    private void OnMenuLoaded(object sender, EventArgs e)
    {
        StateHasChanged();
    }

    private async Task RecentMenuClick()
    {
        RecentRoutes = await GetRecentMenus();
    }
    private async Task<Dictionary<int, List<E00061_Menu>>> GetRecentMenus()
    {
        var _recentRoutes  = new Dictionary<int, List<E00061_Menu>>();
        try
        {
            var BLRecentMenu = BackendRouterService.GetSDKBusinessModel("BLRecentMenu", AuthenticationService);
            if(BLRecentMenu != null)
            {
                var result = await BLRecentMenu.Call("GetRecentMenus");

                if(result.Success)
                {
                var RecentMenus = result.Data;
                    
                    foreach (var Recent in RecentMenus)
                    {
                        List<E00061_Menu> auxRecentMenu = new List<E00061_Menu>();
                        auxRecentMenu.Add(Recent.Menu);
                        OrderRecentMenu(ref auxRecentMenu);

                        if(auxRecentMenu.Any())
                        {
                            var Rowid = auxRecentMenu.Last().Rowid;

                            if(!(_recentRoutes.ContainsKey(Rowid)))
                            {
                                _recentRoutes.Add(Rowid, auxRecentMenu);
                            }
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

        return _recentRoutes;
    }

    private void OrderRecentMenu(ref List<E00061_Menu> FinalList, E00061_Menu Actualmenu = null){
        
                if(Actualmenu != null){
                    if (Actualmenu.MenuParent != null)
                    {
                        var Parent = Actualmenu.MenuParent;
                        FinalList.Add(Parent);
                        OrderRecentMenu(ref FinalList, Parent);
                    }else
                    {
                        if(!(FinalList.Contains(Actualmenu)))
                        {
                            FinalList.Add(Actualmenu);
                        }
                        FinalList.Reverse();  
                    }
                }else
                {
                    var FisrtMenu = FinalList.First();
                    OrderRecentMenu(ref FinalList, FisrtMenu);
                }
    }

    private string GetCssBreadCrumItem(int i)
    {
        if(i == breadcrumb.Count - 1)
        {
            return "active";
        }
        return "";
    }

    private void LayoutService_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(ILayoutService.StyleName))
        {
            StateHasChanged();
        }
    }

    private void SetBreadCrum(string currentUrl)
    {
        //remove the base url from the current url
        currentUrl = currentUrl.Substring(currentUrl.IndexOf("/", currentUrl.IndexOf("//") + 2));
        var result = new List<E00061_Menu>();
        SearchMenuItem(currentUrl, MenuService.Menus, ref result);

        //get the result most close to the current url
        var _newSelectedMenu = result.OrderByDescending(x => x.CurrentURL.Length).FirstOrDefault();
        if (_newSelectedMenu != null && _newSelectedMenu != _selectedMenu)
        {
            _selectedMenu = _newSelectedMenu;
            if(_selectedMenu.Type != MenuType.Submenu && _selectedMenu.Type != MenuType.Separator)
            {
                try
                {
                    var BLRecentMenu = BackendRouterService.GetSDKBusinessModel("BLRecentMenu", AuthenticationService);
                    _ = BLRecentMenu.Call("AddRecentMenu",currentUrl,_selectedMenu.Rowid);
                }catch(Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
            }
            breadcrumb.Clear();
            breadcrumb.Add(_selectedMenu);
            var _parent = _selectedMenu.MenuParent;
            while (_parent != null)
            {
                breadcrumb.Add(_parent);
                _parent = _parent.MenuParent;
            }
            breadcrumb.Reverse();
        }else{
            if(_newSelectedMenu == null)
            {
                breadcrumb.Clear();
            }
        }
        StateHasChanged();
    }

    private void OnLocationChanged(object sender, LocationChangedEventArgs e)
    {

        string url = e.Location;

        Uri uri = new Uri(url);

        string path = uri.AbsolutePath;

        if (string.IsNullOrEmpty(e.Location) || path == "/" || string.IsNullOrEmpty(path) )
        {
            breadcrumb.Clear();
            _selectedMenu = null;
            StateHasChanged();
        }else
        {
            SetBreadCrum(e.Location);   
        }

    }

    private void SearchMenuItem(string currentUrl, ICollection<E00061_Menu> menus, ref List<E00061_Menu> result, E00061_Menu parent = null)
    {
        string blName = currentUrl.Substring(0, currentUrl.IndexOf("/", 1) + 1);
        foreach (var menu in menus.Where(x => x.Type != MenuType.Separator))
        {
            if(menu.ResourceTag == "SDKDev-DevMenu")
            {
                continue;
            }
            if(menu.MenuParent == null && parent != null)
            {
                menu.MenuParent = parent;
            }

            if (menu.CurrentURL == currentUrl  || menu.CurrentURL == blName)
            {
                result.Add(menu);
            }
            if (menu.SubMenus != null && menu.SubMenus.Count > 0)
            {
                SearchMenuItem(currentUrl, menu.SubMenus, ref result, menu);
            }
        }
    }

    public void Dispose()
    {
        if (LayoutService != null)
        {
            LayoutService.PropertyChanged -= LayoutService_PropertyChanged;
        }

        if (NavigationManager != null)
        {
            NavigationManager.LocationChanged -= OnLocationChanged;
        }

        if (MenuService != null)
        {
            MenuService.MenuLoaded -= OnMenuLoaded;
        }
    }

    protected override void OnParametersSet()
    {
        //Console.WriteLine("OnParameterSet");
        SetBreadCrum(NavigationManager.Uri);
        base.OnParametersSet();
    }

}