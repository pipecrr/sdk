@using Siesa.SDK.Shared.Services
@using Siesa.SDK.Frontend.Components.Visualization
@using Siesa.SDK.Frontend.Components.Layout
@using Siesa.SDK.Entities
@using Siesa.Global.Enums
@inject IAuthenticationService AuthenticationService
@inject IBackendRouterService BackendRouterService
@inject SDKNotificationService SDKNotificationService
@inject IFeaturePermissionService FeaturePermissionService

<div class="@CssClassRelationship col-12 p-0">

    <button class="whcm_data_related_btn" @onclick="() => _isOpen = !_isOpen ">
        <p>
            <ResourceViewer ResourceTag="Custom.SDK.RelationshipPanel" RowidCulture=@AuthenticationService.GetRoiwdCulture() />
            <SDKIcon Name="fa-folder-tree"/>
        </p>
    </button>
    <div class="whcm_data_related_content p-3">
        <div class="border-bottom pb-3 pt-1 text-center">
            <h6><span><ResourceViewer ResourceTag="Custom.SDK.DataRelationship" RowidCulture=@AuthenticationService.GetRoiwdCulture() /></span></h6>
            <p class="m-0 font_size_087 text-left">
                <ResourceViewer ResourceTag="Custom.SDK.RelationshipInformation" RowidCulture=@AuthenticationService.GetRoiwdCulture() />
            </p>
        </div>
        <div class="whcm_row panel_box_data">
            <div class="col-12">
                @if (_containAttachments && _accessAttachment)
                {
                    <button class="nav_btn_standar index_btn_related my-1" @onclick="async ()=>await OpenModal(RelationshipAttatchment)" >
                        <div class="nav_btn_standar_text">
                            <ResourceViewer ResourceTag="@RelationshipAttatchment.ResourceTag" RowidCulture=@AuthenticationService.GetRoiwdCulture() />
                        </div>
                    </button> 
                }
                @foreach (var Relationship in Relationships)
                {    
                    <button class="nav_btn_standar index_btn_related my-1" @onclick="async ()=>await OpenModal(Relationship)" >
                        <div class="nav_btn_standar_text">
                            <ResourceViewer ResourceTag="@Relationship.ResourceTag" RowidCulture=@AuthenticationService.GetRoiwdCulture() />
                        </div>
                    </button>
                }
            </div>
        </div>
    </div>
        @if (_openModal)
        {
            <div class="col-12 whcm_data_open_box p-3">
                <div class="d-flex justify-content-between align-items-center border-bottom pb-1">
                    <h6 class="mb-0">
                        <ResourceViewer ResourceTag="@SelectedRelationship.ResourceTag" RowidCulture=@AuthenticationService.GetRoiwdCulture() />
                    </h6>
                    <div class="d-flex">
                        <button class="btn btn-sm layout_btn_standar-sm ml-1" @onclick="() => _openModal = !_openModal">
                            <SDKIcon Name="fa-chevron-right"/>
                        </button>
                        <button class="btn btn-sm layout_btn_standar-sm ml-1" @onclick="() => CloseRelationshipPanel()">
                            <SDKIcon Name="fa-xmark"/>
                        </button>
                    </div>
                </div>
                <div class="col-12 p-0 pt-3">               
                    <InlineCrud
                    BLNameParentAttatchment="@BLNameParentAttatchment"
                    BusinessName="@SelectedRelationship.RelatedBusiness"
                    Filter="@filter"
                    DefaultFieldsCreate="@DefaultFieldsCreate" AllowCreate="@AllowCreate" AllowEdit="@AllowEdit" AllowDelete="@AllowDelete"
                    AllowDetail="@AllowDetail" Width="@GetWidth()"
                    Height="@GetHeight()"
                    />
                </div>
            </div>  
        }
    <div class="whcm_data_related_back"></div>
</div>
		

@code
{
    [Parameter] public List<Relationship> Relationships { get; set; }
    [Parameter] public string BLNameParentAttatchment { get; set; }
    [Parameter] public dynamic Parent { get; set; }
    [Parameter] public bool AllowCreate { get; set; } = true;
    [Parameter] public bool AllowEdit { get; set; } = true;
    [Parameter] public bool AllowDelete { get; set; } = true;
    [Parameter] public bool AllowDetail { get; set; } = true;
    [Parameter] public Action<string> OnClickEdit { get; set; } = null;
    [Parameter] public Action<string> OnClickDetail { get; set; } = null;
    [Parameter] public Action<string,string> OnClickDelete { get; set; } = null;
    [Parameter] public Action OnClickNew { get; set; } = null;
    [Parameter] public bool ContainAttachments { get; set; } = false;

    [Parameter] public string Width { get; set; }
    [Parameter] public string Height { get; set; }

    [Parameter] public dynamic BusinessObj { get; set; }
    [Parameter] public string BusinessName { get; set; }

    [Parameter] public bool isCreateView { get; set; } = false;
    private Relationship SelectedRelationship { get; set; }
    private Relationship RelationshipAttatchment { get; set; }
    public dynamic ParentAttachment { get; set; }
    int? count = null;
    bool isOpen = false;
    string filter = "";
    Guid listview_key = Guid.NewGuid();

    private Dictionary<string, object> DefaultFieldsCreate { get; set; }

    private bool _isOpen = false;

    private bool _containAttachments = false;

    private bool _openModal  = false;

    private dynamic _parent;

    private bool _accessAttachment;

    private string CssClassRelationship { 
        get 
        {
            if (_openModal)
            {
                return "whcm_data_related_box_crud";
            }
            if (_isOpen)
            {
                return "whcm_data_related_box";
            }
            else
            {
                return "whcm_data_related_box_hide"; 
            }
        }
    }
/*
var rowidAttachment = Parent.RowidAttachment;
            ParentAttachment = new E00270_Attachment();

            ParentAttachment.Rowid = rowidAttachment;

RelationshipAttatchment = new Relationship(){
            Name  = "BLAttachmentDetail",
            Type = RelationshipType.OneToMany,
            RelatedBusiness = "BLAttachmentDetail",
            RelatedField = "BaseObj.Attachment",
            ResourceTag = "BLAttachmentDetail.Plural"
            };
*/

    private async Task CheckPermissions()
    {
        if (FeaturePermissionService != null && !string.IsNullOrEmpty(BusinessName))
        {
            try
            {
                _accessAttachment = await FeaturePermissionService.CheckUserActionPermission(BusinessName, enumSDKActions.AccessAttachment, AuthenticationService);
            }
            catch (System.Exception)
            {
            }
        }
    }
    private async Task OpenModal(Relationship relationship)
    {
        if(Parent.Rowid == 0 && isCreateView)
        {
           _ = SDKNotificationService.ShowError("Custom.RelationshipContainer.Error",new object[] {$"{BusinessObj.BusinessName}.Singular"} , culture: AuthenticationService.GetRoiwdCulture());
           _isOpen = false;
            return;
        }
        SelectedRelationship = relationship;

        _parent = Parent;
        
        if (SelectedRelationship.Name.Equals("BLAttachmentDetail"))
        {    
            var rowidAttachment = _parent.RowidAttachment;
            
            if(rowidAttachment == null && _parent?.Rowid != 0 ){
            try{
                var BLAttachment = BackendRouterService.GetSDKBusinessModel("BLAttachment", AuthenticationService);
                var responseAtt = await BLAttachment.Call("SaveAttachment");
                if(responseAtt.Success){
                    rowidAttachment = Convert.ToInt32(responseAtt.Data);
                    _parent.RowidAttachment = rowidAttachment;
                    BusinessObj.Backend.Call("SaveAttachmentEntity",_parent);

                    ParentAttachment.Rowid = rowidAttachment;

                }else{
                    throw new Exception("No se pudo crear el registro de attachment");
                }
            }catch(Exception ex){
                throw new Exception(ex.Message);
            }
            }

            if(ParentAttachment.Rowid == 0 && _parent?.RowidAttachment != null)
            {
                ParentAttachment = new E00270_Attachment();
                ParentAttachment.Rowid = _parent.RowidAttachment;
            }

            _parent = ParentAttachment;
        }
        
        _openModal = true;
        await OnInit();
        StateHasChanged();
    }


    public void CloseRelationshipPanel()
    {
        _isOpen = false;
        _openModal = false;
        _parent = null;
        StateHasChanged();
    }

    private string GetWidth()
    {
        if(!string.IsNullOrEmpty(Width))
        {
            return Width;
        }

        if(SelectedRelationship != null && !string.IsNullOrEmpty(SelectedRelationship.Width))
        {
            return SelectedRelationship.Width;
        }
        return null;
    }

    private string GetHeight()
    {
        if (!string.IsNullOrEmpty(Height))
        {
            return Height;
        }

        if (SelectedRelationship != null && !string.IsNullOrEmpty(SelectedRelationship.Height))
        {
            return SelectedRelationship.Height;
        }
        return null;
    }

    private async Task OnInit()
    {
         //_parent = Parent; 
        if (SelectedRelationship?.RelatedField != null)
        {
            CalculateFilter();
            DefaultFieldsCreate = new Dictionary<string, object>();
            DefaultFieldsCreate.Add(SelectedRelationship.RelatedField, _parent);
        }
    }
    public void Toggle()
    {
        isOpen = !isOpen;
    }

    private void CalculateFilter()
    {
        var field = SelectedRelationship.RelatedField;
        var parent_rowid = 0;
        if(_parent != null)
        {
            parent_rowid = _parent.Rowid;
        }
        //remove "BaseObj" from the field name if it exists
        if (field.StartsWith("BaseObj."))
        {
            field = field.Substring(8);
        }
        if(SelectedRelationship.Type == RelationshipType.ManyToMany)
        {
            var filter_parts = field.Split('.');
            filter = $"({filter_parts[0]} != NULL && {filter_parts[0]}.Any({filter_parts[1]}.Rowid == {parent_rowid}))";
        }
        else
        {
            filter = $"({field}.Rowid == {parent_rowid})";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (ContainAttachments)
        {

            ParentAttachment = new E00270_Attachment();

            RelationshipAttatchment = new Relationship(){
            Name  = "BLAttachmentDetail",
            Type = RelationshipType.OneToMany,
            RelatedBusiness = "BLAttachmentDetail",
            RelatedField = "BaseObj.Attachment",
            ResourceTag = "BLAttachmentDetail.Plural"
            };

            _containAttachments = true;
        }

        await CheckPermissions();

        base.OnInitialized();
        SetParameters();
        //OnInit();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        SetParameters();
        OnInit();
        listview_key = Guid.NewGuid();
        StateHasChanged();     
    } 

    protected virtual void SetParameters()
    {
        var new_params = new Dictionary<string, object>();
            if (OnClickEdit != null)
            {
                new_params.Add("OnClickEdit", OnClickEdit);
            }
            if (OnClickDetail != null)
            {
                new_params.Add("OnClickDetail", OnClickDetail);
            }
            if (OnClickDelete != null)
            {
                new_params.Add("OnClickDelete", OnClickDelete);
            }
            if (OnClickNew != null)
            {
                new_params.Add("OnClickNew", OnClickNew);
            }
    }

}