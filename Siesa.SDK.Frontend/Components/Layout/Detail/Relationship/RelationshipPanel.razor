@using Siesa.SDK.Shared.Services
@inject DialogService DialogService
@inject IAuthenticationService AuthenticationService

@if(ShowHeader){
    <div class="relationship-panel">
        <div class="relationship-panel-header">
            <span class="relationship-panel-header-title"  @onclick="Toggle"><ResourceViewer ResourceTag=@Relationship.ResourceTag /></span>
            
            <span class="relationship-panel-header-close">
                @if(isOpen){
                    <span class="oi oi-chevron-bottom"  @onclick="Toggle"></span>
                }else{
                    <span class="oi oi-chevron-right"  @onclick="Toggle"></span>
                }
            </span>
            @* <span class="relationship-panel-header-count">@count</span> *@
        </div>
        @if(isOpen){
            <div class="relationship-panel-body">
                <InlineCrud
                    BusinessName="@Relationship.RelatedBusiness"
                    Filter="@filter"
                    DefaultFieldsCreate="@DefaultFieldsCreate"
                />
            </div>
        }
    </div>
} else {
    <InlineCrud
        BusinessName="@Relationship.RelatedBusiness"
        Filter="@filter"
        DefaultFieldsCreate="@DefaultFieldsCreate"
        />
}


@code {
    [Parameter] public Relationship Relationship { get; set; }
    [Parameter] public dynamic Parent { get; set; }

    //TODO: Parametrizar Allow y Actions en los inlineCrud
    [Parameter] public bool ShowHeader { get; set; } = true;
    int? count = null;
    bool isOpen = false;
    string filter = "";
    Guid listview_key = Guid.NewGuid();

    private Dictionary<string, object> DefaultFieldsCreate { get; set; }

    private void OnInit()
    {
        CalculateFilter();
        DefaultFieldsCreate = new Dictionary<string, object>();
        DefaultFieldsCreate.Add(Relationship.RelatedField, Parent);
    }
    public void Toggle()
    {
        isOpen = !isOpen;
    }

    private void CalculateFilter()
    {
        var field = Relationship.RelatedField;
        var parent_rowid = 0;
        if(Parent != null)
        {
            parent_rowid = Parent.Rowid;
        }
        //remove "BaseObj" from the field name if it exists
        if (field.StartsWith("BaseObj."))
        {
            field = field.Substring(8);
        }
        if(Relationship.Type == RelationshipType.ManyToMany)
        {
            var filter_parts = field.Split('.');
            filter = $"({filter_parts[0]} != NULL && {filter_parts[0]}.Any({filter_parts[1]}.Rowid == {parent_rowid}))";
        }
        else
        {
            filter = $"({field}.Rowid == {parent_rowid})";
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        OnInit();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        OnInit();
        listview_key = Guid.NewGuid();
        StateHasChanged();     
    } 


}