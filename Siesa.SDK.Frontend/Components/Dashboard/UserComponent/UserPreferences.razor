@using Siesa.SDK.Frontend.Components.Layout
@using Siesa.SDK.Frontend.Components.FormManager.Views
@using Siesa.SDK.Shared.Services
@using Siesa.SDK.Frontend.Components.FormManager
@using Siesa.SDK.Shared.Utilities
@using Microsoft.Extensions.DependencyInjection
@using Siesa.SDK.Shared.DTOS
@using Siesa.SDK.Frontend.Components.FormManager.ViewModels
@using Siesa.Global.Enums
@using Siesa.SDK.Frontend.Components.Fields
@using Siesa.SDK.Frontend.Components.Visualization
@using System.IO
@using Microsoft.AspNetCore.Http
@using Siesa.SDK.Frontend.Components.FormManager.Model


@inject IServiceProvider ServiceProvider
@inject IAuthenticationService AuthenticationService
@inject IBackendRouterService BackendRouterService
@inject SDKDialogService DialogService
@inject IJSRuntime jsRuntime
@inject UtilsManager UtilManager
@inject NavigationService NavigationService

@if (ErrorList.Count > 0)
{
    <ErrorsWindow GeneralErrors="@ErrorList" />
}



<div class="row">
    <div
        class="container-foto-perfil d-flex align-items-center justify-content-center col-12 col-sm-12 col-md-4 col-lg-3">

        <div class="whcm_user_photo_box">
            <SDKInputFile IsMultiple="false" FilterType="image/*" SaveBytes="true"
                RowidAttachmentDetail="@_rowidAttachmentDetail" BusinessName="BLUser" OnInputFile="@OnInputFile"
                @ref="@_refinputFile" />
            <div class="whcm_user_photo">
                <img src="@ProfileImageData" alt="imagen perfil" style="max-width: 100%;">
            </div>
            <SDKButton CssClass="whcm_upload_photo btn btn-primary btn_primary_def_1 btn-sm"
                Click="@(async () => PickComponent())" AutomationId="UploadUserPhoto" ResourceTag="@UploadUserPhoto">
                <SDKIcon Name="fa-camera"></SDKIcon>
            </SDKButton>
        </div>
    </div>

    <div class="col-12 col-sm-12 col-md-8 col-lg-9 mt-3">
        <div class="sdk_card d-flex flex-row">
            <div class="sdk_button_box_2 p-1">

                @if (_IsEdit)
                {
                    <SDKButton CssClass="btn btn-sm layout_btn_negative-sm mb-1" 
                        AutomationId="Confirm" Click="@(()=> ChangeViewType())" ResourceTag="@Confirm">
                        <SDKIcon Name="fa-circle-check" />
                    </SDKButton>

                    <SDKButton CssClass="btn btn-sm layout_btn_negative-sm mb-1" 
                        AutomationId="Cancel" Click="@(()=> ChangeViewType())" ResourceTag="@Cancel" >
                        <SDKIcon Name="fa-ban" />
                    </SDKButton>
                }
                else
                {
                    <SDKButton CssClass="btn btn-sm layout_btn_negative-sm mb-1" 
                        AutomationId="EditUser" Click="@(()=> ChangeViewType())" ResourceTag="@EditUser">
                        <SDKIcon Name="fa-pen" />
                    </SDKButton>
                }

            </div>
            <div class="col pt-2">
                <div class="row">
                    <h6 class="col-12 font-weight-bold">
                        <ResourceViewer ResourceTag="Custom.SDK.UserPreference.UserData" />
                    </h6>
                    <FreeForm Viewdef="user_preferences" BusinessName="BLUser" BusinessObj="@BLUser"
                        ViewContext="@DynamicViewType"  SetTopBar="false"/>
                </div>
            </div>
        </div>
    </div>
</div>
<hr>

<div class="row">
    <div class="col-12 col-sm-12 mb-sm-3  col-md-12 col-lg-4 mb-lg-0 custom-border custom-border-2">
        <h6 class="col-12 font-weight-bold font_color_primary p-0 form-group">
            <ResourceViewer ResourceTag="Custom.SDK.UserPreference.Themes" />
        </h6>

        <div class="col px-0 mb-3">
            <label class="col-12 font-weight-bold p-0">
                <ResourceViewer ResourceTag="Custom.SDK.UserPreference.MainThemes" />
            </label>

            <div id="carouselExampleControls" class="carousel slide" data-interval="false">
                <div class="carousel-inner">
                    <div class="carousel-item active">
                        <div class="row px-4" alt="First slide">
                            @if (ThemeColor != null)
                            {
                                @foreach (var theme in ThemeColor)
                                {
                                    <div class="col-4 ">
                                        <div @onclick="()=> OnChangeSelectedTheme(theme.Key)" class="sdk-cursor-pointer ">
                                            <div class="sdk_card p-2 mb-2">
                                                <div class="d-flex justify-content-between">
                                                    <div class="col-12 pl-0 pr-0">
                                                        <div
                                                            style="background-color:@theme.Value; border-radius: 4px; height: 20px;">
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="d-flex align-items-center">

                                                <input class="mr-2" type="radio" name="ThemeColor" value="@theme.Key" data-automation-id="Input_ThemeColor_@theme.Key"
                                                checked="@ValidCheckedThemeColor(theme.Key)">

                                                <ResourceViewer ResourceTag=@theme.Key />
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>

                <a class="carousel-control-prev" href="#carouselExampleControls" role="butto"
                    style="opacity: 1;width: auto;" data-slide="prev">
                    <span class="carousel-control-prev-icon" aria-hidden="true">
                        <SDKIcon Name="fa-chevron-left" Style="color:#1079FD" />
                    </span>
                </a>
                <a class="carousel-control-next" href="#carouselExampleControls" role="button"
                    style="opacity: 1;width: auto;" data-slide="next">
                    <span class="carousel-control-next-icon" aria-hidden="true">
                        <SDKIcon Name="fa-chevron-right" Style="color:#1079FD;" />
                    </span>
                </a>
            </div>
        </div>

        <div class="col px-0 mb-3">
            <label class="col-12 font-weight-bold p-0">
                <ResourceViewer ResourceTag="Custom.SDK.UserPreference.ComplementaryColor" />
            </label>

            <div class="row">
                @if (ComplementaryColors != null)
                {
                    @foreach (var item in ComplementaryColors)
                    {
                        <div class="col-4 ">
                            <div class="sdk_card p-2 mb-2">
                                <div class="d-flex justify-content-between">

                                    <div class="col-6 pl-0 pr-1">
                                        <div style="background-color:@item.PrimaryColor; border-radius: 4px; height: 20px;">
                                        </div>
                                    </div>

                                    <div class="col-6 pr-0 pl-1">
                                        <div style="background-color:@item.SecundaryColor; border-radius: 4px; height: 20px;">
                                        </div>
                                    </div>

                                </div>

                            </div>

                            <div class="d-flex align-items-center">
                                <input class="mr-2" type="radio" name="ComplementaryColors" value="@item.ColorName"
                                    @onchange="OnChangeSelectedColorsComplementary"
                                    checked="@ValidCheckedComplementaryColor(item.ColorName)"
                                    disabled="@ValidDisabledComplementaryColor(item.ColorName)" data-automation-id="Input_ComplementaryColors_@item.ColorName">
                                <label class="mb-0" style="font-size: 14px;">@item.ColorName</label>
                            </div>

                        </div>
                    }
                }
            </div>
        </div>

        <div class="alert alert-info d-flex align-items-center font_size_087" role="alert">
            <SDKIcon Name="fa-circle-info mr-2" />
            <ResourceViewer ResourceTag="Custom.SDK.UserPreference.Notifi" />
        </div>
    </div>


    <div class="col-12 col-sm-12 mb-sm-3  col-md-12 col-lg-4 mb-lg-0 custom-border custom-border-2">

        <h6 class="col-12 font-weight-bold font_color_primary p-0 form-group">
            <ResourceViewer ResourceTag="Custom.SDK.UserPreference.IconStyle" />
        </h6>
        <div class="row">
            <div class="col-12 col-sm-12">
                <div class="row">
                    @if (IconsStyles != null)
                    {
                        @foreach (var icon in IconsStyles)
                        {
                            <div class="col-4 mb-3" @onclick="()=>OnChangeSelectedIcon(icon)">
                                <div class="sdk_card d-flex justify-content-center rounded p-4 mb-2">
                                    <i class="@GetStyleIcon(icon) fa-user fa-2x" style="color:#1079FD;"></i>
                                </div>
                                
                                <div class="d-flex align-items-center">
                                    <input class="mr-2" type="radio" name="IconsStyles" value="@icon"
                                        checked="@ValidCheckedStyleIcon(icon)" data-automation-id="Input_IconsStyles_@GetLabelIcon(icon)">
                                    <label class="mb-0" style="font-size: 14px;">
                                        @GetLabelIcon(icon)
                                    </label>
                                </div>
                            </div>
                        }
                    }
                </div>

            </div>

        </div>
    </div>

    <div class="col-12 col-sm-12 col-md-12 col-lg-4">

        <h6 class="col-12 font-weight-bold font_color_primary p-0 form-group">
            <ResourceViewer ResourceTag="Custom.SDK.UserPreference.ToolBar" />
        </h6>

        <div class="row">

            <div class="col-12 mb-3">
                <div class="d-flex justify-content-center py-4 px-5 mb-2 sdk_card">
                    <div class="col-12 col-md-10 col-lg-12 d-flex d-row justify-content-around">
                        <i class="@GetStyleIcon(_selectedIconStyle) fa-circle-plus fa-lg" style="color:#1079FD;"></i>
                        <i class="@GetStyleIcon(_selectedIconStyle) fa-pen fa-lg" style="color:#1079FD;"></i>
                        <i class="@GetStyleIcon(_selectedIconStyle) fa-trash-can fa-lg" style="color:#1079FD;"></i>
                        <i class="@GetStyleIcon(_selectedIconStyle) fa-list fa-lg" style="color:#1079FD;"></i>
                        <i class="@GetStyleIcon(_selectedIconStyle) fa-magnifying-glass fa-lg"
                            style="color:#1079FD;"></i>
                    </div>

                </div>

                <div class="d-flex align-items-center">
                    <input class="mr-2" type="radio" id="TopbarStyle" value="@_OneColor"
                        @onchange="e =>OnChangeSelectedTopbarStyle(_OneColor)" checked="@CheckedTopbarStyle(_OneColor)" data-automation-id="Input_OneColor_">
                    <ResourceViewer ResourceTag="Custom.SDK.UserPreference.OneColor" />
                </div>
            </div>

            <div class="col-12 ">
                <div class="d-flex justify-content-center py-4 px-5 mb-2 sdk_card">
                    <div class="col-12 col-md-10 col-lg-12 d-flex d-row justify-content-around">
                        <i class="@GetStyleIcon(_selectedIconStyle) fa-circle-plus fa-lg" style="color:#FA8651;"></i>
                        <i class="@GetStyleIcon(_selectedIconStyle) fa-pen fa-lg" style="color:#FAC153;"></i>
                        <i class="@GetStyleIcon(_selectedIconStyle) fa-trash-can fa-lg" style="color:#F9777F;"></i>
                        <i class="@GetStyleIcon(_selectedIconStyle) fa-list fa-lg" style="color:#C0AAEF;"></i>
                        <i class="@GetStyleIcon(_selectedIconStyle) fa-magnifying-glass fa-lg"
                            style="color:#2BC8C9;"></i>
                    </div>

                </div>

                <div class="d-flex align-items-center">
                    <input class="mr-2" type="radio" id="TopbarStyle" value="@_MultiColor"
                        @onchange="e =>OnChangeSelectedTopbarStyle(_MultiColor)" disabled data-automation-id="Input_MultiColor_">
                    <ResourceViewer ResourceTag="Custom.SDK.UserPreference.MultiColor" />
                </div>
            </div>

        </div>
    </div>
</div>



<div class="row modal-footer pb-0">
    <SDKButton CssClass="btn btn-primary btn_secondary_def_1 btn-sm px-3" Click="@(async () => await InitView())" AutomationId="DiscardChanges">
        <ResourceViewer ResourceTag="Custom.SDK.UserPreference.DiscardChanges" />
    </SDKButton>


    <SDKButton CssClass="btn btn-primary btn_secondary_cancel btn-sm px-3" Click="@(()=> DialogService.Close(false))" AutomationId="Out">
        <ResourceViewer ResourceTag="Custom.SDK.UserPreference.Out" />
    </SDKButton>

    <SDKButton CssClass="btn btn-primary btn_primary_def_1 btn-sm px-3" Click="@(async () => await SaveUserPreferences())" AutomationId="Save">
        <ResourceViewer ResourceTag="Action.Save" />
    </SDKButton>


</div>

@code
{
    [CascadingParameter]
    public MainLayout MainLayout { get; set; }
    private SDKInputFile? _refinputFile;
    private int _rowidAttachmentDetail { get; set; }
    private IJSObjectReference _jsModule;
    private string ProfileImageData { get; set; }
    private bool HasFile { get; set; } = false;
    private List<string> ErrorList { get; set; } = new List<string>();
    private bool _IsEdit = false;
    public DynamicViewType DynamicViewType { get; set; } = DynamicViewType.Detail;
    public dynamic BLUser { get; set; }

    public Dictionary<string, string> ThemeColor { get; set; } //Temporal

    public List<enumThemeIconStyle> IconsStyles { get; set; } //Temporal
    public List<ComplementaryColor> ComplementaryColors { get; set; } //Temporal

    private enumThemeIconStyle _selectedIconStyle { get; set; }

    private string _selectedColorComplementary { get; set; }

    private string _selectedThemeStyle { get; set; }

    private UserPreferencesDTO _userPreferences { get; set; } = new UserPreferencesDTO();

    private enumThemeTopbarStyle _selectedTopbarStyle { get; set; }

    private enumThemeTopbarStyle _OneColor { get; set; } = enumThemeTopbarStyle.OneColor;

    private enumThemeTopbarStyle _MultiColor { get; set; } = enumThemeTopbarStyle.MultiColor;


    private string TitlePreferences { get; set; }
    private string EditUser { get; set; }
    private string Cancel { get; set; }
    private string Confirm { get; set; }
    private string UploadUserPhoto { get; set; }

    private void ChangeViewType()
    {
        _IsEdit = !_IsEdit;

        if (_IsEdit)
        {
            DynamicViewType = DynamicViewType.Edit;
        }
        else
        {
            DynamicViewType = DynamicViewType.Detail;
        }

        StateHasChanged();
    }

    private void CancelEdit()
    {
        _IsEdit = false;
        DynamicViewType = DynamicViewType.Detail;
        StateHasChanged();
    }

    private async Task InitView()
    {
        var blType = Utilities.SearchType("Siesa.MasterBackend.Business.BLUser");

        BLUser = ActivatorUtilities.CreateInstance(ServiceProvider, blType);

        await BLUser.InitializeBusiness(AuthenticationService.User.Rowid);

        BLUser.BaseObj.Password = null;

        BLUser.BusinessName = "BLUser";

        ProfileImageData = AuthenticationService.GetUserPhoto();

        _selectedThemeStyle = BLUser.BaseObj.Theme;
        if(string.IsNullOrEmpty(_selectedThemeStyle))
        {
            _selectedThemeStyle = "Custom.SDK.Theme.Blue";
        }
        _selectedIconStyle = BLUser.BaseObj.ThemeIconStyle;
        _selectedColorComplementary = BLUser.BaseObj.ThemeSecondaryColor;
        _selectedTopbarStyle = BLUser.BaseObj.ThemeTopbarStyle;
        _rowidAttachmentDetail = BLUser.BaseObj.RowidAttachmentUserProfilePicture ?? 0;
        //TODO: _userPreferences

        ThemeColor = new Dictionary<string, string>()
        {
            { "Custom.SDK.Theme.Blue", "#1079FD" },
            { "Custom.SDK.Theme.Dark", "#042339" },
            { "Custom.SDK.Theme.Orange", "#FF8E2C"},
            { "Custom.SDK.Theme.Green", "#00AE3C" },
            { "Custom.SDK.Theme.Terracotta", "#C45824" },
            { "Custom.SDK.Theme.Ruby", "#9B111E" },
            { "Custom.SDK.Theme.Violet", "#7244b8" }
        };

        IconsStyles = new List<enumThemeIconStyle>()
        {
            { enumThemeIconStyle.Solid },
            { enumThemeIconStyle.Regular },
            { enumThemeIconStyle.Light },
            { enumThemeIconStyle.Duotone },
            { enumThemeIconStyle.Thin }
        };

        ComplementaryColors = new List<ComplementaryColor>()
        {
            new ComplementaryColor() { ColorName = "Tono1", PrimaryColor = "#1079FD", SecundaryColor="#661079FD" },
            new ComplementaryColor() { ColorName = "Tono2", PrimaryColor = "#9B111E", SecundaryColor="#669B111E" }
        };

        StateHasChanged();
    }



    protected override async Task OnInitializedAsync()
    {
        await InitView();

        await base.OnInitializedAsync();

        TitlePreferences = await UtilManager.GetResource("Custom.SDK.UserPreference");

        EditUser = await UtilManager.GetResource("Custom.SDK.UserPreference.EditUser");
        Cancel = await UtilManager.GetResource("Action.Cancel");
        Confirm = await UtilManager.GetResource("Action.Confirm");
        UploadUserPhoto = await UtilManager.GetResource("Custom.SDK.UserPreference.UploadUserPhoto");
    }

    private async Task SaveUserPreferences()
    {
        ErrorList.Clear();
        BLUser.BaseObj.Theme = _selectedThemeStyle;
        BLUser.BaseObj.ThemeIconStyle = _selectedIconStyle;
        BLUser.BaseObj.ThemeSecondaryColor = _selectedColorComplementary;
        BLUser.BaseObj.ThemeTopbarStyle = _selectedTopbarStyle;

        if (HasFile)
        {
            try
            {
                await _refinputFile.SDKUploadFile();
                BLUser.BaseObj.RowidAttachmentUserProfilePicture = _refinputFile.RowidAttachmentDetail;
            }
            catch (Exception ex)
            {
                ErrorList.Add(ex.Message);
                StateHasChanged();
                return;
            }
        }

        var BL = BackendRouterService.GetSDKBusinessModel("BLUser", AuthenticationService);

        var result = await BL.Call("SaveUserPreferences", BLUser.BaseObj);

        if (result.Success)
        {
            Console.WriteLine("Success Save Changes");
            await AuthenticationService.SetUserPhoto(ProfileImageData);

            _userPreferences.ThemeColor = _selectedThemeStyle;
            _userPreferences.IconsStyles = _selectedIconStyle;
            _userPreferences.ComplementaryColors = _selectedColorComplementary;
            _userPreferences.TopbarStyles = _selectedTopbarStyle;

            await AuthenticationService.SetPreferencesUser(_userPreferences);

            DialogService.Close(true);
            MainLayout?.Refresh();
            NavigationService.NavigateTo("/", forceLoad: true,replace: true);
        }

    }

    private string GetLabelIcon(enumThemeIconStyle iconStyle)
    {
        switch (iconStyle)
        {
            case enumThemeIconStyle.Solid:
                return "Solid";
            case enumThemeIconStyle.Regular:
                return "Regular";
            case enumThemeIconStyle.Light:
                return "Light";
            case enumThemeIconStyle.Duotone:
                return "Duotone";
            case enumThemeIconStyle.Thin:
                return "Thin";
            default:
                return "Solid";
        }
    }

    private string GetStyleIcon(enumThemeIconStyle iconStyle)
    {
        switch (iconStyle)
        {
            case enumThemeIconStyle.Solid:
                return "fa-solid";
            case enumThemeIconStyle.Regular:
                return "fa-regular";
            case enumThemeIconStyle.Light:
                return "fa-light";
            case enumThemeIconStyle.Duotone:
                return "fa-duotone";
            case enumThemeIconStyle.Thin:
                return "fa-thin";
            default:
                return "fa-solid";

                StateHasChanged();
        }
    }

    private void OnChangeSelectedTheme(string args)
    {
        _selectedThemeStyle = args;

        StateHasChanged();
    }

    private void OnChangeSelectedIcon(enumThemeIconStyle Icon)
    {
        _selectedIconStyle = Icon;

        StateHasChanged();
    }

    private void OnChangeSelectedColorsComplementary(ChangeEventArgs args)
    {
        _selectedColorComplementary = args.Value.ToString();

        StateHasChanged();
    }

    private void OnChangeSelectedTopbarStyle(enumThemeTopbarStyle TopbarStyle)
    {
        _selectedTopbarStyle = TopbarStyle;

        StateHasChanged();
    }

    private bool ValidCheckedThemeColor(string ThemeColorName)
    {
        if(_selectedThemeStyle.Equals(ThemeColorName))
        {
            return true;
        }
        return false;
    }

    private bool ValidCheckedComplementaryColor(string ComplementaryColor)
    {
        if (!string.IsNullOrEmpty(BLUser.BaseObj.ThemeSecondaryColor) &&
        BLUser.BaseObj.ThemeSecondaryColor.Equals(ComplementaryColor))
        {
            //_selectedColorComplementary = BLUser.BaseObj.ThemeSecondaryColor;
            return true;
        }
        else if (ComplementaryColor.Equals("Tono1"))
        {
            _selectedColorComplementary = ComplementaryColor;
            return true;
        }
        else
        {
            return false;
        }
    }

    private bool ValidDisabledComplementaryColor(string ComplementaryColor)
    {
        if (!ComplementaryColor.Equals("Tono1"))
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    private bool ValidCheckedStyleIcon(enumThemeIconStyle Icon)
    {
        if(_selectedIconStyle == Icon)
        {
            return true;
        }
        return false;
    }

    private bool CheckedTopbarStyle(enumThemeTopbarStyle TopbarStyle)
    {
        if (BLUser.BaseObj.ThemeTopbarStyle == TopbarStyle)
        {
            //_selectedTopbarStyle = BLUser.BaseObj.ThemeTopbarStyle;
            return true;

        }
        else if (TopbarStyle == enumThemeTopbarStyle.OneColor)
        {
            _selectedTopbarStyle = TopbarStyle;
            return true;
        }
        else
        {
            return false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender || _jsModule == null)
        {
            _jsModule = await jsRuntime.InvokeAsync<IJSObjectReference>("import",
            "./_content/Siesa.SDK.Frontend/Components/Dashboard/UserComponent/UserPreferences.razor.js");
        }
    }

    public void OnInputFile(InputFileChangeEventArgs FileInput)
    {
        ProcessImg(FileInput.File);
    }

    public async Task PickComponent()
    {
        await _jsModule.InvokeVoidAsync("clickInput", _refinputFile._refinputFile.Element);
    }

    private async Task ProcessImg(IBrowserFile browserFile)
    {
        var ms = new MemoryStream();
        if (browserFile.Size > 3000000)
        {
            ErrorList.Add("La imagen no puede superar los 3MB");
            return;
        }

        await browserFile.OpenReadStream(maxAllowedSize: 3000000).CopyToAsync(ms);

        var file = new FormFile(ms, 0, ms.Length, null, browserFile.Name)
            {
                Headers = new HeaderDictionary(),
                ContentType = (browserFile.ContentType == "" ? "application/octet-stream" : browserFile.ContentType)
            };

        if (file != null)
        {
            ProfileImageData = $"data:{file.ContentType};base64,{Convert.ToBase64String(ms.ToArray())}";
            HasFile = true;
            StateHasChanged();
        }
        else
        {
            HasFile = false;
            Console.WriteLine("Error al cargar la imagen");
        }
    }

    public class ComplementaryColor //Temporal
    {
        public string ColorName { get; set; }
        public string PrimaryColor { get; set; }
        public string SecundaryColor { get; set; }
    }

}