@using Siesa.SDK.Frontend.Components.Layout
@using Siesa.SDK.Frontend.Components.FormManager.Views
@using Siesa.SDK.Shared.Services
@using Siesa.SDK.Frontend.Components.FormManager
@using Siesa.SDK.Shared.Utilities
@using Microsoft.Extensions.DependencyInjection
@using Siesa.SDK.Shared.DTOS
@using Siesa.SDK.Frontend.Components.FormManager.ViewModels
@using Siesa.Global.Enums 
@using Siesa.SDK.Frontend.Components.FormManager.Model

@inject IServiceProvider ServiceProvider
@inject IAuthenticationService AuthenticationService
@inject IBackendRouterService BackendRouterService
@inject SDKDialogService DialogService
@inject UtilsManager UtilManager


<div class="row">
    <div
        class="container-foto-perfil d-flex align-items-center justify-content-center col-12 col-sm-12 col-md-4 col-lg-3">

        <div class="whcm_user_photo_box">
            <div class="whcm_user_photo">
                <img src="@ProfileImageData" alt="imagen perfil" style="max-width: 100%;">
            </div>
            <button class="whcm_upload_photo btn btn-primary btn_primary_def_1 btn-sm" >
                <i class="fa-solid fa-camera"></i>
            </button>
        </div>
    </div>

    <div class="col-12 col-sm-12 col-md-8 col-lg-9 mt-3">
        <div class="sdk_card d-flex flex-row">
            <div class="sdk_button_box_2 p-1">

                @if (_IsEdit)
                {
                    <button class="btn btn-sm layout_btn_negative-sm mb-1" data-toggle="tooltip" data-placement="top"
                        title="Editar" @onclick="@(()=> ChangeViewType())">
                        <i class="fa-solid fa-circle-check"></i>
                    </button>

                    <button class="btn btn-sm layout_btn_negative-sm mb-1" data-toggle="tooltip" data-placement="top"
                        title="Editar" @onclick="@(()=> ChangeViewType())">
                        <i class="fa-solid fa-ban"></i>
                    </button>
                }
                else
                {
                    <button class="btn btn-sm layout_btn_negative-sm mb-1" data-toggle="tooltip" data-placement="top"
                        title="@EditUser" @onclick="@(()=> ChangeViewType())">
                        <i class="fa-solid fa-pen"></i>
                    </button>
                }

            </div>
            <div class="col pt-2">
                <div class="row">

                    <h6 class="col-12 font-weight-bold">
                        <ResourceViewer ResourceTag="Custom.SDK.UserPreference.UserData" />
                    </h6>

                    <FreeForm Viewdef="user_preferences" BusinessName="BLUser" BusinessObj="@BLUser"
                        ViewContext="@DynamicViewType" />

                </div>
            </div>
        </div>
    </div>
</div>
<hr>

<div class="row">
        <div class="col-12 col-sm-12 mb-sm-3  col-md-12 col-lg-4 mb-lg-0 custom-border custom-border-2">
            <h6 class="col-12 font-weight-bold font_color_primary p-0 form-group">
                <ResourceViewer ResourceTag="Custom.SDK.UserPreference.Themes" />
            </h6>

            <div class="col px-0 mb-3">
                <label class="col-12 font-weight-bold p-0">
                    <ResourceViewer ResourceTag="Custom.SDK.UserPreference.MainThemes" />
                </label>

                <div id="carouselExampleControls" class="carousel slide" data-interval="false">
                    <div class="carousel-inner">
                        <div class="carousel-item active">
                            <div class="row px-4" alt="First slide">
                                @if (_userPreferences != null && _userPreferences.ThemeColor != null)
                                { 
                                    @foreach (var theme in _userPreferences.ThemeColor)
                                    {
                                        <div class="col-4 ">
                                            <div class="sdk_card p-2 mb-2">
                                                <div class="d-flex justify-content-between">
                                                    <div class="col-12 pl-0 pr-0">
                                                        <div
                                                            style="background-color:@theme.Value; border-radius: 4px; height: 20px;">
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="d-flex align-items-center">


                                                <input class="mr-2" type="radio" name="ThemeColor" value="@theme.Key" @onchange="OnChangeSelectedTheme" checked="@ValidCheckedThemeColor(theme.Key)" 
                                                disabled="@ValidDisabledThemeColor(theme.Key)">

                                                <ResourceViewer ResourceTag=@theme.Key />
                                        
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    </div>

                    <a class="carousel-control-prev" href="#carouselExampleControls" role="butto" style="opacity: 1;width: auto;"
                        data-slide="prev">
                        <span class="carousel-control-prev-icon" aria-hidden="true">
                            <i class="fa-solid fa-chevron-left" style="color:#1079FD"></i>
                        </span>
                    </a>
                    <a class="carousel-control-next" href="#carouselExampleControls" role="button" style="opacity: 1;width: auto;"
                        data-slide="next">
                        <span class="carousel-control-next-icon" aria-hidden="true">
                            <i class="fa-solid fa-chevron-right" style="color:#1079FD;"></i>
                        </span>
                    </a>
                </div>
             </div>
             
            <div class="col px-0 mb-3">
                <label class="col-12 font-weight-bold p-0">
                    <ResourceViewer ResourceTag="Custom.SDK.UserPreference.ComplementaryColor" />
                </label>

                <div class="row">
                    @if (_userPreferences != null && _userPreferences.ComplementaryColors != null)
                    {
                        @foreach (var item in _userPreferences.ComplementaryColors)
                        {   
                            <div class="col-4 ">
                                    <div class="sdk_card p-2 mb-2">
                                        <div class="d-flex justify-content-between">

                                            <div class="col-6 pl-0 pr-1">
                                                <div
                                                    style="background-color:@item.PrimaryColor; border-radius: 4px; height: 20px;">
                                                </div>
                                            </div>

                                            <div class="col-6 pr-0 pl-1">
                                                <div
                                                    style="background-color:@item.SecundaryColor; border-radius: 4px; height: 20px;">
                                                </div>
                                            </div>

                                        </div>

                                    </div>

                                    <div class="d-flex align-items-center">
                                        <input class="mr-2" type="radio" name="ComplementaryColors" value="@item.ColorName"
                                        @onchange="OnChangeSelectedColorsComplementary" checked="@ValidCheckedComplementaryColor(item.ColorName)" disabled="@ValidDisabledComplementaryColor(item.ColorName)">
                                        <label class="mb-0" style="font-size: 14px;">@item.ColorName</label>
                                    </div>

                            </div>
                        }
                    }
                </div>
            </div>

            <div class="alert alert-info d-flex align-items-center font_size_087" role="alert">
                <i class="fa-solid fa-circle-info mr-2"></i>
                 <ResourceViewer ResourceTag="Custom.SDK.UserPreference.Notifi" />
            </div>
        </div>
             

    <div class="col-12 col-sm-12 mb-sm-3  col-md-12 col-lg-4 mb-lg-0 custom-border custom-border-2">

        <h6 class="col-12 font-weight-bold font_color_primary p-0 form-group">
        <ResourceViewer ResourceTag="Custom.SDK.UserPreference.IconStyle" />
        </h6>
        <div class="row">
            <div class="col-12 col-sm-12">
                <div class="row">
                    @if (_userPreferences != null && _userPreferences.IconsStyles != null)
                    {    
                        @foreach (var icon in _userPreferences.IconsStyles)
                        {    
                            <div class="col-4 mb-3">
                                <div class="sdk_card d-flex justify-content-center rounded p-4 mb-2">
                                    <i class="@GetStyleIcon(icon) fa-user fa-2x" style="color:#1079FD;"></i>
                                </div>

                                <div class="d-flex align-items-center">
                                    <input class="mr-2" type="radio" name="IconsStyles" value="@icon" 
                                    @onchange="e =>OnChangeSelectedIcon(icon)" checked="@ValidCheckedStyleIcon(icon)">
                                    <label class="mb-0"  style="font-size: 14px;">
                                        @GetLabelIcon(icon)
                                    </label>
                                </div>
                            </div>
                        }
                    }
                </div>

            </div>

        </div>
    </div>

    <div class="col-12 col-sm-12 col-md-12 col-lg-4">

        <h6 class="col-12 font-weight-bold font_color_primary p-0 form-group">
            <ResourceViewer ResourceTag="Custom.SDK.UserPreference.ToolBar" />
        </h6>

        <div class="row">

            <div class="col-12 mb-3">
                <div class="d-flex justify-content-center py-4 px-5 mb-2 sdk_card">
                    <div class="col-12 col-md-10 col-lg-12 d-flex d-row justify-content-around">
                        <i class="@GetStyleIcon(_selectedIconStyle) fa-circle-plus fa-lg" style="color:#1079FD;"></i>
                        <i class="@GetStyleIcon(_selectedIconStyle) fa-pen fa-lg" style="color:#1079FD;"></i>
                        <i class="@GetStyleIcon(_selectedIconStyle) fa-trash-can fa-lg" style="color:#1079FD;"></i>
                        <i class="@GetStyleIcon(_selectedIconStyle) fa-list fa-lg" style="color:#1079FD;"></i>
                        <i class="@GetStyleIcon(_selectedIconStyle) fa-magnifying-glass fa-lg" style="color:#1079FD;"></i>
                    </div>

                </div>

                <div class="d-flex align-items-center">
                    <input class="mr-2" type="radio" id="TopbarStyle" value="@_OneColor"
                    @onchange="e =>OnChangeSelectedTopbarStyle(_OneColor)" checked="@CheckedTopbarStyle(_OneColor)">
                    <ResourceViewer ResourceTag="Custom.SDK.UserPreference.OneColor" />
                </div>
            </div>

            <div class="col-12 ">
                <div class="d-flex justify-content-center py-4 px-5 mb-2 sdk_card">
                    <div class="col-12 col-md-10 col-lg-12 d-flex d-row justify-content-around">
                        <i class="@GetStyleIcon(_selectedIconStyle) fa-circle-plus fa-lg" style="color:#FA8651;"></i>
                        <i class="@GetStyleIcon(_selectedIconStyle) fa-pen fa-lg" style="color:#FAC153;"></i>
                        <i class="@GetStyleIcon(_selectedIconStyle) fa-trash-can fa-lg" style="color:#F9777F;"></i>
                        <i class="@GetStyleIcon(_selectedIconStyle) fa-list fa-lg" style="color:#C0AAEF;"></i>
                        <i class="@GetStyleIcon(_selectedIconStyle) fa-magnifying-glass fa-lg" style="color:#2BC8C9;"></i>
                    </div>

                </div>

                <div class="d-flex align-items-center">
                    <input class="mr-2" type="radio" id="TopbarStyle" value="@_MultiColor"
                    @onchange="e =>OnChangeSelectedTopbarStyle(_MultiColor)" disabled>
                    <ResourceViewer ResourceTag="Custom.SDK.UserPreference.MultiColor" />
                </div>
            </div>

        </div>
    </div>
</div>



<div class="row modal-footer pb-0">
    <button class="btn btn-primary btn_secondary_def_1 btn-sm px-3" @onclick="@(async () => await InitView())">
      <ResourceViewer ResourceTag="Custom.SDK.UserPreference.DiscardChanges" />
    </button>


    <button class="btn btn-primary btn_secondary_cancel btn-sm px-3" @onclick="@(()=> DialogService.Close(false))" >
        <ResourceViewer ResourceTag="Custom.SDK.UserPreference.Out" />
    </button>

    <button class="btn btn-primary btn_primary_def_1 btn-sm px-3" @onclick="@(async () => await SaveUserPreferences())">
        <ResourceViewer ResourceTag="Action.Save" />
    </button>


</div>

@code
{
    private string ProfileImageData { get; set; }
    private bool _IsEdit = false;
    public DynamicViewType DynamicViewType { get; set; } = DynamicViewType.Detail;
    public dynamic BLUser { get; set; }

    private UserPreferencesDTO _userPreferences { get; set; }

    private enumThemeIconStyle _selectedIconStyle { get; set; }

    private string _selectedColorComplementary { get; set; }

    private string _selectedThemeStyle { get; set; } 

    private enumThemeTopbarStyle _selectedTopbarStyle { get; set; }

    private enumThemeTopbarStyle _OneColor { get; set; } = enumThemeTopbarStyle.OneColor;

    private enumThemeTopbarStyle _MultiColor { get; set; } = enumThemeTopbarStyle.MultiColor;

    private string TitlePreferences { get; set; }
    private string EditUser { get; set; }

    private void ChangeViewType()
    {
        _IsEdit = !_IsEdit;

        if (_IsEdit)
        {
            DynamicViewType = DynamicViewType.Edit;
        }
        else
        {
            DynamicViewType = DynamicViewType.Detail;
        }

        StateHasChanged();
    }

    private void CancelEdit()
    {
        _IsEdit = false;
        DynamicViewType = DynamicViewType.Detail;
        StateHasChanged();
    }

    private async Task InitView()
    {
        var blType = Utilities.SearchType("Siesa.MasterBackend.Business.BLUser");

        BLUser = ActivatorUtilities.CreateInstance(ServiceProvider, blType);

        await BLUser.InitializeBusiness(AuthenticationService.User.Rowid);

        BLUser.BaseObj.Password = null;

        BLUser.BusinessName = "BLUser";

        ProfileImageData = AuthenticationService.GetUserPhoto();

        _selectedThemeStyle = BLUser.BaseObj.Theme;
        _selectedIconStyle = BLUser.BaseObj.ThemeIconStyle;
        _selectedColorComplementary =  BLUser.BaseObj.ThemeSecondaryColor;
        _selectedTopbarStyle = BLUser.BaseObj.ThemeTopbarStyle;
        //TODO: _userPreferences 

        _userPreferences = new UserPreferencesDTO() 
        {
            ThemeColor = new Dictionary<string, string>() 
            {
                { "Custom.SDK.Theme.Blue", "#1079FD" },
                { "Custom.SDK.Theme.Orange", "#00AE3C" },
                { "Custom.SDK.Theme.Green", "#FF8E2C" },
            },
            IconsStyles = new List<enumThemeIconStyle>() 
            {
                { enumThemeIconStyle.Solid },
                { enumThemeIconStyle.Regular },
                { enumThemeIconStyle.Light },
                { enumThemeIconStyle.Duotone },
                { enumThemeIconStyle.Thin }
            },
            ComplementaryColors = new List<ComplementaryColor>()
            {
                new ComplementaryColor() { ColorName = "Tono1", PrimaryColor = "#1079FD", SecundaryColor="#661079FD"  },
                new ComplementaryColor() { ColorName = "Tono2", PrimaryColor = "#9B111E", SecundaryColor="#669B111E" } 
            },
            
        };

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await InitView();

        await base.OnInitializedAsync();

        TitlePreferences = await UtilManager.GetResource("Custom.SDK.UserPreference");

        EditUser = await UtilManager.GetResource("Custom.SDK.UserPreference.EditUser");
    }
    
    private async Task SaveUserPreferences()
    {
 

        BLUser.BaseObj.Theme = _selectedThemeStyle;
        BLUser.BaseObj.ThemeIconStyle = _selectedIconStyle;
        BLUser.BaseObj.ThemeSecondaryColor = _selectedColorComplementary;
        BLUser.BaseObj.ThemeTopbarStyle = _selectedTopbarStyle;

        var BL = BackendRouterService.GetSDKBusinessModel("BLUser",AuthenticationService);

        var result = await BL.Call("SaveUserPreferences", BLUser.BaseObj);

        if (result.Success)
        {
            Console.WriteLine("Success Save Changes");
            AuthenticationService.SetUserPreferences(BLUser.BaseObj);
            DialogService.Close(true);
        }

    }

    private string GetLabelIcon(enumThemeIconStyle iconStyle)
    {
        switch (iconStyle)
        {
            case enumThemeIconStyle.Solid:
                return "Solid";
            case enumThemeIconStyle.Regular:
                return "Regular";
            case enumThemeIconStyle.Light:
                return "Light";
            case enumThemeIconStyle.Duotone:
                return "Duotone";
            case enumThemeIconStyle.Thin:
                return "Thin";
            default:
                return "Solid";
        }
    }

    private string GetStyleIcon(enumThemeIconStyle iconStyle)
    {
        switch (iconStyle)
        {
            case enumThemeIconStyle.Solid:
                return "fa-solid";
            case enumThemeIconStyle.Regular:
                return "fa-regular";
            case enumThemeIconStyle.Light:
                return "fa-light";
            case enumThemeIconStyle.Duotone:
                return "fa-duotone";
            case enumThemeIconStyle.Thin:
                return "fa-thin";
            default:
                return "fa-solid";

            StateHasChanged();
        }
    }

    private void OnChangeSelectedTheme(ChangeEventArgs args)
    {
        _selectedThemeStyle = args.Value.ToString();

        StateHasChanged();
    }

    private void OnChangeSelectedIcon(enumThemeIconStyle Icon)
    {
        _selectedIconStyle = Icon;

        StateHasChanged();
    }

    private void OnChangeSelectedColorsComplementary (ChangeEventArgs args)
    {
        _selectedColorComplementary = args.Value.ToString();

        StateHasChanged();
    }

    private void OnChangeSelectedTopbarStyle (enumThemeTopbarStyle TopbarStyle)
    {
        _selectedTopbarStyle = TopbarStyle;

        StateHasChanged();
    }

    private  bool ValidCheckedThemeColor (string ThemeColorName)
    {
        if(!string.IsNullOrEmpty(BLUser.BaseObj.Theme) && BLUser.BaseObj.Theme.Equals(ThemeColorName))
        {
           //_selectedThemeStyle = BLUser.BaseObj.Theme;
            return true;
        }
        else if(ThemeColorName.Equals("Custom.SDK.Theme.Blue"))
        {
            _selectedThemeStyle = ThemeColorName;
            
            return true;
        }
        else
        {
            return false;
        }
    }

    private bool ValidDisabledThemeColor(string ThemeColorName)
    {
        if (!ThemeColorName.Equals("Custom.SDK.Theme.Blue"))
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    private  bool ValidCheckedComplementaryColor (string ComplementaryColor)
    {
        if(!string.IsNullOrEmpty(BLUser.BaseObj.ThemeSecondaryColor) && BLUser.BaseObj.ThemeSecondaryColor.Equals(ComplementaryColor))
        {
            //_selectedColorComplementary = BLUser.BaseObj.ThemeSecondaryColor;
            return true;
        }
        else if(ComplementaryColor.Equals("Tono1"))
        {
            _selectedColorComplementary = ComplementaryColor;
            return true;
        }
        else
        {
            return false;
        }
    }

    private bool ValidDisabledComplementaryColor(string ComplementaryColor)
    {
        if (!ComplementaryColor.Equals("Tono1"))
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    private  bool ValidCheckedStyleIcon (enumThemeIconStyle Icon)
    {
        if(BLUser.BaseObj.ThemeIconStyle == Icon)
        {
            //_selectedIconStyle = BLUser.BaseObj.ThemeIconStyle;
            return true;
        }
        else if(Icon == enumThemeIconStyle.Solid)
        {
            //_selectedIconStyle = Icon;
            return true;
        }
        else
        {
            return false;
        }
    }

    private bool CheckedTopbarStyle(enumThemeTopbarStyle TopbarStyle)
    {
        if(BLUser.BaseObj.ThemeTopbarStyle == TopbarStyle)
        {
            //_selectedTopbarStyle = BLUser.BaseObj.ThemeTopbarStyle;
            return true;

        }else if(TopbarStyle == enumThemeTopbarStyle.OneColor)
        {
            _selectedTopbarStyle = TopbarStyle;
            return true;
        }
        else
        {
            return false;
        }
    }

}