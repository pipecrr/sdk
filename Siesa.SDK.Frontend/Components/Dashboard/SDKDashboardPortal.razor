@using Siesa.SDK.Shared.DTOS
@using Siesa.SDK.Shared.Services
@using Siesa.SDK.Shared.Utilities
@using Microsoft.Extensions.DependencyInjection
@using Siesa.SDK.Business
@using Siesa.SDK.Entities
@inject IServiceProvider ServiceProvider
@inject SDKGlobalLoaderService GlobalLoaderService
@inject IBackendRouterService BackendRouterService
@inject IAuthenticationService AuthenticationService
<aside class="sdk_dashboard_portal">
    @if (PortalConfiguration != null)
    {
        var row = 0;
        <DxGridLayout ColumnSpacing="0.8rem">
            <Rows>
                <DxGridLayoutRow/>
            </Rows>
            <Columns>
                <DxGridLayoutColumn Width="50%"/>
                <DxGridLayoutColumn/>
            </Columns>
            <Items>
                <DxGridLayoutItem Row="0" Column="0" CssClass="sdk_left_dashlets">
                    <Template>
                        <DxGridLayout ColumnSpacing="0.8rem" RowSpacing="0.8rem">
                            <Rows>
                                @for(var i = 0; i < PortalConfiguration.DashboardRows.Count; i++)
                                {
                                    <DxGridLayoutRow Height="@PortalConfiguration.DashboardRows[i].Height" @key="@("sdk_portal_row_" + i)"/>
                                }
                            </Rows>
                            <Columns>
                                <DxGridLayoutColumn/>
                                <DxGridLayoutColumn/>
                                <DxGridLayoutColumn/>
                                <DxGridLayoutColumn/>
                                <DxGridLayoutColumn/>
                                <DxGridLayoutColumn/>
                                <DxGridLayoutColumn/>
                                <DxGridLayoutColumn/>
                                <DxGridLayoutColumn/>
                                <DxGridLayoutColumn/>
                                <DxGridLayoutColumn/>
                                <DxGridLayoutColumn/>
                            </Columns>
                            <Items>
                                @for(var i = 0; i < PortalConfiguration.DashboardRows.Count; i++)
                                {
                                    var item = PortalConfiguration.DashboardRows[i];
                                    var lastColumn = 0;
                                    bool showRow = true;                                        
                                    if(PortalConfiguration.HasExpanded && !item.KeepInZoom ){
                                        showRow = false;
                                    }
                                    @for(var j= 0; j < item.Dashlets.Count; j++)
                                    {
                                        var item2 = item.Dashlets[j];
                                        var itemColumns = item2.Columns;
                                        bool showDashlet = false;
                                        if (itemColumns == 1)
                                        {
                                            itemColumns = (12 / (item.Dashlets.Count - j)) - lastColumn;
                                        }
                                        if (item2.Expanded)
                                        {
                                            itemColumns = 12;
                                            showRow = true;
                                            showDashlet = true;
                                            lastColumn = 0;
                                        }
                                        if(!PortalConfiguration.HasExpanded || item.KeepInZoom){
                                            showDashlet = true;
                                        }
                                        if (showRow && showDashlet){
                                            <DxGridLayoutItem Row="@row" Column="@lastColumn" ColumnSpan="@itemColumns" RowSpan="@item2.Rows">
                                                <Template>
                                                    <CascadingValue Value="@this">
                                                        <CascadingValue Value="@item2">
                                                            @if(true){
                                                                <SDKDashletPortal Business="@Business" ComponentType="@item2.ComponentType" ResourceTag="@item2.ResourceTag" ShowTitle="@item2.ShowTitle" IndexDashlet="@j" IndexRow="@i"/>
                                                            }
                                                        </CascadingValue>
                                                    </CascadingValue>
                                                </Template>
                                            </DxGridLayoutItem>
                                        }
                                        lastColumn += itemColumns;
                                    }
                                    if(showRow){
                                        row++;
                                    }
                                }
                            </Items>
                        </DxGridLayout>
                    </Template>
                </DxGridLayoutItem>
                <DxGridLayoutItem Row="0" Column="1">
                    <Template>
                        @if (PortalConfiguration.MainDashlet != null && !ShowDetail)
                        {
                            <SDKDashletPortal Business="@Business" ComponentType="@PortalConfiguration.MainDashlet.ComponentType" ResourceTag="@PortalConfiguration.MainDashlet.ResourceTag" ShowTitle="@PortalConfiguration.MainDashlet.ShowTitle"/>
                        }else if (ShowDetail)
                        {
                            <SDKDashletPortal Business="@Business" ComponentType="@MainDashletType"/>
                        }
                        
                    </Template>
                </DxGridLayoutItem>
            </Items>
        </DxGridLayout>
    }
    
</aside>

@code {
    [CascadingParameter] 
    public SDKPortalDTO Portal { get; set; }
    private SDKPortalConfiguration PortalConfiguration { get; set; }
    private dynamic Business { get; set; }
    private Type MainDashletType { get; set; }
    private bool ShowDetail { get; set;}
    
    private async Task<SDKPortalConfiguration> GetPortalConfiguration()
    {
        ShowDetail = false;
        if (string.IsNullOrEmpty(Portal?.BusinessName))
        {
            return null;
        }

        var blPortalRoute = BackendRouterService.GetSDKBusinessModel(Portal.BusinessName, AuthenticationService);
        
        if(blPortalRoute == null){
            return null;
        }

        var blPortalType = Utilities.SearchType($"{blPortalRoute.Namespace}.{blPortalRoute.Name}", true);
        if (blPortalType == null)
        {
            return null;
        }
        //var baseObjType = blPortalType.GetProperty("BaseObj")?.PropertyType;
        Business = (dynamic)ActivatorUtilities.CreateInstance(ServiceProvider, blPortalType);
        await Business.InitializeBusiness(Portal.RowidMainRecord);
        return Business?.GetPortalConfiguration();
    }

    /// <summary>
    /// Restart the portal
    /// </summary>
    /// <param name="parameters"></param>
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        var newPortal = parameters.TryGetValue<SDKPortalDTO>(nameof(Portal), out var portal) ? portal : null;
        var shouldRestart = Portal?.RowidPortal != newPortal?.RowidPortal;
        await base.SetParametersAsync(parameters);
        if(shouldRestart){
            await Init();
        }
    }

    private async Task Init()
    {
        GlobalLoaderService.Show();
        PortalConfiguration = await GetPortalConfiguration();
        GlobalLoaderService.Hide();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await Init();
        await base.OnInitializedAsync();
    }

    public void ExpandDashlet()
    {
        PortalConfiguration.HasExpanded = true;
        StateHasChanged();
    }

    public void CollapseDashlet()
    {
        PortalConfiguration.HasExpanded = false;
        MainDashletType = null;
        ShowDetail = false;
        StateHasChanged();
    }

    public void DetailDashlet(Type type)
    {
        MainDashletType = type;
        ShowDetail = true;
        StateHasChanged();
    }

}