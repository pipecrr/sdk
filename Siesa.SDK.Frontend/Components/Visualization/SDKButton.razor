@using SDK.Components.Visualization
@using Siesa.SDK.Frontend.Application
@using Siesa.SDK.Shared.Services
@inject IResourceManager ResourceManager
@inject IAuthenticationService AuthenticationService
@inherits SDKComponent


<DxButton 
    RenderStyle="@RenderStyle.Get()" 
    RenderStyleMode="@RenderStyleMode.Get()" 
    SubmitFormOnClick="@SubmitFormOnClick"
    Click="@Click" 
    Text="@Text" 
    form="@form"
    NavigateUrl="@NavigateUrl"
    CssClass="@GetCss()"
    Enabled="@Enabled"
    data-automation-id="@GetAutomationId()"
    >
    @if(!string.IsNullOrEmpty(IconCssClass)){
        <i class="@IconCssClass"></i>
    }else{
        @if(ChildContent != null)
        {
            @ChildContent
        }else{
            @Text
        }
    }
    </DxButton>

@code {
    [Parameter] public SDKButtonRenderStyle RenderStyle { get; set; }
    [Parameter] public SDKButtonRenderStyleMode RenderStyleMode { get; set; }
    [Parameter] public string ResourceTag { get; set; }
    [Parameter] public Int64? RowidResource { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> Click { get; set; }
    [Parameter] public bool IsActionButton { get; set; }
    [Parameter] public string IconCssClass {get;set;}
    [Parameter] public string CssClass { get; set; }

    [Parameter] public string form { get; set; }

    [Parameter] public bool SubmitFormOnClick { get; set; } =  false;

    private string Text { get; set; }

    [Parameter] public string NavigateUrl { get; set; }
    [Parameter] public bool Enabled { get; set; } = true;
    [Parameter] public RenderFragment? ChildContent { get; set; }

    private async Task<string> GetText(){
        if((RowidResource == null || RowidResource == 0) && ResourceTag != null){
            return await ResourceManager.GetResource(ResourceTag, AuthenticationService);
        }
        return await ResourceManager.GetResource(Convert.ToInt64(RowidResource), AuthenticationService);
    }

    protected override async Task OnInitializedAsync()
    {
        if(IsActionButton || (string.IsNullOrEmpty(ResourceTag) && (!RowidResource.HasValue || RowidResource == 0)))
        {
            await base.OnInitializedAsync();
        }else{
            Text = ResourceTag;
            await base.OnInitializedAsync();
            Text = await GetText();
        }
    }

    private string GetCss(){
        if(IsActionButton)
        {
            return $"layout_btn_standar-sm {CssClass}";
        }
        switch (RenderStyle)
        {
            case SDKButtonRenderStyle.Primary:
                return $"btn_primary_def_1 {CssClass}";

            case SDKButtonRenderStyle.Secondary:
                return $"btn_secondary_def_1 {CssClass}";

            case SDKButtonRenderStyle.Cancel:
                return $"btn_secondary_cancel {CssClass}";

            case SDKButtonRenderStyle.Danger:
                return $"btn_secondary_danger {CssClass}";

            default:
                return CssClass;
        }
    }

    protected override string GetAutomationId()
    {
        if(string.IsNullOrEmpty(AutomationId))
        {
            if(SubmitFormOnClick && !string.IsNullOrEmpty(form))
            {
                AutomationId = "submit";
            }else if(!string.IsNullOrEmpty(ResourceTag))
            {
                AutomationId = ResourceTag;
            }
        }
        return base.GetAutomationId();
    }
}