@using Siesa.SDK.Frontend.Utils
@using System.Reflection
@using System.Runtime.CompilerServices
@using DocumentFormat.OpenXml.Wordprocessing
@using Microsoft.IdentityModel.Tokens
@using Siesa.SDK.Frontend.Components.FormManager.ViewModels

@if (!_hidden){
    <SDKButton IconCssClass="@IconCssClass" IsActionButton="@IsActionButton" Click="@Click" Enabled="@_enabled"/>
}

@code{
    [Parameter]
    public dynamic BusinessObj { get; set; }
    [Parameter] 
    public EventCallback<MouseEventArgs> Click { get; set; }
    [Parameter] 
    public Button Button { get; set; }
    [Parameter] 
    public string IconCssClass { get; set; }
    [Parameter] 
    public bool IsActionButton { get; set; }
    [Parameter]
    public dynamic Data { get; set; }
    [Parameter]
    public dynamic Grid { get; set; }
    [CascadingParameter]
    public FormView FormView { get; set; }
    
    
    private bool _enabled = true;
    private bool _hidden = false;

    protected override async Task OnParametersSetAsync()
    {
        _enabled = !Button.Disabled;
        _hidden = Button.Hidden;
        if(Button.CustomAttributes != null && Button.CustomAttributes.ContainsKey("sdk-disabled")){
            var disabled = await FormView.EvaluateCodeButtons(Button, "sdk-disabled", Data);
            if (_enabled == disabled)
            {
                _enabled = !disabled;
                StateHasChanged();
            }
        }
        if(Button.CustomAttributes != null && Button.CustomAttributes.ContainsKey("sdk-hide")){
            var hidden = await FormView.EvaluateCodeButtons(Button, "sdk-hide", Data);
            if (_hidden != hidden)
            {
                _hidden = hidden;
                StateHasChanged();
            }
        }
        if(Button.CustomAttributes != null && Button.CustomAttributes.ContainsKey("sdk-show")){
            var show = await FormView.EvaluateCodeButtons(Button, "sdk-show", Data);
            if (_hidden == show)
            {
                _hidden = !show;
                StateHasChanged();
            }
        }        
        await base.OnParametersSetAsync().ConfigureAwait(true);
    }
}