@using Siesa.SDK.Frontend.Components.Layout
@using Siesa.SDK.Frontend.Components.Visualization
@using Siesa.SDK.Frontend.Components.FormManager.Views
@using Siesa.SDK.Frontend.Components.FormManager.Model
@using Newtonsoft.Json
@using Siesa.Global.Enums
@using Siesa.SDK.Shared.Services
@inject IJSRuntime JsRuntime
@inject NavigationManager Navigation
@inject NavigationService NavigationService
@inject Radzen.DialogService DialogService
@inject IAuthenticationService AuthenticationService
@inject UtilsManager UtilsManager
@implements IDisposable

<div @attributes="@FlexAttributes">
</div>

@if(!IsListView && FlexRowId == 0)
{    
<PageTitle><ResourceViewer ResourceTag="Custom.BLFlex.Title" /> | <ResourceViewer ResourceTag="Custom.Project.Name" /></PageTitle>
<SetTopBar>
    <TopBarTitle><ResourceViewer ResourceTag="Custom.BLFlex.Title" /></TopBarTitle>
    <TopBarButtons>
        @if(_isDetail)
        {
            <TopBarButton ResourceTag="Action.Flex.RefreshData" IconCssClass="fa-solid fa-refresh" Click="RefreshData" />
            <TopBarButton ResourceTag="Action.Flex.ExportToExcel" IconCssClass="fa-solid fa-file-excel" Click="ExportToExcel" />
            <TopBarButton ResourceTag="Action.Flex.Configure" IconCssClass="fa-solid fa-cog" Click="Configure" />
            <TopBarButton ResourceTag="Action.Create" IconCssClass="fa-solid fa-circle-plus" Click="GoToCreate"  />
            <TopBarButton ResourceTag="Action.Edit" IconCssClass="fa-solid fa-pen" Click="GoToEdit"  />
            <TopBarButton ResourceTag="Action.List"  IconCssClass="fa-solid fa-list" Click="GoToList" />
            <TopBarButton ResourceTag="Action.Delete" IconCssClass="fa-solid fa-trash-can" Click="OnClickDelete" />
        }else{
            <TopBarButton ResourceTag="Action.Flex.AddGraphic" IconCssClass="fa-solid fa-pie-chart" Click="AddGraphic" />
            <TopBarButton ResourceTag="Action.Flex.Configure" IconCssClass="fa-solid fa-cog" Click="Configure" />
            <TopBarButton ResourceTag="Action.Flex.SaveAndContinue" IconCssClass="fa-solid fa-bookmark" Click="SaveAndContinue" />
            <TopBarButton ResourceTag="Action.Flex.SaveAndClose" IconCssClass="fa-solid fa-floppy-disk" Click="SaveAndClose" />
        }
        
    </TopBarButtons>
</SetTopBar>
}
@code {
    [Parameter]
    public dynamic Business {get;set;}
    [Parameter]
    public bool IsListView {get;set;} = false;
    [Parameter]
    public string BlNameList {get;set;} = "";
    [Parameter]
    public string ViewdefName {get;set;} = "";
    [Parameter]
    public ListView ListView {get;set;}
    [Parameter]
    public string GuidListView {get;set;} = "";
    [Parameter]
    public bool CanEdit {get;set;}
    [Parameter]
    public bool CanDelete {get;set;}
    [Parameter]
    public bool CanDetail {get;set;}
    [Parameter]
    public bool EditingFlex {get;set;} = false;
    [Parameter]
    public int Take {get;set;} = 100;
    [Parameter]  
    public bool ServerPagination {get;set;} = false;
    [Parameter]
    public string FilterSearch {get;set;} = "";
    [Parameter]
    public string FlexFilters {get;set;} = "";
    [Parameter]
    public string GuidFlex {get;set;} = "";
    [Parameter]
    public List<dynamic> ActionIcons {get;set;} = new List<dynamic>();
    [Parameter]
    public bool HasSearch {get;set;} = false;
    [Parameter]
    public bool IsMultiple {get;set;} = false;
    [Parameter]
    public int FlexRowId {get;set;} = 0;
    [Parameter]
    public bool ShowActions {get;set;} = true;
    [Parameter]
    public List<string> FieldsHiddenList { get; set; } = new List<string>();
    [Parameter]
    public bool FromEntityField { get; set; }
    [Parameter]
    public bool ShowTable { get; set; } = true;
    [Parameter]
    public bool IsSdkFlex { get; set; } = false;
    private string _guid ="";
    private bool _isDebug = false;

    private bool _isDetail = false;

    private int _flexRowId = 0;

    private string _blName = "BLFlex";
    private string _currentView = "create";
    private string _flexElementId;
    private bool _flexDesigner;
    private Dictionary<string, object> FlexAttributes { get; set; } = new Dictionary<string, object>();

    private bool _isMounted = false;
    private bool _isSaveProduct = false;
    
    private void Init()
    { 
        _isSaveProduct = IsSdkFlex;
        Dictionary<string, object> newFlexAttributes = new Dictionary<string, object>();
        bool mountFlex = false;
        if(!IsListView){
            Navigation.TryGetQueryString("sdk_debug",out string sdkDebugVar);
            if(!string.IsNullOrEmpty(sdkDebugVar))
            {
                if(!_isDebug)
                {
                    mountFlex = true;
                }
                _isDebug = true;
            }            

            Navigation.TryGetQueryString("currentView",out string sdkCurrentView);
            
            if(string.IsNullOrEmpty(sdkCurrentView) && FlexRowId == 0)
            {
                sdkCurrentView = "create";
            }

            if(sdkCurrentView != _currentView && FlexRowId == 0)
            {
                mountFlex = true;
                _currentView = sdkCurrentView;
            }

            if(_currentView == "detail" && FlexRowId == 0)
            {
                if(!_isDetail)
                {
                    mountFlex = true;
                }
                _isDetail = true;
            }

            Navigation.TryGetQueryString("flexRowid",out string SDKFlexRowIdVar);
            if(!string.IsNullOrEmpty(SDKFlexRowIdVar))
            {
                if(int.Parse(SDKFlexRowIdVar) != _flexRowId)
                {
                    mountFlex = true;
                }
                _flexRowId = int.Parse(SDKFlexRowIdVar);
            }  
        }else{
            Navigation.TryGetQueryString("sdk_debug",out string sdkDebugVar);
            if(!string.IsNullOrEmpty(sdkDebugVar))
            {
                if(!_isDebug)
                {
                    mountFlex = true;
                }
                _isDebug = true;
            }
            _currentView = "detail";
        }

        //_isDebug = true;
        //por parametro llega is_product, pero se envia al react como is_save_product para diferenciar el del report_header
        Navigation.TryGetQueryString("is_product",out string isSaveProduct);
        if(!string.IsNullOrEmpty(isSaveProduct))
        {
            _isSaveProduct = true;
        }

        if(EditingFlex){
            _currentView = "edit";
        }
        var actionIconsString = JsonConvert.SerializeObject(ActionIcons);
        if(FlexRowId != 0){
            _flexRowId = FlexRowId;
            _currentView = "detail";
        }

        var fieldsHiddenListString = JsonConvert.SerializeObject(FieldsHiddenList);
        
        string style = GetStyle();
        
        bool redirectDetail = ListView?.RedirectDetail ?? false;
        bool redirectCreate = ListView?.RedirectCreate ?? false;

        _flexElementId = $"flexdebug_{_guid}";
        newFlexAttributes.Add("id", _flexElementId);
        newFlexAttributes.Add("class", "root_oreports");
        newFlexAttributes.Add("current_view", _currentView);
        newFlexAttributes.Add("is_list_view", IsListView.ToString());
        newFlexAttributes.Add("bl_name_list", BlNameList);
        newFlexAttributes.Add("has_search", HasSearch.ToString());
        newFlexAttributes.Add("viewdef_name", ViewdefName);
        newFlexAttributes.Add("can_edit_list_view", CanEdit.ToString());
        newFlexAttributes.Add("can_delete_list_view", CanDelete.ToString());
        newFlexAttributes.Add("can_detail_list_view", CanDetail.ToString());
        newFlexAttributes.Add("editing_flex", EditingFlex.ToString());
        newFlexAttributes.Add("take", Take.ToString());
        newFlexAttributes.Add("server_pagination", ServerPagination.ToString());
        newFlexAttributes.Add("filter_search", FilterSearch);
        newFlexAttributes.Add("guid", _guid);
        newFlexAttributes.Add("action_icons", actionIconsString);
        newFlexAttributes.Add("is_multiple", IsMultiple.ToString());
        newFlexAttributes.Add("flex_filters", FlexFilters);
        newFlexAttributes.Add("preference_style", style);
        newFlexAttributes.Add("fields_hidden_list", fieldsHiddenListString);
        newFlexAttributes.Add("show_actions", ShowActions.ToString());
        newFlexAttributes.Add("from_entity_field", FromEntityField.ToString());
        newFlexAttributes.Add("redirect_detail", redirectDetail.ToString());
        newFlexAttributes.Add("redirect_create", redirectCreate.ToString());
        newFlexAttributes.Add("show_table", ShowTable.ToString());
        newFlexAttributes.Add("is_sdk_flex", IsSdkFlex.ToString());
        newFlexAttributes.Add("flex_designer", _flexDesigner.ToString());
        if (_isSaveProduct)
        {
            newFlexAttributes.Add("is_save_product", _isSaveProduct.ToString());
        }
        if(_flexRowId != 0)
        {
            newFlexAttributes.Add("base_obj_id", _flexRowId);
        }
        //check if NewFlexAttributes is different from FlexAttributes
        if(!newFlexAttributes.SequenceEqual(FlexAttributes))
        {
            FlexAttributes = newFlexAttributes;
            //updateFieldsHide
            JsRuntime.InvokeAsync<object>("oreports_app_flexdebug_"+_guid+".props.updateFieldsHide", fieldsHiddenListString);
            JsRuntime.InvokeAsync<object>("oreports_app_flexdebug_"+_guid+".props.updateFilters", FlexFilters, FilterSearch);
            JsRuntime.InvokeAsync<object>("oreports_app_flexdebug_"+_guid+".props.changeShowTable", ShowTable);
            if(IsListView){
                JsRuntime.InvokeVoidAsync("window.ListViewInstance", DotNetObjectReference.Create(ListView), GuidListView);
            }
            RefreshData();
            StateHasChanged();
        }
        
        if(mountFlex || !_isMounted)
        {
            _= MountFlexComponent();
            _isMounted = true;
        }
    }

    private string GetStyle(){
        string style = "";
        enumThemeIconStyle iconsStyles = enumThemeIconStyle.Solid;
        var userPreferences = AuthenticationService?.GetPreferencesUser();

        if(userPreferences != null)
        {
            iconsStyles = userPreferences.IconsStyles;
        }
        
        switch(iconsStyles){
            case enumThemeIconStyle.Solid:
                style = "fa-solid";
                break;
            case enumThemeIconStyle.Regular:
                style = "fa-regular";
                break;
            case enumThemeIconStyle.Light:
                style = "fa-light";
                break;
            case enumThemeIconStyle.Duotone:
                style = "fa-duotone";
                break;
            case enumThemeIconStyle.Thin:
                style = "fa-thin";
                    break;

        }

        return style;
    }

    private async Task MountFlexComponent()
    {
        try
        {
            var existMountFlex = await JsRuntime.InvokeAsync<bool>("existMountFlex");
            if(!existMountFlex)
            {
                //wait for mount flex and retry
                await Task.Delay(250);
                _ = MountFlexComponent();
                return;
            }
        }catch(Exception ex)
        {
            //wait for mount flex and retry
            await Task.Delay(250);
            _ = MountFlexComponent();
            return;
        }
        await JsRuntime.InvokeAsync<object>("window.MountFlex", _flexElementId);
        if(IsListView){
            await JsRuntime.InvokeVoidAsync("window.ListViewInstance", DotNetObjectReference.Create(ListView), GuidListView);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if(String.IsNullOrEmpty(GuidListView))
        {
            _guid = Guid.NewGuid().ToString().Replace("-","", StringComparison.Ordinal);
            
        }else{
            _guid = GuidListView;
        }
        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if(Business != null)
        {
            var response = await Business.Backend.Call("GetFlexDesigner").ConfigureAwait(true);
            if(response != null && response.Success)
            {
                _flexDesigner = response.Data;
            }
        }
        Init();
        await base.OnParametersSetAsync().ConfigureAwait(true);
    }

    void AddGraphic()
    {
        JsRuntime.InvokeAsync<object>("oreports_app_flexdebug_"+_guid+".props.toggleChartsModal");
    }

    void Configure()
    {
        Guid guid = Guid.NewGuid();
        JsRuntime.InvokeVoidAsync("oreports_app_flexdebug_"+_guid+".props.toggleConfigModal", guid.ToString().Replace("-","", StringComparison.Ordinal));
    }

    void SaveAndContinue()
    {
        JsRuntime.InvokeAsync<object>("oreports_app_flexdebug_"+_guid+".props.save");
    }

    void SaveAndClose()
    {
        JsRuntime.InvokeAsync<object>("oreports_app_flexdebug_"+_guid+".props.save", true);
    }

    public void RefreshData()
    {
        JsRuntime.InvokeAsync<object>("oreports_app_flexdebug_"+_guid+".props.fetchPreviewData");
        
    }
    
    public void ClearSelection()
    {
        JsRuntime.InvokeAsync<object>("window.oreports_app_table_flexdebug_"+_guid+".dataGridRef.instance.clearSelection");
    }

    async Task ExportToExcel()
    {
        string resourceTag = $"{_blName}.Plural";
        string resourceName = await UtilsManager.GetResource(resourceTag).ConfigureAwait(true);
        await JsRuntime.InvokeAsync<object>("oreports_app_table_flexdebug_"+_guid+".exportToExcel", resourceName).ConfigureAwait(true);
    }

    void GoToCreate()
    {
        NavigationService.NavigateTo($"/{_blName}/create/");
    }

    void GoToEdit()
    {
        string aditionalParams = "";
        if (_isSaveProduct)
        {
            aditionalParams = $"?is_product={_isSaveProduct}";
        }
        NavigationService.NavigateTo($"/{_blName}/edit/{_flexRowId}{aditionalParams}");
    }

    void GoToList()
    {
        NavigationService.NavigateTo($"/{_blName}/");
    }

    async Task OnClickDelete()
    {
        var dialog = await DialogService.OpenAsync("",
            ds => @<ConfirmDelete DialogService=@ds />,
            new DialogOptions(){ShowTitle=false, Width="400"});
        if(dialog != null && dialog == true){
            Business.BaseObj.Rowid = _flexRowId;
            await Business.DeleteAsync();
            NavigationService.NavigateTo($"/{_blName}/");
        }
    }
    public void Dispose(){
        JsRuntime.InvokeAsync<object>("window.unmountOReportsReact", _flexElementId);
    }
}