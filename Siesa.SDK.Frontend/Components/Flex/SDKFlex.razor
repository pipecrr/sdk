@using Siesa.SDK.Shared.Services
@using Newtonsoft.Json
@using Siesa.SDK.Shared.DTOS
@using Siesa.SDK.Shared.Utilities
@using Microsoft.Extensions.DependencyInjection

@if(_flexRowid != 0){
    <FlexComponent FlexRowid="@_flexRowid" FlexFilters="@_flexFilters" ShowTable="@ShowTable" IsSdkFlex="true" @key="@_guid"></FlexComponent>
}

@code{

    [Inject] 
    public IBackendRouterService BackendRouterService { get; set; }

    [Inject] 
    public IAuthenticationService AuthenticationService { get; set; }
    [Inject]
    public IServiceProvider ServiceProvider { get; set; }
    [Obsolete("This method is obsolete. Use Param IdFlex", false)]
    [Parameter]
    public int FlexRowid { get; set; }
    [Parameter]
    public Dictionary<string, object> FlexFilters { get; set; }
    [Parameter]
    public bool ShowTable { get; set; } = true;

    [Parameter]
    public string IdFlex { get; set; } = "";
    private int _flexRowid = 0;
    private string _guid = System.Guid.NewGuid().ToString();

    private string _flexFilters = "";    

    protected override async Task OnInitializedAsync(){
        await Init();
        await base.OnInitializedAsync().ConfigureAwait(true);
    }

    private async Task Init(){
        
        var blFlexProduct = BackendRouterService.GetSDKBusinessModel("BLFlexProduct", AuthenticationService);
        var response = await blFlexProduct.Call("GetFlexProduct", IdFlex, FlexRowid);
        if(response.Success){
            Type blFlexProductFront = Utilities.SearchType(blFlexProduct.Namespace+"."+blFlexProduct.Name, true);
            dynamic instanceFlex = ActivatorUtilities.CreateInstance(ServiceProvider,blFlexProductFront);

            var metadata = response.Data.GetType().GetProperty("Metadata").GetValue(response.Data);
            var rowid = response.Data.GetType().GetProperty("Rowid").GetValue(response.Data);
            var metadataObj = JsonConvert.DeserializeObject<SDKFlexRequestSaveData>(metadata);
            if(FlexFilters != null && metadataObj != null && metadataObj.filter_list != null && metadataObj.filter_list.Count > 0){
                foreach(SDKFlexFilters filter in metadataObj.filter_list){
                    var nameColumn = filter.name;
                    if(filter.type.Equals("ForeignKey")){
                        nameColumn = "Rowid"+nameColumn;
                    }
                    if(filter.path.Contains("::")){
                        var splitPath = filter.path.Split("::").Skip(1);
                        nameColumn = string.Join(".", splitPath)+ "." + nameColumn;
                    }                    
                    if(FlexFilters.TryGetValue(nameColumn, out var flexFilter)){
                        if(filter.type.Equals("DateField")){
                            flexFilter = DateTime.Parse(flexFilter.ToString()!);
                        }else if(filter.type.Equals("ForeignKey")){
                            var valStr = flexFilter.ToString();
                            if(valStr!.StartsWith("System.Collections.Generic.List")){
                                List<object> list = JsonConvert.DeserializeObject<List<object>>(JsonConvert.SerializeObject(flexFilter));
                                var listVal = new List<object>();
                                foreach (object item in list){
                                    var record = await instanceFlex.GetRecordByRowid(item,filter.module_name.ToString());
                                    if(record != null){
                                        listVal.Add(record);
                                    }
                                }
                                flexFilter = listVal;
                            }else{
                                continue;
                            }
                        }
                        filter.equal_from = flexFilter;
                    }
                    var filtersTo = nameColumn+"__to";
                    if(FlexFilters.TryGetValue(filtersTo, out var val)){
                        if(filter.type.Equals("DateField")){
                            val = DateTime.Parse(val.ToString()!).ToString("yyyy-MM-dd");
                        }
                        filter.to = val.ToString();
                    }
                }
                _flexFilters = JsonConvert.SerializeObject(metadataObj.filter_list);
            }

            _flexRowid = rowid;
        }
    }
    
}