@using System.Linq.Expressions
@using Microsoft.AspNetCore.Components;
@using Siesa.SDK.Frontend.Components.Visualization
@using Siesa.SDK.Components.Visualization

@inherits SDKComponent

<div class="position-relative">
    <input 
        type="@GetInputType()" 
        class="form-control form-control-sm pr-4 @CssClass" 
        value="@Value"
        placeholder="@Placeholder" 
        autocomplete="@GetAutoComplete()"
        data-automation-id="@GetAutomationId()"
        field-name="@FieldName"
        @onchange="@OnChange"
        maxlength="@GetMaxLength()"
        />

    <SDKButton CssClass="sdk_btn_pass" ResourceTag="ShowPassword" IconCssClass="fa-solid fa-eye" Click="@TogglePassword"/>

</div>

@code {
    [Parameter] public string Value { get; set; }
    [Parameter] public Action<string> ValueChanged { get; set; } = (value) => {};
    [Parameter] public Action OnFocusOut { get; set; } = () => { };
    [Parameter] public string Placeholder { get; set; }
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public bool ReadOnly { get; set; } = false;
    [Parameter] public bool Required { get; set; } = false;
    [Parameter] public string MaxLength { get; set; }
    [Parameter] public string CssClass { get; set; }
    [Parameter] public Expression<Func<string>> ValueExpression { get; set; }
    [Parameter] public string FieldName { get; set; }
    [Parameter] public bool AllowAutoComplete { get; set; } = false;

    private string _value = "";

    private bool IsPassword = true;
    private async Task OnChange(ChangeEventArgs args )
    {
        Value = args?.Value?.ToString();

        if(ValueChanged != null)
            ValueChanged.Invoke(Value);
            
       _ = InvokeAsync(() => StateHasChanged());
    }

    public void TogglePassword() {
        IsPassword = !IsPassword;
    }

    private string GetInputType()
    {
        if (IsPassword)
        {
            return "password";
        }
        return "text";
    }

    private string GetDisabled() {
        if (Disabled) {
            return "disabled";
        }
        return "";
    }

    private string GetReadOnly() {
        if (ReadOnly) {
            return "readonly";
        }
        return "";
    }

    private string GetMaxLength() {
        if (!string.IsNullOrEmpty(MaxLength)) {
            return $"maxlength=\"{MaxLength}\"";
        }
        return "";
    }
    private string GetAutoComplete() {
        if (AllowAutoComplete) {
            return "on";
        }
        return "off";
    }

    protected override string GetAutomationId()
    {
        if(string.IsNullOrEmpty(AutomationId))
        {
            AutomationId = FieldName;
        }
        return base.GetAutomationId();
    }

}