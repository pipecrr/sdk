@using System.Linq.Expressions
@using Siesa.SDK.Frontend.Components.Visualization
@using Siesa.SDK.Components.Visualization

@inherits SDKComponent

<input type="@GetInputType()" 
    class="form-control @CssClass" 
    Value="@Value"
    @onchange="@((e) => ValueChanged(e.Value.ToString()))"
    @onfocusout="@_OnFocusOut"
    placeholder="@Placeholder" 
    autocomplete="@GetAutoComplete()"
    data-automation-id="@GetAutomationId()"
    field-name="@FieldName"
    />


@* <DxTextBox 
    Text="@Value" 
    TextChanged="@ValueChanged" 
    NullText="@Placeholder"
    ReadOnly="@ReadOnly"
    CssClass="@CssClass"
    maxlength = "@MaxLength"
    Password="@Password"
    TextExpression="@ValueExpression"
    autocomplete="@GetAutoComplete()"
    data-automation-id="@GetAutomationId()"
    ClearButtonDisplayMode="@ClearButtonDisplayMode.Get()"
    field-name="@FieldName"
    @onfocusout="@_OnFocusOut"
>
@ChildContent
</DxTextBox> *@

@code {
    [Parameter] public string Value { get; set; }
    [Parameter] public Action<string> ValueChanged { get; set; } = (value) => {};
    [Parameter] public Action OnFocusOut { get; set; } = () => { };
    [Parameter] public string Placeholder { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public bool ReadOnly { get; set; }
    [Parameter] public bool Required { get; set; }
    [Parameter] public string MaxLength { get; set; }
    [Parameter] public string CssClass { get; set; }
    [Parameter] public Expression<Func<string>> ValueExpression { get; set; }
    [Parameter] public string FieldName { get; set; }
    [Parameter] public bool AllowAutoComplete { get; set; } = false;

    private bool IsPassword = true;

    public void TogglePassword() {
        IsPassword = !IsPassword;
    }

    private string GetInputType()
    {
        if (IsPassword)
        {
            return "password";
        }
        return "text";
    }

    private string GetDisabled() {
        if (Disabled) {
            return "disabled";
        }
        return "";
    }

    private string GetReadOnly() {
        if (ReadOnly) {
            return "readonly";
        }
        return "";
    }

    private string GetRequired() {
        if (Required) {
            return "required";
        }
        return "";
    }

    private string GetMaxLength() {
        if (!string.IsNullOrEmpty(MaxLength)) {
            return $"maxlength=\"{MaxLength}\"";
        }
        return "";
    }
    private string GetAutoComplete() {
        if (AllowAutoComplete) {
            return "on";
        }
        return "off";
    }

    protected override string GetAutomationId()
    {
        if(string.IsNullOrEmpty(AutomationId))
        {
            AutomationId = FieldName;
        }
        return base.GetAutomationId();
    }

    private async Task _OnFocusOut(){
        if(OnFocusOut != null){
            OnFocusOut();
        }
    }
}