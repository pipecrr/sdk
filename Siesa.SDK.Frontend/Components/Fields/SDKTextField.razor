@using System.Linq.Expressions
@inherits SDKComponent

<DxMemo 
    Text="@Value" 
    TextChanged="@ValueChanged" 
    NullText="@Placeholder"
    ReadOnly="@ReadOnly"
    CssClass="@GetCssClass()"
    maxlength = "@MaxLength"
    data-automation-id="@GetAutomationId()"
    field-name="@FieldName"
    ClearButtonDisplayMode="@ClearButtonDisplayMode.Get()"
    TextExpression="@ValueExpression"
    @onfocusout="@_OnFocusOut"
    tabindex="1"
>
@ChildContent
</DxMemo>

@code {
    [Parameter] public string Value { get; set; }
    [Parameter] public Action<string> ValueChanged { get; set; } = (value) => {};
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public string Placeholder { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public bool ReadOnly { get; set; }
    [Parameter] public bool Required { get; set; }
    [Parameter] public string IsPassword { get; set; }
    [Parameter] public string MaxLength { get; set; }
    [Parameter] public string CssClass { get; set; }
    [Parameter] public string FieldName { get; set; }
    [Parameter] public Expression<Func<string>> ValueExpression { get; set; }
    [Parameter] public SDKClearButtonDisplayMode ClearButtonDisplayMode { get; set; }
    [Parameter] public Action OnFocusOut { get; set; } = () => { };

    private string GetCssClass()
    {
        var cssClass = CssClass;
        if(Required && string.IsNullOrEmpty(Value))
        {
            cssClass += " invalid";
        }
        return cssClass;
    }

    protected override string GetAutomationId()
    {
        if(string.IsNullOrEmpty(AutomationId))
        {
            AutomationId = FieldName;
        }
        return base.GetAutomationId();
    }

    private async Task _OnFocusOut()
    {
        if(OnFocusOut != null){
            OnFocusOut();
        }
    }

    
}