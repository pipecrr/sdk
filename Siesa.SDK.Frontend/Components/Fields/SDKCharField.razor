@using System.Linq.Expressions
@using Siesa.SDK.Frontend.Components.Visualization
@using Siesa.SDK.Components.Visualization

@inherits SDKComponent

@if(Password)
{
    <SDKPasswordField
            Value="@Value"
            Placeholder="@Placeholder"
            ReadOnly="@ReadOnly"
            CssClass="@CssClass"
            MaxLength = "@MaxLength"
            AllowAutoComplete="@AllowAutoComplete"
            FieldName="@FieldName"
            ValueChanged="@ValueChanged"
            Disabled= "@Disabled" 
    />
}
else
{
    <DxTextBox 
        Text="@Value" 
        TextChanged="@ValueChanged" 
        NullText="@Placeholder"
        ReadOnly="@ReadOnly"
        CssClass="@CssClass"
        maxlength = "@MaxLength"
        Password="@Password"
        TextExpression="@ValueExpression"
        autocomplete="@GetAutoComplete()"
        data-automation-id="@GetAutomationId()"
        ClearButtonDisplayMode="@ClearButtonDisplayMode.Get()"
        field-name="@FieldName"
        @onfocusout="@_OnFocusOut"
        @ref="_textBox"
    >
    @ChildContent
    </DxTextBox>
}

@code {
    [Parameter] public string Value { get; set; }
    [Parameter] public Action<string> ValueChanged { get; set; } = (value) => {};
    [Parameter] public Action OnFocusOut { get; set; } = () => { };
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public string Placeholder { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public bool ReadOnly { get; set; }
    [Parameter] public bool Required { get; set; }
    [Parameter] public bool Password { get; set; }
    [Parameter] public string MaxLength { get; set; }
    [Parameter] public string CssClass { get; set; }
    [Parameter] public Expression<Func<string>> ValueExpression { get; set; }
    [Parameter] public SDKClearButtonDisplayMode ClearButtonDisplayMode { get; set; }
    [Parameter] public string FieldName { get; set; }
    [Parameter] public bool AllowAutoComplete { get; set; } = false;
    [Parameter] public bool AutoFocus { get; set; }
    private DxTextBox _textBox;
    private string GetAutoComplete() {
        if (AllowAutoComplete) {
            return "on";
        }
        return "off";
    }

    protected override string GetAutomationId()
    {
        if(string.IsNullOrEmpty(AutomationId))
        {
            AutomationId = FieldName;
        }
        return base.GetAutomationId();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if(AutoFocus && firstRender)
        {
            await Task.Delay(1000);
            await _textBox.FocusAsync();
        }
    }

    private async Task _OnFocusOut(){
        if(OnFocusOut != null){
            OnFocusOut();
        }
    }
}