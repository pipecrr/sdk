@using Siesa.SDK.Frontend.Application
@using Siesa.SDK.Shared.Services
@inject IResourceManager ResourceManager
@inject IAuthenticationService AuthenticationService

<DxFormLayoutItem Caption="@Label"
                ColSpanMd="@ColSizeMd"
                ColSpanLg="@ColSizeLg"
                ColSpanXl="@ColSizeXl"
                ColSpanSm="@ColSizeSm"
                CaptionCssClass="@CaptionCssClass"
                CssClass="@GetCssClass()"
                ColSpanXs="@ColSizeXs">
    <Template>
        <div class="@GetInternalCssClass()" style="@GetInternalStyle()">
        @ChildContent
        </div>
    </Template>
</DxFormLayoutItem>

@code {
    private string Label { get; set; }
    [Parameter] public bool ShowLabel { get; set; } = true;
    [Parameter] public string ResourceTag { get; set; }
    [Parameter] public Int64 RowidResource { get; set; }
    [Parameter] public int ColSizeMd { get; set; }
    [Parameter] public int ColSizeLg { get; set; }
    [Parameter] public int ColSizeXl { get; set; }
    [Parameter] public int ColSizeSm { get; set; }
    [Parameter] public int ColSizeXs { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public bool IsGroup { get; set; }
    [Parameter] public bool GroupTopBorder { get; set; }
    [Parameter] public bool GroupBottomBorder { get; set; }
    [Parameter] public bool GroupLeftBorder { get; set; }
    [Parameter] public bool GroupRightBorder { get; set; }
    [Parameter] public int GroupMinHeight { get; set; }

    [Parameter] public bool ShowRequiredSymbol { get; set; }

    private string CaptionCssClass { get; set; }

    private async Task<string> GetText(){
        if(!String.IsNullOrEmpty(ResourceTag)){
            return await ResourceManager.GetResource(ResourceTag, AuthenticationService);
        }
        if(RowidResource != 0 && RowidResource != null){
            return await ResourceManager.GetResource(Convert.ToInt64(RowidResource), AuthenticationService);
        }
        return Label;
    }

    protected override async Task OnInitializedAsync()
    {
        if(ShowLabel)
        {
            Label = ResourceTag;
            await base.OnInitializedAsync();
            Label = await GetText();
        }else{
            Label = "";
        }

        if(ShowRequiredSymbol){
            CaptionCssClass = $"{CaptionCssClass} required-caption";
        }

        if(IsGroup)
        {
            CaptionCssClass = $"{CaptionCssClass} sdk-formlayout-group-title";
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if(ShowLabel)
        {
            Label = ResourceTag;
            await base.OnParametersSetAsync();
            Label = await GetText();
        }else{
            Label = "";
        }
    }

    private string GetAutomationId()
    {
        if(!string.IsNullOrEmpty(ResourceTag)){
            return $"{this.GetType().Name}_{ResourceTag}";
        }
        return $"{this.GetType().Name}_{Label}";
    }

    private string GetCssClass()
    {
        var result = GetAutomationId();
        if(IsGroup)
        {
            result = $"{result} whcm_row";
            if(GroupTopBorder)
            {
                result = $"{result} sdk-formlayout-group-border-top";
            }
            if(GroupBottomBorder)
            {
                result = $"{result} sdk-formlayout-group-border-bottom";
            }
            if(GroupLeftBorder)
            {
                result = $"{result} sdk-formlayout-group-border-left";
            }
            if(GroupRightBorder)
            {
                result = $"{result} sdk-formlayout-group-border-right";
            }
        }
        return result;
    }

    private string GetInternalCssClass()
    {
        if(IsGroup)
        {
            return "whcm_row";
        }
        return "";
    }

    private string GetInternalStyle()
    {
        if(IsGroup)
        {
            return $"min-height: {GroupMinHeight}px;";
        }
        return "";
    }

    
}