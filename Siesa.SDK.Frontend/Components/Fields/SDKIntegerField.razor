@typeparam TInt
@using System.Globalization
@using System.Linq.Expressions
@inherits SDKComponent
<DxSpinEdit 
    Value="@Value" 
    ValueChanged="@ValueChanged" 
    NullText="@Placeholder"
    ReadOnly="@ReadOnly"
    CssClass="@CssClass"
    maxlength = "@MaxLength"
    Mask="@Mask"
    ValueExpression="@ValueExpression"
    ClearButtonDisplayMode="@ClearButtonDisplayMode.Get()"
    field-name="@FieldName"
    data-automation-id="@GetAutomationId()"
    @onfocusout="@_OnFocusOut"
>
@if(Culture != null){
    <DxNumericMaskProperties Culture="@Culture" />
}
@ChildContent
</DxSpinEdit>

@code {
    [Parameter] public TInt Value { get; set; }
    [Parameter] public Action<TInt> ValueChanged { get; set; } = (value) => {};
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public string Placeholder { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public bool ReadOnly { get; set; }
    [Parameter] public bool Required { get; set; }
    [Parameter] public string IsPassword { get; set; }
    [Parameter] public string MaxLength { get; set; }
    [Parameter] public string CssClass { get; set; }
    [Parameter] public string Mask { get; set; }
    [Parameter] public SDKClearButtonDisplayMode ClearButtonDisplayMode { get; set; }
    [Parameter] public string FieldName { get; set; }

    [Parameter] public CultureInfo Culture { get; set; }
    [Parameter] public Expression<Func<TInt>> ValueExpression { get; set; }
    
    [Parameter] public Action OnFocusOut { get; set; } = () => { };


    protected override string GetAutomationId()
        {
            if(string.IsNullOrEmpty(AutomationId))
            {
                AutomationId = FieldName;
            }
            return base.GetAutomationId();
        }
    private async Task _OnFocusOut(){
        if(OnFocusOut != null){
            OnFocusOut();
        }
    }
    
}