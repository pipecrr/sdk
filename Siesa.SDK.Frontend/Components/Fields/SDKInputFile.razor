@using Microsoft.AspNetCore.Components.Forms
@using Siesa.SDK.Frontend.Components
@using Siesa.SDK.Frontend.Components.Visualization
@using Siesa.SDK.Shared.Application
@using Microsoft.Extensions.DependencyInjection
@using Siesa.SDK.Shared.Services
@using Siesa.SDK.Shared.Utilities
@using Microsoft.AspNetCore.Http
@using System.IO
@using System.Threading
@using Siesa.SDK.Shared.DTOS

@inherits SDKComponent

@inject IJSRuntime JSRuntime
@inject IBackendRouterService BackendRouterService
@inject IAuthenticationService AuthenticationService
@inject IServiceProvider ServiceProvider

<div class="@CssClass">
    @if(ShowPreview){
        <div class="file-upload-container">
            @if(!_IsLoading && !IsDetail){
                <div class="input-container">
                    <InputFile OnChange="@_OnChange" multiple="@IsMultiple" style="width: 300px; height: 200px; " accept="@FilterType" @ref="_refinputFile"/>
                </div>
            }
            @if((RowidAttachmentDetail != 0 || _FilesSelected.Count > 0) && !_IsLoading){
                <img src="@_UrlImage" height="100%" width="100%">
            }else{
                <img @ref="previewImageElem" height="100%" width="100%"/>
            }
            <div class="file-upload-icon">
                @if(_IsLoading){
                    <SDKIcon Name="fa-spinner fa-spin"/>
                }else if(!IsDetail){
                    <SDKIcon Name="fa-arrow-up-from-bracket" OnClick="@ClickIcon"></SDKIcon>
                }
            </div>
        </div>
    }
    @if(IsMultiple){
        <div class="container">
            <div class="row d-flex justify-content-start px-2 py-3">
                @foreach (var url in _FilesSelected)
                {
                    <div class="col-4 img-container">
                        <img class="sdk-preview-multi" src="@url.Url" onclick="@(() => ClickImg(url))" >
                        @if(!IsDetail){
                            <button @onclick:preventDefault class="close-preview" onclick="@(()=> CloseItem(url))">
                                <SDKIcon Name="fa-xmark" CssClass="icon-close"/>
                            </button>
                        }
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {

     public InputFile? _refinputFile;
    private ElementReference previewImageElem;

    private InputFileChangeEventArgs InputFile;
    [Parameter] public Action<InputFileChangeEventArgs> OnInputFile {get; set;}
    [Parameter] public bool IsMultiple {get; set;}

    [Parameter] public string FilterType {get; set;} = "image/*";

    [Parameter] public string CssClass {get; set;}

    [Parameter] public string BusinessName {get; set;}

    [Parameter] public int RowidAttachmentDetail {get; set;}
    [Parameter] public int RowidAttachmentRelationship {get; set;}
    [Parameter] public bool SaveBytes {get; set;} = true;
    [Parameter] public int MaxSize {get; set;} = 3000000;
    [Parameter] public bool IsDetail {get; set;}
    [Parameter] public bool ShowPreview {get; set;} = true;
    
    private List<SDKInputFieldDTO> _FilesSelected = new ();
    private List<SDKInputFieldDTO> _FilesToSave = new ();
    private List<int> _FilesDeleted = new ();
    private string _UrlImage = "";

    private dynamic BusinessObj;
    private bool _IsLoading;
    
    private CancellationTokenSource _cancellationToken;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();  
    }
    
    protected override async Task OnParametersSetAsync()
    {
        if (_cancellationToken != null)
        {
            _cancellationToken.Cancel();
        }
        _cancellationToken = new CancellationTokenSource();
        await Task.Delay(500, _cancellationToken.Token);
        _IsLoading = true;
        if(IsMultiple && _FilesSelected.Count == 0){
            var response = await BackendRouterService.GetSDKBusinessModel("BLAttachmentDetail", AuthenticationService).Call("GetAttachmentsDetail", RowidAttachmentRelationship, SaveBytes);
            if(response.Success && response.Data != null && response.Data.Count > 0){
                var attachments = response.Data;
                foreach (var item in attachments)
                {
                    SDKInputFieldDTO inputFieldDTO = new (){
                        Url = item.Url,
                        RowidAttachmentDetail = item.Rowid
                    };
                    _FilesSelected.Add(inputFieldDTO);
                }
                _UrlImage = _FilesSelected[0].Url;
            }
        }else if(RowidAttachmentDetail > 0){
            var response = await BackendRouterService.GetSDKBusinessModel("BLAttachmentDetail", AuthenticationService).Call("GetAttachmentDetail", RowidAttachmentDetail);
            if(response.Success && response.Data != null){
                var attachment = response.Data;
                SDKInputFieldDTO inputFieldDTO = new (){
                    Url = attachment.Url,
                    RowidAttachmentDetail = attachment.Rowid
                };
                _UrlImage = inputFieldDTO.Url;
            }
        }
        _IsLoading = false;
        StateHasChanged();
        base.OnParametersSetAsync();
    }

    private async Task GetPreviewFile()
    {
        if(_refinputFile != null)
        {
            await JSRuntime.InvokeVoidAsync("previewImage", _refinputFile!.Element, previewImageElem);
        }
        StateHasChanged();
    }
    private void ClickIcon()
    {
        JSRuntime.InvokeVoidAsync("clickInputFile", _refinputFile.Element);
    }

    private void ClickImg(SDKInputFieldDTO sdkInputFieldDTO){
        var url = sdkInputFieldDTO.Url;
        _UrlImage = url;
        StateHasChanged();
    }

    private async Task _OnChange(InputFileChangeEventArgs _InputFile)
    {
        if(_InputFile != null)
        {
            InputFile = _InputFile;
            if(IsMultiple){
                var files = InputFile.GetMultipleFiles();
                foreach (var itemFile in files)
                {
                    var file = await ConvertToIFormFile(itemFile);
                    var urlImage = await GetFileUrl(file);

                    SDKInputFieldDTO inputFieldDTO = new (){
                        Url = urlImage,
                        File = itemFile
                    };
                    _FilesSelected.Add(inputFieldDTO);
                    _FilesToSave.Add(inputFieldDTO);
                }
                _UrlImage = _FilesSelected[0].Url;
            }else{
                await GetPreviewFile();
            }
            OnInputFile?.Invoke(_InputFile);
        }
    }

    private async Task<string> GetFileUrl(IFormFile file)
    {
        var ms = new MemoryStream();
        await file.CopyToAsync(ms);
        var base64 = Convert.ToBase64String(ms.ToArray());
        var url = $"data:{file.ContentType};base64,{base64}";

        return url;
    }

    public void CloseItem(SDKInputFieldDTO sdkInputFieldDTO)
    {
        var url = sdkInputFieldDTO.Url;
        _FilesSelected.RemoveAll(x => x.Url == url);
        _FilesToSave.RemoveAll(x => x.Url == url);
        if(sdkInputFieldDTO.RowidAttachmentDetail > 0){
            _FilesDeleted.Add(sdkInputFieldDTO.RowidAttachmentDetail);
        }
        if(_FilesSelected.Count > 0){
            _UrlImage = _FilesSelected[0].Url;
        }else{
            _UrlImage = "";
        }
        StateHasChanged();
    }

    public async Task SDKUploadFile()
    {
        try{
            await IntanceBusinessObj();
            if (BusinessObj == null)
            {
                return;
            }

            if(IsMultiple){
                if(RowidAttachmentRelationship == 0){
                    throw new Exception("Debe especificar el RowidAttachmentRelationship");
                }
                if(_FilesDeleted.Count > 0){
                    var response = await BackendRouterService.GetSDKBusinessModel("BLAttachmentDetail", AuthenticationService).Call("DeleteMultiAttachmentDetail", _FilesDeleted);
                    if(!response.Success){
                        throw new Exception(response.Errors.First());
                    }
                }
                foreach (var itemFile in _FilesToSave)
                {
                    await SaveAttachment(itemFile.File, itemFile);
                    _FilesToSave = new ();
                }
            }else{
                await SaveAttachment(InputFile.File);
            }
        }catch(Exception ex){
            Console.WriteLine("Prueba "+ex.Message);
        }
    }

    private async Task SaveAttachment(IBrowserFile itemFile, SDKInputFieldDTO item = null){
        var formFile = await ConvertToIFormFile(itemFile);
        var fileUploadDTO = new SDKFileUploadDTO();

        if(SaveBytes){
            fileUploadDTO = await BusinessObj.UploadSingleByte(formFile);
        }else{
            fileUploadDTO = await BusinessObj.UploadSingle(formFile);
        }

        if (fileUploadDTO != null)
        {
            fileUploadDTO.RowidAttachment = RowidAttachmentRelationship;
            dynamic saveFile;

            if (RowidAttachmentDetail > 0)
            {
                saveFile = await BusinessObj.SaveAttachmentDetail(fileUploadDTO, RowidAttachmentDetail);
            }
            else
            {
                saveFile = await BusinessObj.SaveAttachmentDetail(fileUploadDTO);
                if(!IsMultiple){
                    RowidAttachmentDetail = saveFile;
                }else{
                    item.RowidAttachmentDetail = saveFile;
                }
            }
        }
    }

    private async Task<IFormFile> ConvertToIFormFile(IBrowserFile browserFile)
    {
        var ms = new MemoryStream();
        if(browserFile.Size > MaxSize){
            throw new Exception("El archivo es demasiado grande");
        }

        await browserFile.OpenReadStream(maxAllowedSize: MaxSize).CopyToAsync(ms);
        
        var file = new FormFile(ms, 0, ms.Length, null, browserFile.Name)
        {
            Headers = new HeaderDictionary(),
            ContentType = (browserFile.ContentType == "" ? "application/octet-stream": browserFile.ContentType)
        };

        return file;
    }
    

    private async Task IntanceBusinessObj()
    {
        if (ServiceProvider != null)
        {
            var businessModel = BackendRouterService.GetSDKBusinessModel(BusinessName, null);
            if (businessModel != null)
            {
                BusinessObj = ActivatorUtilities.CreateInstance(ServiceProvider,
                Utilities.SearchType($"{businessModel.Namespace}.{businessModel.Name}", true));
            }
        }
    }
}