@using Radzen;
@using Siesa.SDK.Frontend.Components.Visualization
@typeparam TItem

<RadzenDataGrid 
    AllowFiltering="@AllowFiltering" 
    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
    FilterMode="FilterMode.Advanced" 
    AllowPaging="@AllowPaging" 
    PageSize="@PageSize"
    PagerHorizontalAlign="HorizontalAlign.Center" 
    AllowSorting="@AllowSorting" 
    Data="@Data" 
    TItem="@TItem" 
    IsLoading="@Loading"
    Count="@Count"
    Columns="@Columns"
    LoadData="@LoadData"
    AllowVirtualization="@AllowVirtualization"
    ShowPagingSummary="@ShowPagingSummary"
    class="whcm_table"
    PageSizeOptions="@AllowedPageSizes"
    SelectionMode="@SelectionMode.Get()"
    Value="@Value"
    Visible="@(!CardView)"
    ValueChanged="@ValueChanged"
    AllowColumnResize="@AllowColumnResize"
    @ref="_grid">
    <EmptyTemplate>
        @if(EmptyTemplate != null){
            @EmptyTemplate
        }else{
            <div class="sdk-empty-list">
                <i class="fa-solid fa-eye-slash"></i>
                <p><ResourceViewer ResourceTag="Generic.NoData" /></p>
            </div>
        }
    </EmptyTemplate>
</RadzenDataGrid>

@if (CardView)
{
     <div class="row">
        @if(Data != null)
        {
            @foreach (var item in Data)
            {
                <div class="col-12 col-sm-12 col-md-6 mt-3 col-xl-4">
                    <SDKCard StyleCss="sdk_card d-flex flex-row">
                        <div class="sdk_button_box p-1">
                            @(GetActionColumn()(item))
                        </div>
                        <div class="col pt-2">
                            <div class="row">
                            @foreach (var column in _grid.ColumnsCollection.Where(x=> x.CssClass != "internal-sdk-gridcolumn-action"))
                            {
                                <div class="col-12 col-sm-6">
                                    <label class="col-form-label col-form-label-sm font-weight-bold">
                                        @column.Title 
                                    </label> 
                                    @if(column.Template != null)
                                    {
                                        <p class="font_size_087">@(column.Template(item))</p>
                                    }else{
                                        <p class="font_size_087">@GetValue(item, column.Property)</p>
                                    }
                                </div> 
                            }
                            </div>
                        </div>
                    </SDKCard>
                </div>
            }
        }
    </div>
}

@code {
    [Parameter] public RenderFragment? EmptyTemplate { get; set; }
    [Parameter] public RenderFragment? Columns { get; set; }
    [Parameter] public bool AllowFiltering { get; set; }
    [Parameter] public bool Loading { get; set; }
    [Parameter] public int PageSize { get; set; } = 10;
    [Parameter] public bool AllowSorting { get; set; }
    [Parameter] public bool AllowPaging { get; set; }
    [Parameter] public IEnumerable<TItem> Data { get; set; }
    [Parameter] public int Count { get; set; }
    [Parameter] public EventCallback<Radzen.LoadDataArgs> LoadData { get; set; }
    [Parameter] public bool ShowPagingSummary { get; set; }
    [Parameter] public IEnumerable<int> AllowedPageSizes { get; set; } = new int[] { 10, 20, 50, 100 };

    [Parameter] public SDKSelectionMode SelectionMode {get; set;}
    [Parameter] public IList<TItem> Value {get; set;} 
    [Parameter] public EventCallback<IList<TItem>> ValueChanged {get; set;}

    [Parameter] public bool CardView {get; set;} = false;

    [Parameter] public bool AllowVirtualization {get; set;}
    [Parameter] public bool AllowColumnResize  {get; set;}

    private RadzenDataGrid<TItem> _grid;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (Data != null && !LoadData.HasDelegate)
        {
            Count = Data.Count();
        }
    }

    private object GetValue(TItem item, string fieldName)
    {
       return item.GetType().GetProperty(fieldName).GetValue(item);
    }

    private RenderFragment<TItem> GetActionColumn()
    {
       var query = _grid.ColumnsCollection.Where(x=> x.CssClass == "internal-sdk-gridcolumn-action").SingleOrDefault();

       if (query != null)
       {
        var childContent = query.Template;
        return childContent;
       }
       return null;
    }

    public void Reload()
    {
        _grid.Reload();
    }

}