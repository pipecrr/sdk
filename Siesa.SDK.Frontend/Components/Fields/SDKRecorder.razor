@using Siesa.SDK.Frontend.Components.Visualization
@using Siesa.SDK.Components.Visualization
@using Microsoft.AspNetCore.Http
@using System.IO
@inject UtilsManager UtilsManager 
@inject IJSRuntime jsRuntime
@inject SDKNotificationService NotificationService

<div class="m-5 sdk-render">
    <div class="main-controls">
        <SDKButton RenderStyle="@style" ResourceTag="@resourceAction" Click="@ActionRecord"/>
        <canvas class="visualizer" height="60" hidden="@notRecording" width="100%"></canvas>
    </div>
    <audio src="@url" autoplay controls hidden="@recording" width="100%"></audio>    
</div>


@code{
    SDKButtonRenderStyle style = SDKButtonRenderStyle.Primary;
    string recordButton {get; set;} = "record";
    string url {get; set;}
    bool recording {get; set;} = false;
    bool notRecording {get; set;} = true;
    string resourceAction {get; set;}
    [Parameter] public Action<byte[]> GetAudio {get; set;}
    private IJSObjectReference _jsModule;

    protected override async Task OnInitializedAsync()
    {
        resourceAction = await UtilsManager.GetResource("Action.SDKRecorder.Record");
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender || _jsModule == null){
            await jsRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/Siesa.SDK.Frontend/vendor/recorderjs/recorder.js");
            _jsModule = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/Siesa.SDK.Frontend/Components/Fields/SDKRecorder.razor.js");
        }
    }
    private async Task ActionRecord()
    {
        if (recording){
            await Stop();
            resourceAction = await UtilsManager.GetResource("Action.SDKRecorder.Record");
        }else{
            resourceAction = await UtilsManager.GetResource("Action.SDKRecorder.Stop");
            await Record();
        }
        StateHasChanged();
    }

    private async Task Record()
    {
        var hasAudioDevice = await _jsModule.InvokeAsync<bool>("hasAudioDevice");
        if(hasAudioDevice){
            var hasPermission = await _jsModule.InvokeAsync<bool>("startRecording");
            if(hasPermission){                
                recording = true;            
                notRecording = false;
                recordButton = "recording";
                style = SDKButtonRenderStyle.Danger;
                url = "";
            }else{
                resourceAction = await UtilsManager.GetResource("Action.SDKRecorder.Record");
                NotificationService.ShowWarning("Custom.SDKRecorder.DontHavePermission");
            }
        }else{
            resourceAction = await UtilsManager.GetResource("Action.SDKRecorder.Record");
            NotificationService.ShowWarning("Custom.SDKRecorder.DontHaveAudioDevice");
        }
    }

    private async Task Stop()
    {
        recordButton = "record";
        recording = false;
        notRecording = true;
        style = SDKButtonRenderStyle.Primary;
        await _jsModule.InvokeVoidAsync("stopRecording", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public async Task setAudio(string blob, string base64){
        url = blob;
        var base64Data = base64.Split(';')[1].Split(',')[1];
        byte[] bytes = Convert.FromBase64String(base64Data);
        GetAudio?.Invoke(bytes);
        StateHasChanged();
    }
}