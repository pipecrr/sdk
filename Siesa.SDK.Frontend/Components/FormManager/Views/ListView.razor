@using SDK.Components.Visualization
@using Siesa.SDK.Frontend.Components.FormManager.Fields
@using Siesa.SDK.Entities
@using Siesa.SDK.Frontend.Components.FormManager.Views
@using Siesa.SDK.Frontend.Components.Visualization
@using Siesa.SDK.Frontend.Components.Fields
@using Siesa.SDK.Frontend.Components.Flex
@using Newtonsoft.Json;
@using Siesa.SDK.Shared.Extensions
@inject UtilsManager UtilManager

@if (Loading == true)
{
    <ResourceViewer ResourceTag="Custom.Generic.Loading" />
}
else if(!string.IsNullOrEmpty(ErrorMsg))
{
    <ErrorsContainer ErrorMsg="@ErrorMsg"/>
}
else
{
    @if(IsSubpanel){
        UseFlex = false;
    }
    @if(ShowSearchForm && HasSearchViewdef)
    {
        <div class="@StyleSearchForm">
            <FreeForm 
                @ref="@SearchFormRef" 
                @key="@GetFormKey()"  
                FormID="@SearchFormID" 
                Viewdef="search" 
                BusinessName="@BusinessName" 
                BusinessObj="@BusinessObj" 
                SetTopBar="false" 
                ValidateForm="false" 
                OnSubmit="@OnClickSearch"
                OnReady="@OnReadySearchForm"
                />
            <div class="d-flex flex-wrap justify-content-center">
                @if(FieldsHidden.Any())
                {
                    <div class="col-xl-2 col-lg-3 col-md-4 col-sm-6 col-12">
                        <SDKButton CssClass="w-100 mb-3 mb-sm-0" RenderStyle="SDKButtonRenderStyle.Secondary" Click="@OpenModalFilter">
                            <ResourceViewer ResourceTag="Action.AddFilter" />
                        </SDKButton>
                    </div>
                }
                <div class="col-xl-2 col-lg-3 col-md-4 col-sm-6 col-12">
                    <SDKButton form="@SearchFormID" CssClass="w-100" RenderStyle="SDKButtonRenderStyle.Primary" SubmitFormOnClick="true" Click="@OnClickSearch">
                        @if(LoadingSearch)
                        {
                            <i class="mr-1 fas fa-spinner fa-pulse"></i>
                        }
                        <ResourceViewer ResourceTag="Action.Search" />
                    </SDKButton>
                </div>
            </div>
        </div>
    }

    @if(ShowList && !UseFlex)
    {
        <RadzenDataGrid 
            AllowFiltering="true" 
            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
            FilterMode="FilterMode.Advanced" 
            AllowPaging="@(!ListViewModel.InfiniteScroll)" 
            PageSize="ListViewModel.Paging.PageSize"
            PagerHorizontalAlign="HorizontalAlign.Center" 
            AllowSorting="true" 
            Data="@data" 
            TItem="object" 
            IsLoading="@LoadingData"
            @ref="@_gridRef" 
            Count="@count" 
            LoadData="@LoadData" 
            AllowVirtualization="@(ListViewModel.InfiniteScroll)"
            ShowPagingSummary="true"
            PageSizeOptions="ListViewModel.Paging.AllowedPageSizes" 
            SelectionMode="@SelectionMode"
            AllowRowSelectOnRowClick="true"
            Value=@SelectedObjects
            ValueChanged="((objects) => OnSelectionChanged(objects))"
            class="whcm_table"
            AllowColumnResize="true"
            FilterText="Filtrar"
            ContainsText="Contiene"
            EqualsText="Igual"
            NotEqualsText="Diferente"
            GreaterThanText="Mayor que"
            GreaterThanOrEqualsText="Mayor o igual que"
            LessThanText="Menor que"
            EmptyText="No hay datos"
            IsNullText="Es nulo"
            IsNotNullText="No es nulo"
            ColumnsText="Columnas"
            IsEmptyText="Está vacío"
            EndsWithText="Termina con"
            PageSizeText="Tamaño de página"
            AllColumnsText="Todas las columnas"
            GroupPanelText="Arrastre una columna aquí para agrupar por esa columna"
            IsNotEmptyText="No está vacío"
            OrOperatorText="O"
            StartsWithText="Empieza con"
            AndOperatorText="Y"
            ApplyFilterText="Aplicar"
            ClearFilterText="Limpiar"
            ColumnsShowingText="Columnas mostradas"
            DoesNotContainText="No contiene"
            LessThanOrEqualsText="Menor o igual que"
            EnumFilterSelectText="Seleccione"
            PagingSummaryFormat="Página {0} de {1} ({2} registros)"

            @key="needUpdate"
            >
            <EmptyTemplate>
                <div class="sdk-empty-list">
                    <i class="fa-solid fa-eye-slash"></i>
                    <p><ResourceViewer ResourceTag="Custom.Generic.NoData" /></p>
                </div>
            </EmptyTemplate>
            <Columns>
            @if(IsMultiple){
                <RadzenDataGridColumn TItem="object" Width="50px" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" HeaderCssClass="grid-column-action">
                    <HeaderTemplate>
                        <SDKBooleanField Value="@(SelectedObjects != null && SelectedObjects.Count>0)" Enabled="true" ValueChanged="(value => {
                            SelectedObjects = value ? _gridRef.Data.ToList() : null;
                            if(value){
                                OnSelectionChanged(_gridRef.Data.ToList());
                            }else{
                                OnSelectionChanged(SelectedItems);
                            }
                            })">
                        </SDKBooleanField>                        
                    </HeaderTemplate>
                    <Template Context="data">
                        <div class="d-flex justify-content-center">
                            <SDKBooleanField Value="@(SelectedObjects != null && SelectedObjects.Contains(data))" Enabled="true" ValueChanged="@(args => {  _gridRef.SelectRow(data); })">
                            </SDKBooleanField>
                        </div>
                    </Template>
                </RadzenDataGridColumn>
            }
            @if(ListViewModel.ShowActions)
            {
                <RadzenDataGridColumn TItem="object" Title="Acciones" Width="@WithActions" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" HeaderCssClass="grid-column-action">
                    <HeaderTemplate>
                        <div class="untruncate-grid-column-action">
                            @if(IsSubpanel && AllowCreate && CanCreate){
                            <span
                                class="oi oi-plus cursor-pointer" @onclick="() => GoToCreate()"></span>
                            }else{
                                <span><ResourceViewer ResourceTag="Action.Generic.Actions" /></span>
                            }    
                        </div>
                    </HeaderTemplate>
                    <Template Context="data">
                        <div class="action-buttons d-flex justify-content-center">
                            @if(CanEdit && AllowEdit){
                                <button class="btn btn-sm layout_btn_standar-sm ml-1" @onclick="() => GoToEdit(((IBaseSDK)data).GetRowid())"><i
                                class="fa-solid fa-pen"></i></button>
                            }
                            @if(!ShowLinkTo && AllowDetail){
                                <button class="btn btn-sm layout_btn_standar-sm ml-1" @onclick="() => GoToDetail(((IBaseSDK)data).GetRowid())"><i
                                class="fa-solid fa-eye"></i></button>
                            }
                            
                            @if(CanDelete && IsSubpanel && AllowDelete){
                                <button class="btn btn-sm layout_btn_standar-sm ml-1" @onclick="() => GoToDelete(((IBaseSDK)data).GetRowid(), data.ToString())"><i
                                class="fa-solid fa-trash-can"></i></button>

                            }
                            @if(HasCustomActions){
                                @foreach (var action in CustomActions)
                                {
                                    <button class="btn btn-sm layout_btn_standar-sm ml-1" @onclick="async () => await OnClickCustomAction(action, ((IBaseSDK)data))"><i
                                    class="@action.IconClass"></i></button>
                                }
                            }
                            @* <button class="btn btn-link grid-btn-link"
                            @onclick="() => GoToDetail(((BaseSDK<>)data).Rowid)"><span class="oi oi-eye"></span></button> *@
                        </div>
                        
                    </Template>
                </RadzenDataGridColumn>
                }
                @foreach (var field in ListViewModel.Fields)
                {
                    var fieldName = field.Name;
                    if (fieldName.StartsWith("BaseObj."))
                    {
                        fieldName = fieldName.Substring(8);
                    }
                    var columnType = typeof(string);
                    var columnWidth = "auto";
                    if(field.ColumnWidth > 0)
                    {
                        columnWidth = $"{field.ColumnWidth}px";
                    }
                    switch (field.FieldType)
                    {
                        case FieldTypes.CharField:
                        case FieldTypes.TextField:
                        case FieldTypes.EntityField:
                            break;
                        case FieldTypes.DateField:
                        case FieldTypes.DateTimeField:
                            columnType = typeof(DateTime);
                            break;
                        case FieldTypes.DecimalField:
                            columnType = typeof(decimal);
                            break;
                        case FieldTypes.IntegerField:
                            columnType = typeof(int);
                            break;
                        case FieldTypes.BooleanField:
                            columnType = typeof(bool);
                            break;

                        default:
                            break;

                            //default
                    }                
                    
                    if(!field.Hidden){
                        if(field.Name == ListViewModel.LinkTo && ShowLinkTo)
                        {
                            <RadzenDataGridColumn Property="@fieldName" TItem="object" Title="" Type="@columnType" Width="@columnWidth">
                                <HeaderTemplate>
                                    <span>
                                        @if(!string.IsNullOrEmpty(field.ResourceTag))
                                        {
                                            <ResourceViewer ResourceTag="@field.ResourceTag" />
                                        }else {
                                            <ResourceViewer ResourceTag="@($"{BLEntityName}.{fieldName}")" />
                                        }
                                    </span>
                                </HeaderTemplate>
                                <Template Context="data">
                                    @if(CanDetail && AllowDetail)
                                    {
                                        @if(OnClickDetail != null){
                                            <a href="#" @onclick="() => GoToDetail(((IBaseSDK)data).GetRowid())" @onclick:preventDefault>@data</a>
                                        }else{
                                            <a href="/@BusinessName/detail/@(((IBaseSDK)data).GetRowid())/">@data</a>
                                        }
                                    }else{
                                        @data
                                    }
                                </Template>
                            </RadzenDataGridColumn>
                        }else{
                            if(field.FieldType == FieldTypes.Custom){
                                <RadzenDataGridColumn Property="@fieldName" TItem="object" Title="" Type="@columnType" Width="@columnWidth">
                                    <HeaderTemplate>
                                        <span>
                                            @if(!string.IsNullOrEmpty(field.ResourceTag))
                                            {
                                                <ResourceViewer ResourceTag="@field.ResourceTag" />
                                            }else {
                                                <ResourceViewer ResourceTag="@($"{BLEntityName}.{fieldName}")" />
                                            }
                                        </span>
                                    </HeaderTemplate>
                                    <Template Context="data">
                                        <CustomField BaseModelObj="@BusinessObj" FieldOpt="field"  Definition="field.CustomComponent" BaseObj="@data"/>
                                    </Template>
                                </RadzenDataGridColumn>
                            }else if(columnType == typeof(bool)){
                                <RadzenDataGridColumn Property="@fieldName" TItem="object" Title="" Type="@columnType" Width="@columnWidth" >
                                    <HeaderTemplate>
                                        <span>
                                            @if(!string.IsNullOrEmpty(field.ResourceTag))
                                            {
                                                <ResourceViewer ResourceTag="@field.ResourceTag" />
                                            }else {
                                                <ResourceViewer ResourceTag="@($"{BLEntityName}.{fieldName}")" />
                                            }
                                        </span>
                                    </HeaderTemplate>
                                    <Template Context="data">
                                        <div class="d-flex justify-content-center align-items-center">
                                            <input type="checkbox" checked="@(data.GetType().GetProperty(fieldName).GetValue(data))" disabled />
                                        </div>
                                    </Template>
                                </RadzenDataGridColumn>

                            }else if(field.FieldType == FieldTypes.SelectField){
                                <RadzenDataGridColumn Property="@fieldName" TItem="object" Title="" Type="@columnType" Width="@columnWidth">
                                    <HeaderTemplate>
                                        <span>
                                            @if(!string.IsNullOrEmpty(field.ResourceTag))
                                            {
                                                <ResourceViewer ResourceTag="@field.ResourceTag" />
                                            }else {
                                                <ResourceViewer ResourceTag="@($"{BLEntityName}.{fieldName}")" />
                                            }
                                        </span>
                                    </HeaderTemplate>
                                    <Template Context="data">
                                        <DynamicComponent Type="@typeof(SelectFieldDetail<>).MakeGenericType(field.GetFieldObj(data).SelectFieldType)" Parameters="@GetSelectFieldParameters(data, field, fieldName)" />
                                    </Template>
                                </RadzenDataGridColumn>

                            }else if(columnType == typeof(decimal)){
                                <RadzenDataGridColumn Property="@fieldName" TItem="object" Title="" Type="@columnType" TextAlign="TextAlign.Right" HeaderCssClass="align-header-left" Width="@columnWidth">
                                    <HeaderTemplate>
                                        <span>
                                            @if(!string.IsNullOrEmpty(field.ResourceTag))
                                            {
                                                <ResourceViewer ResourceTag="@field.ResourceTag" />
                                            }else {
                                                <ResourceViewer ResourceTag="@($"{BLEntityName}.{fieldName}")" />
                                            }
                                        </span>
                                    </HeaderTemplate>
                                </RadzenDataGridColumn>
                            }else{
                            <RadzenDataGridColumn Property="@fieldName" TItem="object" Title="" Type="@columnType" Width="@columnWidth">
                                <HeaderTemplate>
                                    <span>
                                        @if(!string.IsNullOrEmpty(field.ResourceTag))
                                        {
                                            <ResourceViewer ResourceTag="@field.ResourceTag" />
                                        }else {
                                            <ResourceViewer ResourceTag="@($"{BLEntityName}.{fieldName}")" />
                                        }
                                    </span>
                                </HeaderTemplate>
                            </RadzenDataGridColumn>
                            }
                        }
                    }
                }
            </Columns>
        </RadzenDataGrid>
    }

    @if(ShowList && UseFlex){
        <FlexComponent IsListView="true" BlNameList="@BusinessName" ViewdefName="@FinalViewdefName" ListView="@this" GuidListView="@guidListView" CanEdit="@CanEdit" CanDelete="@CanDelete" EditingFlex="@_isEditingFlex" Take="@FlexTake" ServerPagination="@ServerPaginationFlex" FilterSearch="@FilterFlex" ActionIcons=@CustomActionIcons HasSearch=@ShowSearchForm IsMultiple="@IsMultiple"></FlexComponent>
    }

    @if(SetTopBar)
    {
        <PageTitle><ResourceViewer ResourceTag="@($"{BusinessName}.Plural")" /></PageTitle>
        <SetTopBar HasExtraButtons="@HasExtraButtons" BusinessObj="@BusinessObj">
            <TopBarTitle><ResourceViewer ResourceTag="@($"{BusinessName}.Plural")" /></TopBarTitle>
            <TopBarButtons>
                @if(ShowSearchForm && HasSearchViewdef && !_isEditingFlex)
                {
                    <TopBarButton ResourceTag="Action.AdvanceSearch" IconCssClass="fa-solid fa-magnifying-glass-plus" Click="@(()=> SetSearchFromVisibility(false))"/>
                }
                @if(_isEditingFlex){
                    <TopBarButton ResourceTag="Action.Cancel" IconCssClass="fa-solid fa-times" Click="CancelEdit"/>
                    <TopBarButton ResourceTag="Action.Flex.SaveAndClose" IconCssClass="fa-solid fa-floppy-disk" Click="SaveAndCloseList" />
                }
                @if(UseFlex && !_isEditingFlex && !_isSearchOpen){
                    <TopBarButton Click="GoToEditFlex" ResourceTag="Action.EditListFlex" IconCssClass="fa-solid fa-pen" />
                }                
                @if(CanCreate && !_isEditingFlex)
                {
                    <TopBarButton Click="GoToCreate" ResourceTag="Action.Create" IconCssClass="fa-solid fa-circle-plus" />
                }
            </TopBarButtons>
            <TopBarExtraButtons>
                @foreach (var btn in ExtraButtons)
                {
                    <TopBarButton Click="@(()=> { OnClickCustomButton(@btn); })" ResourceTag="@btn.ResourceTag" IconCssClass="@btn.IconClass" />
                }
            </TopBarExtraButtons>
        </SetTopBar>
    }
}

@code{
    
    private async Task OpenModalFilter()
    {
        if(FieldsHidden.Any()){
            string resourceTitle = await UtilManager.GetResource("Action.AddFilter");
            List<FieldOptions> modalFields = FieldsHidden.Clone();
            modalFields.ForEach(x => x.Hidden = !x.Hidden);
            await dialogService.ShowCustomDialog(ds =>
                @<div>
                    <AddFilter Fields="@modalFields" OnchageFields="@OnchageFields"/>
                </div>,
                title: resourceTitle
            );   
        }
    }

    public void OnchageFields(List<FieldOptions> returnFields)
    {
        UpdateSearchForm(returnFields);
        StateHasChanged();
    }

    public async Task OnReadySearchForm(FreeForm formInstance)
    {
        if(SavedHiddenFields != null && SavedHiddenFields.Any())
        {
            await UpdateSearchForm(SavedHiddenFields, false, formInstance);
            StateHasChanged();
        }
    }
    
    public async Task<bool> ConfirmDelete(){

        var result = false;

        var dialog = await dialogService.ShowCustomDialog(ds =>
            @<ConfirmDelete DialogService=@ds />
        );

        if(dialog){
            result = true;
        }else{
            result = false;
        }

        return result;
    }

    public bool GetValueCheck(dynamic data){
        var r = false;
        /*if(SelectedObjects != null){
            Type dataType = data.GetType();
            var dynamicData = Convert.ChangeType(data, dataType);
            r = SelectedObjects.Any(x => x.Rowid == dynamicData.Rowid);            
        }*/
        return SelectedObjects != null && SelectedObjects.Any(x => x.Rowid == data.Rowid);
    }
}
