@page "/{BusinessName}/"
@using System.Reflection
@using Siesa.Global.Enums
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@inherits Siesa.SDK.Frontend.Components.FormManager.ViewModels.DynamicBaseViewModel
@if (ErrorMsg != null && ErrorMsg != "")
{
     <ErrorsWindow GeneralErrors="@ErrorList" />
}
else if (BusinessObj != null)
{
    if(RenderMain != null){
        <CascadingValue Value="this">
            @RenderMain
        </CascadingValue>
    }else{
        <DynamicComponent Type="@(typeof(Views.ListView))" Parameters="@parameters" />        
    }
}

@code {
    [Parameter] public string SubpanelFilter { get; set; }

    [Parameter] public Action<string> OnClickEdit { get; set; } = null;
    [Parameter] public Action<string> OnClickDetail { get; set; } = null;
    [Parameter] public Action<string,string> OnClickDelete { get; set; } = null;
    [Parameter] public Action OnClickNew { get; set; } = null;

    [Parameter] public bool AllowCreate { get; set; } = true;
    [Parameter] public bool AllowEdit { get; set; } = true;
    [Parameter] public bool AllowDelete { get; set; } = true;
    [Parameter] public bool AllowDetail { get; set; } = true;
    [Parameter] public Action<IList<dynamic>> OnSelectedRow { get; set; } = null;

    [Parameter] public string ViewdefName { get; set; } = "related_list";

    [Parameter] public IEnumerable<object> Data { get; set; } = null;
    [Parameter] public bool FromEntityField { get; set; } = false;
    [Parameter] public bool IsMultiple { get; set; } = false;

    [Parameter] public IList<dynamic> SelectedItems { get; set; }
    
    [Parameter] public dynamic businessObj { get; set; }

    [Parameter] public bool IsEntityField {get; set;} 

    private RenderFragment RenderMain = null;

    protected override async Task OnInitializedAsync()
    {
        ViewType = ViewModels.DynamicViewType.List;
        await base.OnInitializedAsync();
    }

    protected override void SetParameters(dynamic _businessObj, string businessName){

        RenderMain = GetRenderFragment();
        if (RenderMain == null)
        {
            var new_params = new Dictionary<string, object>();
            if(businessObj != null){
                _businessObj = businessObj;
            }
            new_params.Add("BusinessObj", _businessObj);
            new_params.Add("BusinessName", businessName);
            new_params.Add("AllowCreate", AllowCreate);
            new_params.Add("AllowEdit", AllowEdit);
            new_params.Add("AllowDelete", AllowDelete);
            new_params.Add("AllowDetail", AllowDetail);
            new_params.Add("OnSelectedRow", OnSelectedRow);
            new_params.Add("Data", Data);
            new_params.Add("FromEntityField", FromEntityField);
            new_params.Add("IsMultiple", IsMultiple);
            new_params.Add("SelectedItems", SelectedItems);
            if (IsSubpanel)
            {
                new_params.Add("BLNameParentAttatchment", BLNameParentAttatchment);
                new_params.Add("IsSubpanel", true);
                new_params.Add("SetTopBar", false);
                if(!String.IsNullOrEmpty(SubpanelFilter))
                {
                    new_params.Add("ConstantFilters", new List<string>() { SubpanelFilter });
                }
                
                new_params.Add("ViewdefName", ViewdefName);
                if (OnClickEdit != null)
                {
                    new_params.Add("OnClickEdit", OnClickEdit);
                }
                if (OnClickDetail != null)
                {
                    new_params.Add("OnClickDetail", OnClickDetail);
                }
                if (OnClickDelete != null)
                {
                    new_params.Add("OnClickDelete", OnClickDelete);
                }
                if (OnClickNew != null)
                {
                    new_params.Add("OnClickNew", OnClickNew);
                }
            }

            //check if new_params is equal to parametersm, if not, set parameters to new_params
            if (!new_params.SequenceEqual(parameters))
            {
                parameters = new_params;
            }
        }
    }

    private RenderFragment GetRenderFragment(){
        if(BusinessObj == null){
            return null;
        }
        MethodInfo method = BusinessObj.GetType().GetMethod("Main");
        return (RenderFragment)method.Invoke(BusinessObj, null);
    }

    protected override  async Task CheckAccessPermission(bool disableAccessValidation = false)
    {
        if(IsEntityField)
        {
            await base.CheckAccessPermission(true);
        }
    }
}
