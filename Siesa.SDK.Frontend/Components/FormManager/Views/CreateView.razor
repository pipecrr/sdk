@using SDK.Components.Visualization
@using Siesa.SDK.Components.Visualization
@using Siesa.SDK.Frontend.Components.Fields
@using Siesa.SDK.Frontend.Components.FormManager.Fields
@using System;
@using Siesa.SDK.Entities;
@using Siesa.SDK.Frontend.Application
@using Siesa.SDK.Frontend.Components.Visualization
@using Siesa.SDK.Shared.Services
@using Siesa.SDK.Frontend.Components.Layout.Detail.Relationship
@inject IResourceManager ResourceManager
@inject IAuthenticationService AuthenticationService
@inject SDKNotificationService Notification

@inherits Siesa.SDK.Frontend.Components.FormManager.ViewModels.FormView

@if (Loading == true)
{
    <ResourceViewer ResourceTag="Custom.Generic.Loading" />
}
else if (Panels == null || Panels.Count <= 0)
{
    @* <ResourceViewer ResourceTag="Custom.Formview.NotDefinition" /> *@
    <ErrorsWindow EditFormContext="@EditFormContext" GeneralErrors="@ErrorList"/>
} else if (BusinessObj.BaseObj != null)
{
    @if(IsSubpanel && ShowTitle){        
            <h5 class="d-flex justify-content-center"><ResourceViewer ResourceTag="Action.Create" /> <ResourceViewer 
            ResourceTag="@($"{BusinessName}.Singular")" /></h5>
        <hr />
    }
    @if(ContainAttachments){
        <RelationshipContainer Relationships="@FormViewModel.Relationships.Where(x=>x.Enabled).ToList()" 
            Parent="@BusinessObj.BaseObj" ContainAttachments="@ContainAttachments" BLNameParentAttatchment="@BusinessName"
            BusinessObj="@BusinessObj" isCreateView="true"/>
    }else if(FormViewModel.Relationships != null && FormViewModel.Relationships.Count > 0)
    {
        <RelationshipContainer Relationships="@FormViewModel.Relationships.Where(x=>x.Enabled).ToList()" Parent="@BusinessObj.BaseObj" isCreateView="true"/>
    }
    <CascadingValue Value="@this">
       <ErrorsWindow EditFormContext="@EditFormContext" GeneralErrors="@ErrorList"/>
    <EditForm id="@FormID"
              OnValidSubmit="@HandleValidSubmit"
              OnInvalidSubmit="@HandleInvalidSubmit"
              EditContext="@EditFormContext">
        <ObjectGraphDataAnnotationsValidator />
        <DxFormLayout CaptionPosition="CaptionPosition.Vertical">
            @if (Panels.Count > 1)
            {
                <DxFormLayoutTabPages ScrollMode="TabsScrollMode.Auto">
                    @foreach (var panel in Panels)
                    {
                        <SDKFormLayoutTabPage ResourceTag="@panel.ResourceTag">
                            <CascadingValue Value="@EditFormContext">
                                <FieldsContainer Fields="@panel.Fields" SubViewdef="@panel.SubViewdef" DefaultColSize="@panel.ColSize" ModelObj="@BusinessObj" />
                            </CascadingValue>
                        </SDKFormLayoutTabPage>
                    }
                </DxFormLayoutTabPages>
            }
            else
            {
                <CascadingValue Value="@EditFormContext">
                    <FieldsContainer Fields="@Panels[0].Fields" SubViewdef="@Panels[0].SubViewdef" DefaultColSize="@Panels[0].ColSize" ModelObj="@BusinessObj" />
                </CascadingValue>
            }
        </DxFormLayout>
    </EditForm>
    </CascadingValue>
    @if(IsSubpanel && ShowButtons){
        <div class="buttons-container">
            @foreach (var btn in FormViewModel.Buttons)
            {
                <SDKButton RenderStyle="@btn.RenderStyle"  Click="@(()=> { OnClickCustomButton(@btn); })" ResourceTag="@btn.ResourceTag"  />
            }
            @if(ShowCancelButton){
                <SDKButton RenderStyle="SDKButtonRenderStyle.Cancel" Click="@((args) => {CancelButton();})" ResourceTag="Action.Cancel" />
            }
            @if(ShowSaveButton){
                <SDKButton form="@FormID" RenderStyle="SDKButtonRenderStyle.Primary" SubmitFormOnClick="true" ResourceTag="Action.Save"/>
            }
        </div>
    }
    @if(SetTopBar && !IsSubpanel)
    {
        <PageTitle><ResourceViewer ResourceTag="Action.Create" /> <ResourceViewer ResourceTag="@($"{BusinessName}.Singular")" /></PageTitle>
        <SetTopBar StyleName="toolbar_creation" HasExtraButtons="@HasExtraButtons" BusinessObj="@BusinessObj">
            <TopBarTitle><ResourceViewer ResourceTag="Action.Create" /> <ResourceViewer ResourceTag="@($"{BusinessName}.Singular")" /></TopBarTitle>
            <TopBarButtons>
                @if(SaveButton != null){
                    if(!SaveButton.Hidden){
                        <TopBarButton form="@FormID" SubmitFormOnClick="true" ResourceTag="Action.Save" IconCssClass="@GetSaveBtnIcon()" Enabled="@(!Saving && !SaveButton.Disabled)"/>
                    }
                }else{
                    <TopBarButton form="@FormID" SubmitFormOnClick="true" ResourceTag="Action.Save" IconCssClass="@GetSaveBtnIcon()" Enabled="@(!Saving)"  />
                }
            </TopBarButtons>
            <TopBarExtraButtons>
                @foreach (var btn in ExtraButtons)
                {
                    if(!btn.Hidden){
                        <TopBarButton Click="@(()=> { OnClickCustomButton(@btn); })" ResourceTag="@btn.ResourceTag" IconCssClass="@btn.IconClass" Enabled="@(!btn.Disabled)"/>
                    }
                }
            </TopBarExtraButtons>
        </SetTopBar>
    }

}

@code {

    protected override async Task InitView(string bName = null){
        await base.InitView(bName);

        if(Panels.Count > 1){
             foreach (var panel in Panels){
                 if(panel.SubViewdef != null && panel.SubViewdef.ParentField != ""){
                    string[] fieldPath = panel.SubViewdef.ParentField.Split('.');
                    object currentObject = BusinessObj;
                    for (int i = 0; i < fieldPath.Length; i++)
                    {
                        var tmpType = currentObject.GetType();
                        var tmpProperty = tmpType.GetProperty(fieldPath[i]);
                        var tmpValue = tmpProperty.GetValue(currentObject, null);
                        var isEntity = tmpProperty.PropertyType.IsSubclassOf(typeof(BaseSDK<>));
                        if (tmpValue == null && isEntity)
                        {
                            tmpValue = Activator.CreateInstance(tmpProperty.PropertyType);
                            tmpProperty.SetValue(currentObject, tmpValue);
                        }
                        currentObject = tmpValue;
                    }
                 }
             }
        }
    }
}