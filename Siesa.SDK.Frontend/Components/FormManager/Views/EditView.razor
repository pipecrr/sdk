@using SDK.Components.Visualization
@using Siesa.SDK.Frontend.Components.Fields
@using Siesa.SDK.Frontend.Components.FormManager.Fields
@inherits Siesa.SDK.Frontend.Components.FormManager.ViewModels.FormView
@using Siesa.SDK.Entities;
@using Siesa.SDK.Frontend.Components.Visualization
@using Siesa.SDK.Shared.Services
@using Siesa.SDK.Frontend.Components.Layout.Detail.Relationship
@using Siesa.SDK.Frontend.Components.Layout.AditionalField
@inject SDKDialogService SDKDialogService
@inject NavigationManager NavigationManager
@inject NavigationService NavigationService

@if (Loading == true)
{
    <ResourceViewer ResourceTag="Custom.Generic.Loading" />
}
else if (Panels == null || Panels.Count <= 0)
{
    <ErrorsWindow EditFormContext="@EditFormContext" GeneralErrors="@ErrorList" VerifyContext="@ClickInSave"/>
}
else if (BusinessObj.BaseObj.Rowid != 0)
{
    @if(IsSubpanel && ShowTitle){
        <h5 class="d-flex justify-content-center"><ResourceViewer ResourceTag="Action.Edit" /> @BusinessObj</h5>
        <hr />
    }
    @if(ContainAttachments){
        <RelationshipContainer Relationships="@FormViewModel.Relationships.Where(x=>x.Enabled).ToList()" 
            Parent="@BusinessObj.BaseObj" ContainAttachments="@ContainAttachments" BLNameParentAttatchment="@BusinessName"
            BusinessObj="@BusinessObj"/>
    }else if(FormViewModel.Relationships != null && FormViewModel.Relationships.Count > 0)
    {
            <RelationshipContainer Relationships="@FormViewModel.Relationships.Where(x=>x.Enabled).ToList()" Parent="@BusinessObj.BaseObj" />
    }
    <CascadingValue Value="@this">        
        <ErrorsWindow EditFormContext="@EditFormContext" GeneralErrors="@ErrorList" VerifyContext="@ClickInSave"/>
    <EditForm id="@FormID"
              OnValidSubmit="@HandleValidSubmit"
              OnInvalidSubmit="@HandleInvalidSubmit"
              EditContext="@EditFormContext">
        <ObjectGraphDataAnnotationsValidator />
        <DxFormLayout CaptionPosition="CaptionPosition.Vertical">
            @if (Panels.Count > 1)
            {
                <DxFormLayoutTabPages ScrollMode="TabsScrollMode.Auto">
                    @foreach (var panel in Panels)
                    {
                        <SDKFormLayoutTabPage ResourceTag="@panel.ResourceTag">
                            <CascadingValue Value="@EditFormContext">
                                <FieldsContainer Fields="@panel.Fields" SubViewdef="@panel.SubViewdef" ModelObj="@BusinessObj" DefaultColSize="@panel.ColSize" />
                            </CascadingValue>
                        </SDKFormLayoutTabPage>
                    }


                </DxFormLayoutTabPages>

            }
            else
            {
                <CascadingValue Value="@EditFormContext">
                    <FieldsContainer Fields="@Panels[0].Fields" SubViewdef="@Panels[0].SubViewdef" ModelObj="@BusinessObj" DefaultColSize="@Panels[0].ColSize" />
                </CascadingValue>

            }
            @if(PanelsCollapsable.Count>0){
                <div class="w-100">
                    <SDKCollapse>
                        <Items>
                            @foreach (var panel in PanelsCollapsable)
                            {
                                <SDKCollapseItem Text="@panel.ResourceTag">
                                    <div class="row">
                                        <CascadingValue Value="@EditFormContext">
                                            <FieldsContainer Fields="@panel.Fields" SubViewdef="@panel.SubViewdef" DefaultColSize="@panel.ColSize" ModelObj="@BusinessObj" />
                                        </CascadingValue>
                                    </div>
                                        <div class="buttons-aditional-fiels mb-2">
                                            <SDKButton RenderStyleMode="SDKButtonRenderStyleMode.Outline" RenderStyle="SDKButtonRenderStyle.Danger" ResourceTag="Borrar" Click="@(()=>ConfirmDelete(panel.RowidGroupDynamicEntity))"/>
                                            <SDKButton RenderStyle="SDKButtonRenderStyle.Secondary" ResourceTag="Editar campos" Click="@(()=>ClickInEdit(panel.RowidGroupDynamicEntity))"/>
                                            <SDKButton RenderStyle="SDKButtonRenderStyle.Primary" ResourceTag="Agregar campos" Click="@(()=>ClickInAdd(panel.RowidGroupDynamicEntity))"/>
                                        </div>
                                </SDKCollapseItem>
                            }
                        </Items>
                    </SDKCollapse>
                </div>
            }
        </DxFormLayout>
        @* <ValidationSummary /> *@        
    </EditForm>
    </CascadingValue>
    @if(IsSubpanel && ShowButtons){
        <div class="buttons-container">
            @foreach (var btn in FormViewModel.Buttons)
            {
                <SDKButton RenderStyle="@btn.RenderStyle"  Click="@(()=> { OnClickCustomButton(@btn); })" ResourceTag="@btn.ResourceTag"  />
            }
            @if(ShowCancelButton){
                <SDKButton RenderStyle="SDKButtonRenderStyle.Cancel" Click="@((args) => {CancelButton();})" ResourceTag="Action.Cancel" />
            }
            @if(ShowSaveButton){
                <SDKButton form="@FormID" RenderStyle="SDKButtonRenderStyle.Primary"  SubmitFormOnClick="true" ResourceTag="Action.Save" />
            }
        </div>        
    }
    @if(SetTopBar && !IsSubpanel)
    {
        <PageTitle><ResourceViewer ResourceTag="Action.Edit" /> @BusinessObj</PageTitle>
        <SetTopBar StyleName="toolbar_edition" HasExtraButtons="@HasExtraButtons" BusinessObj="@BusinessObj">
            <TopBarTitle><ResourceViewer ResourceTag="Action.Edit" /> @BusinessObj</TopBarTitle>
            <TopBarButtons>
                @if(SaveButton != null){
                    if(!SaveButton.Hidden){
                        <TopBarButton form="@FormID" SubmitFormOnClick="true" ResourceTag="Action.Save" IconCssClass="@GetSaveBtnIcon()" Enabled="@(!Saving && !SaveButton.Disabled)" />
                    }
                }else{
                    <TopBarButton form="@FormID" SubmitFormOnClick="true" ResourceTag="Action.Save" IconCssClass="@GetSaveBtnIcon()" Enabled="@(!Saving)" />
                }
            </TopBarButtons>
            <TopBarExtraButtons>
                @foreach (var btn in ExtraButtons)
                {
                    if(!btn.Hidden){
                        <TopBarButton Click="@(()=> { OnClickCustomButton(@btn); })" ResourceTag="@btn.ResourceTag" IconCssClass="@btn.IconClass" Enabled="@(!btn.Disabled)"/>
                    }
                }
            </TopBarExtraButtons>
        </SetTopBar>
    }

}
@code {

    protected override async Task InitView(string bName = null){
        await base.InitView(bName);

        if(Panels.Count > 1){
             foreach (var panel in Panels){
                 if(panel.SubViewdef != null && panel.SubViewdef.ParentField != ""){
                     string[] fieldPath = panel.SubViewdef.ParentField.Split('.');
                    object currentObject = BusinessObj;
                    for (int i = 0; i < fieldPath.Length; i++)
                    {
                        var tmpType = currentObject.GetType();
                        var tmpProperty = tmpType.GetProperty(fieldPath[i]);
                        var tmpValue = tmpProperty.GetValue(currentObject, null);
                        var isEntity = tmpProperty.PropertyType.IsSubclassOf(typeof(BaseSDK<>));
                        if (tmpValue == null && isEntity)
                        {
                            tmpValue = Activator.CreateInstance(tmpProperty.PropertyType);
                            tmpProperty.SetValue(currentObject, tmpValue);
                        }
                        currentObject = tmpValue;
                    }
                 }
             }
        }
    }
    public async Task ConfirmDelete(int Rowid)
    {
        var confirmDelete = await SDKDialogService.ShowConfirmDialog(@<div class="col-12 p-0"><ResourceViewer ResourceTag="Esta seguro que desea eliminar los campos adicionales?"/></div>);
        if(confirmDelete != null && confirmDelete == true){
            bool deleteGroup = await DeleteGroup(Rowid);
            if(deleteGroup){
                var currentUrl = NavigationManager.Uri;
                NavigationService.NavigateTo(currentUrl, true);
            }
                
        }
    }

    public async Task ClickInAdd(int Rowid)
    {   
        var responseDynamicEntity = await BusinessObj.Backend.Call("GetDynamicEntity", Rowid);
        if(responseDynamicEntity != null && responseDynamicEntity.Success){
            dynamic dynamicEntity = responseDynamicEntity.Data;
            var modal = await SDKDialogService.ShowCustomDialog(ds =>@<AditionalFields Business="@BusinessObj" IsCreate="true" DynamicEntity="dynamicEntity"/>,
                    ShowTitle: false,
                    standardWidth: SDKModalWidth.Large,
                    CssClass: "aditional_fields_padding_0"
                );
            if(modal != null && modal == true){
                await ModalConfirmMessage(modal);
            }
        }
    }

    public async Task ClickInEdit(int Rowid)
    {
        var responseDynamicEntity = await BusinessObj.Backend.Call("GetDynamicEntity", Rowid);
        if(responseDynamicEntity != null && responseDynamicEntity.Success){
            dynamic dynamicEntity = responseDynamicEntity.Data;
            var modal = await SDKDialogService.ShowCustomDialog(ds =>@<AditionalFields Business="@BusinessObj" IsEdit="true" DynamicEntity="dynamicEntity"/>,
                    ShowTitle: false,
                    standardWidth: SDKModalWidth.Large,
                    CssClass: "aditional_fields_padding_0"
                );
            if(modal != null && modal == true){
                await ModalConfirmMessage(modal);
            }
        }
    }

    public async Task ModalConfirmMessage(bool response){
        var confirm = await SDKDialogService.ShowConfirmDialog(@<div class="col-12 p-0"><ResourceViewer ResourceTag="Custom.AditionalFields.ConfirmMessage"/></div>);
        if(confirm != null && confirm == true){
            var currentUrl = NavigationManager.Uri;
            NavigationService.NavigateTo(currentUrl, true);
        }
    }
}