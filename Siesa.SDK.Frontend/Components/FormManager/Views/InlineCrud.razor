@using Siesa.SDK.Shared.Services
@using Siesa.SDK.Frontend.Components.Visualization
@using Siesa.SDK.Components.Visualization
@using Siesa.SDK.Frontend.Services
@inject DialogService DialogService
@inject IAuthenticationService AuthenticationService
@inject IBackendRouterService BackendRouterService
@inject SDKDialogService SDKDialogService

<div class="sdk-inlinecrud-container">
    @if(AllowCreate)
    {

        <SDKButton BusinessName="@BusinessName" ListPermission="@ListPermission" CssClass="mb-1" RenderStyle="SDKButtonRenderStyle.Primary" Click="@(async ()=> { await OpenModalCreate(); })">
            <ResourceViewer ResourceTag="Action.Create" /> <ResourceViewer 
                ResourceTag="@($"{BusinessName}.Singular")" />
        </SDKButton>
    }

    <DynamicListView
        BusinessName="@BusinessName"
        IsSubpanel=true
        SubpanelFilter="@Filter"
        @key="listview_key"
        OnClickEdit="@(async (string item_rowid)=> { await OpenModalEdit(item_rowid); })"
        OnClickDetail="@(async (string item_rowid)=> { await OpenModalDetail(item_rowid); })"
        OnClickDelete="@(async (string item_rowid, string object_string)=> { await OpenModalDelete(item_rowid, object_string); })" 
        OnClickNew="@(async ()=> { await OpenModalCreate(); })"
        AllowCreate="false"
        AllowEdit="@AllowEdit"
        AllowDelete="@AllowDelete"
        AllowDetail="@AllowDetail"
        OnSelectedRow=@OnSelectedRow
        Data="@Data"
        />
</div>



@code {
    [Parameter] public string BLNameParentAttatchment { get; set; }
    [Parameter] public string BusinessName { get; set; }
    [Parameter] public Dictionary<string, object> DefaultFieldsCreate { get; set; }

    [Parameter] public string Filter { get; set; }
    [Parameter] public bool AllowCreate { get; set; } = true;
    [Parameter] public bool AllowEdit { get; set; } = true;
    [Parameter] public bool AllowDelete { get; set; } = true;
    [Parameter] public bool AllowDetail { get; set; } = true;
    [Parameter] public Action<IList<dynamic>> OnSelectedRow { get; set; } = null;
    [Parameter] public IEnumerable<object> Data { get; set; } = null;
    
    [Parameter] public string Width { get; set; } = "600px";

    [Parameter] public string Height { get; set; }
    [Parameter] public bool UseFlex { get; set; } = true;

    private bool DefaultTitle = false;

    public List<int> ListPermission { get; set; } = new List<int>(){1};
    
    Guid listview_key = Guid.NewGuid();

    public async Task OpenModalCreate()
    {
        bool DefaultTitle = false;

        var ShowCreateDialog = await SDKDialogService.ShowCustomDialog(ds => @<DynamicCreateView BusinessName="@BusinessName" IsSubpanel=true  DefaultFields="@DefaultFieldsCreate" BLNameParentAttatchment="@BLNameParentAttatchment" ShowTitle="@DefaultTitle"/>, Width, $"{BusinessName}.Singular", true, true, Height);
        listview_key = Guid.NewGuid();
        StateHasChanged();
    }

    public async Task OpenModalEdit(string item_rowid)
    {
        var ShowEditDialog = await SDKDialogService.ShowCustomDialog(ds =>@<DynamicEditView BusinessName="@BusinessName" IsSubpanel=true  BusinessObjId="@item_rowid"  DefaultFields="@DefaultFieldsCreate" BLNameParentAttatchment="@BLNameParentAttatchment" ShowTitle="@DefaultTitle"/>, Width, $"{BusinessName}.Singular", true, true, Height);
        listview_key = Guid.NewGuid();
        StateHasChanged();
    }
    
    public async Task OpenModalDetail(string item_rowid)
    {
        var ShowDetailDialog = await SDKDialogService.ShowCustomDialog(ds => @<DynamicDetailView BusinessName="@BusinessName" IsSubpanel=true  BusinessObjId="@item_rowid" BLNameParentAttatchment="@BLNameParentAttatchment" ShowTitle="@DefaultTitle" AllowDelete="@AllowDelete" />, Width, $"{BusinessName}.Singular", true, true, Height);
        listview_key = Guid.NewGuid();
        StateHasChanged();
    }

    public async Task OpenModalDelete(string item_rowid, string object_string)
    {
        var modal_result = await SDKDialogService.ShowCustomDialog(ds => @<ConfirmDelete DialogService=@ds/>,"340px");   
        if(modal_result == true) {
            var backend = BackendRouterService.GetSDKBusinessModel(BusinessName, AuthenticationService);
            await backend.DeleteAsync(Convert.ToInt64(item_rowid));
        }
        listview_key = Guid.NewGuid();
        StateHasChanged();
    }

    /*protected override void OnParametersSet()
    {
        base.OnParametersSet();
        listview_key = Guid.NewGuid();
        StateHasChanged();     
    }*/
}