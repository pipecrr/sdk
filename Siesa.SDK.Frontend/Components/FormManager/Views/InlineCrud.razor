@using Siesa.SDK.Shared.Services
@using Siesa.SDK.Frontend.Components.Visualization
@using Siesa.SDK.Components.Visualization
@using Siesa.SDK.Frontend.Services
@using Siesa.Global.Enums
@using System.Reflection
@inject DialogService DialogService
@inject IAuthenticationService AuthenticationService
@inject IBackendRouterService BackendRouterService
@inject SDKDialogService SDKDialogService
@inject IFeaturePermissionService FeaturePermissionService

<div class="sdk-inlinecrud-container">
    @if (AllowCreate)
    {
        @if (!string.IsNullOrEmpty(BLNameParentAttatchment) && BusinessName.Equals("BLAttachmentDetail"))
        {
            <SDKButton BusinessName="@BLNameParentAttatchment" ListPermission="@ListPermission" CssClass="mb-1"
                RenderStyle="SDKButtonRenderStyle.Primary" Click="@(async ()=> { await OpenModalCreate(); })">
                <ResourceViewer ResourceTag="Action.Create" />
                <ResourceViewer ResourceTag="@($"{BusinessName}.Singular")" />
            </SDKButton>

        }
        else
        {
            <SDKButton BusinessName="@BusinessName" ListPermission="@ListPermission" CssClass="mb-1"
                RenderStyle="SDKButtonRenderStyle.Primary" Click="@(async ()=> { await OpenModalCreate(); })">
                <ResourceViewer ResourceTag="Action.Create" />
                <ResourceViewer ResourceTag="@($"{BusinessName}.Singular")" />
            </SDKButton>
        }

    }

    <DynamicListView BusinessName="@BusinessName" IsSubpanel=true SubpanelFilter="@Filter" @key="listview_key"
        OnClickEdit="@(async (string item_rowid)=> { await OpenModalEdit(item_rowid); })"
        OnClickDetail="@(async (string item_rowid)=> { await OpenModalDetail(item_rowid); })"
        OnClickDelete="@(async (string item_rowid, string object_string)=> { await OpenModalDelete(item_rowid, object_string); })"
        OnClickNew="@(async ()=> { await OpenModalCreate(); })" AllowCreate="false" AllowEdit="@AllowEdit"
        AllowDelete="@AllowDelete" AllowDetail="@AllowDetail" ShowSearchForm="@ShowSearchForm"
        OnSelectedRow=@OnSelectedRow Data="@Data" BLNameParentAttatchment="@BLNameParentAttatchment" />
</div>



@code {
    private bool DefaultTitle = false;

    private int _rowidPermission;

    public List<string> ListPermission { get; set; } = new List<string>();

    Guid listview_key = Guid.NewGuid();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await ValidateBussinessName();
    }


    private async Task ValidateBussinessName()
    {
        if (!string.IsNullOrEmpty(BusinessName) && BusinessName.Equals("BLAttachmentDetail"))
        {
            ListPermission.Add(enumSDKActions.UploadAttachment);
        }
        else
        {
            ListPermission.Add(enumSDKActions.Create);
        }
    }

    /// <summary>
    /// Opens the modal for creating a new item.
    /// </summary>
    public async Task OpenModalCreate()
    {
        bool DefaultTitle = false;

        var ShowCreateDialog = await SDKDialogService.ShowCustomDialog(ds => @<DynamicCreateView BusinessName="@BusinessName" IsSubpanel=true DefaultFields="@DefaultFieldsCreate"
    BLNameParentAttatchment="@BLNameParentAttatchment" ShowTitle="@DefaultTitle" />, Width, $"{BusinessName}.Singular",
true, true, Height, standardWidth: ModalWidth);
        listview_key = Guid.NewGuid();
        if (ShowCreateDialog != null && ShowCreateDialog.GetType() != typeof(bool))
        {
            OnCreate?.Invoke(ShowCreateDialog);
        }
        StateHasChanged();
    }

    /// <summary>
    /// Opens the modal for editing an item.
    /// </summary>
    /// <param name="item_rowid">The row ID of the item to edit.</param>

    public async Task OpenModalEdit(string item_rowid)
    {
        var ShowEditDialog = await SDKDialogService.ShowCustomDialog(ds =>@<DynamicEditView BusinessName="@BusinessName" IsSubpanel=true BusinessObjId="@item_rowid"
    DefaultFields="@DefaultFieldsCreate" BLNameParentAttatchment="@BLNameParentAttatchment" ShowTitle="@DefaultTitle" />
        , Width, $"{BusinessName}.Singular", true, true, Height, standardWidth: ModalWidth);
        listview_key = Guid.NewGuid();
        if (ShowEditDialog != null && ShowEditDialog.GetType() != typeof(bool))
        {
            OnEdit?.Invoke(ShowEditDialog);
        }
        StateHasChanged();
    }

    /// <summary>
    /// Opens the modal for viewing details of an item.
    /// </summary>
    /// <param name="item_rowid">The row ID of the item to view details of.</param>

    public async Task OpenModalDetail(string item_rowid)
    {
        var ShowDetailDialog = await SDKDialogService.ShowCustomDialog(ds => @<DynamicDetailView BusinessName="@BusinessName" IsSubpanel=true BusinessObjId="@item_rowid"
    BLNameParentAttatchment="@BLNameParentAttatchment" ShowTitle="@DefaultTitle" AllowDelete="@AllowDelete" />, Width,
            $"{BusinessName}.Singular", true, true, Height, standardWidth: ModalWidth);
        listview_key = Guid.NewGuid();
        StateHasChanged();
    }

    /// <summary>
    /// Opens the modal for deleting an item.
    /// </summary>
    /// <param name="item_rowid">The row ID of the item to delete.</param>
    /// <param name="object_string">The string representation of the item.</param>

    public async Task OpenModalDelete(string item_rowid, string object_string)
    {
        var modal_result = await SDKDialogService.ShowCustomDialog(ds => @<ConfirmDelete DialogService=@ds />, "340px");
        if (modal_result == true)
        {
            var backend = BackendRouterService.GetSDKBusinessModel(BusinessName, AuthenticationService);
            await backend.DeleteAsync(Convert.ToInt64(item_rowid));
            OnDelete?.Invoke();
        }
        listview_key = Guid.NewGuid();
        StateHasChanged();
    }

    /*protected override void OnParametersSet()
    {
    base.OnParametersSet();
    listview_key = Guid.NewGuid();
    StateHasChanged();
    }*/
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        bool shouldRestart = validateChanged(parameters);
        await base.SetParametersAsync(parameters);
        if (shouldRestart)
        {
            listview_key = Guid.NewGuid();
            StateHasChanged();
        }
    }
    private bool validateChanged(ParameterView parameters)
    {
        var type = this.GetType();
        var properties = type.GetProperties();
        var result = false;

        foreach (var property in properties)
        {
            var HasCustomAttributes = property.GetCustomAttributes().Count() > 0;
            if (!HasCustomAttributes)
            {
                continue;
            }
            var dataAnnotationProperty = property.GetCustomAttributes().First().GetType();
            var parameterType = typeof(ParameterAttribute);
            if (dataAnnotationProperty == parameterType)
            {
                try
                {
                    if (parameters.TryGetValue<string>(property.Name, out var value))
                    {
                        var valueProperty = property.GetValue(this, null);
                        if (property.PropertyType == typeof(String))
                        {
                            if (value != null && !value.Equals(valueProperty))
                            {
                                result = true;
                                break;
                            }
                        }
                        else
                        {
                            if (value != null && value != valueProperty)
                            {
                                result = true;
                                break;
                            }
                        }
                    }
                }
                catch (Exception e) { }
            }
        }
        return result;
    }
}