@using SDK.Components.Visualization
@using Siesa.SDK.Frontend.Components.Fields
@using Siesa.SDK.Frontend.Components.FormManager.Fields
@using Siesa.SDK.Frontend.Components.Layout.Detail.Relationship
@using Siesa.SDK.Frontend.Components.Visualization
@using System.Linq
@using Siesa.SDK.Frontend.Services
@inject SDKGlobalLoaderService SDKGlobalLoaderService

@if (Loading == true)
{
    <ResourceViewer ResourceTag="Custom.Generic.Loading" />
}
else if (Panels == null || Panels.Count <= 0)
{
    @* <ResourceViewer ResourceTag="Custom.Formview.NotDefinition" /> *@
    <ErrorsWindow GeneralErrors="@ErrorList"/>
}
else if (ModelLoaded == true)
{
    if(!string.IsNullOrEmpty(ErrorMsg)){
        <ErrorsWindow GeneralErrors="@ErrorList"/>
    }
        @if(IsSubpanel && ShowTitle){
            <h5 class="d-flex justify-content-center">@BusinessObj</h5>
            <hr />
        }
        <DxFormLayout CaptionPosition="CaptionPosition.Vertical">

            @if (Panels.Count > 1)
            {
                <DxFormLayoutTabPages ScrollMode="TabsScrollMode.Auto">
                    @foreach (var panel in Panels)
                    {
                        <SDKFormLayoutTabPage ResourceTag="@panel.ResourceTag">
                            <FieldsContainer Fields="@panel.Fields" SubViewdef="@panel.SubViewdef" ModelObj="@BusinessObj" DefaultColSize="@panel.ColSize" />
                        </SDKFormLayoutTabPage>
                    }
                </DxFormLayoutTabPages>

            }
            else
            {
                <FieldsContainer Fields="@Panels[0].Fields" SubViewdef="@Panels[0].SubViewdef" ModelObj="@BusinessObj" DefaultColSize="@Panels[0].ColSize"/>

            }
        </DxFormLayout>
        @if(ContainAttachments){
            <RelationshipContainer Relationships="@FormViewModel.Relationships.Where(x=>x.Enabled).ToList()" 
                Parent="@BusinessObj.BaseObj" ContainAttachments="@ContainAttachments" BLNameParentAttatchment="@BusinessName"
                BusinessObj="@BusinessObj"/>
        }else if(FormViewModel.Relationships != null && FormViewModel.Relationships.Count > 0)
        {
             <RelationshipContainer Relationships="@FormViewModel.Relationships.Where(x=>x.Enabled).ToList()" Parent="@BusinessObj.BaseObj" />
        }
        
    @if(IsSubpanel && ShowButtons){
        <div class="buttons-container">
            @foreach (var btn in FormViewModel.Buttons)
            {
                <SDKButton RenderStyle="@btn.RenderStyle" Click="@(()=> { OnClickCustomButton(@btn); })" ResourceTag="@btn.ResourceTag" />
            }
            @if (ShowCancelButton){
                <SDKButton RenderStyle="SDKButtonRenderStyle.Cancel" Click="@((args) => dialogService.Close(false))" ResourceTag="Action.Close"/>
            }
            @if (ShowDeleteButton){
                <SDKButton RenderStyle="SDKButtonRenderStyle.Danger" Click="DeleteBusiness" ResourceTag="Action.Delete" />
            }
        </div>
    }
    @if(SetTopBar)
    {
        <PageTitle>@BusinessObj</PageTitle>
        <SetTopBar HasExtraButtons="@(FormViewModel.Buttons != null && FormViewModel.Buttons.Count > 0 ? true: false)" BusinessObj="@BusinessObj" DisableCompanies="true">
            <TopBarTitle>@BusinessObj</TopBarTitle>
            <TopBarButtons>

                @if(CanCreate){
                    if(CreateButton != null){
                        if(!CreateButton.Hidden){
                            <TopBarButton Click="GoToCreate" ResourceTag="Action.Create" IconCssClass="fa-solid fa-circle-plus" Enabled="@(!CreateButton.Disabled)"/>
                        }
                    }else{
                        <TopBarButton Click="GoToCreate" ResourceTag="Action.Create" IconCssClass="fa-solid fa-circle-plus"  />
                    }
                }
                @if(CanCreate){
                    if(DuplicateButton != null){
                        if(!DuplicateButton.Hidden){
                            <TopBarButton Click="GoToDuplicate" ResourceTag="Action.Duplicate" IconCssClass="fa-solid fa-copy" Enabled="@(!DuplicateButton.Disabled)"/>
                        }
                    }else{
                        <TopBarButton Click="GoToDuplicate" ResourceTag="Action.Duplicate" IconCssClass="fa-solid fa-copy"  />
                    }
                }
                @if(CanEdit){
                    if(EditButton != null){
                        if(!EditButton.Hidden){
                            <TopBarButton Click="GoToEdit" ResourceTag="Action.Edit" IconCssClass="fa-solid fa-pen" Enabled="@(!EditButton.Disabled)"/>
                        }
                    }else{
                        <TopBarButton Click="GoToEdit" ResourceTag="Action.Edit" IconCssClass="fa-solid fa-pen"  />
                    }
                }
                @if(CanList){
                    if(ListButton != null){
                        if(!ListButton.Hidden){
                            <TopBarButton Click="GoToList" ResourceTag="Action.List" IconCssClass="fa-solid fa-list" Enabled="@(!ListButton.Disabled)"/>
                        }
                    }else{
                        <TopBarButton Click="GoToList" ResourceTag="Action.List" IconCssClass="fa-solid fa-list"  />
                    }
                }
                @if(CanDelete){
                    if(DeleteButton != null){
                        if(!DeleteButton.Hidden){
                            <TopBarButton Click="OnClickDelete" ResourceTag="Action.Delete" IconCssClass="fa-solid fa-trash-can" Enabled="@(!DeleteButton.Disabled)"/>
                        }
                    }else{
                        <TopBarButton Click="OnClickDelete" ResourceTag="Action.Delete" IconCssClass="fa-solid fa-trash-can"  />
                    }                
                }

            </TopBarButtons>
            <TopBarExtraButtons>
                @foreach (var btn in ExtraButtons)
                {
                    if(!btn.Hidden){
                        <TopBarButton Click="@(()=> { OnClickCustomButton(@btn); })" ResourceTag="@btn.ResourceTag" IconCssClass="@btn.IconClass" Enabled="@(!btn.Disabled)"/>
                    }
                }
            </TopBarExtraButtons>
        </SetTopBar>
    }
}

@code {

    public async Task OnClickDelete()
    {
        var dialog = await dialogService.OpenAsync("",
            ds => @<ConfirmDelete DialogService=@ds />,
            new DialogOptions(){ShowTitle=false, Width="400"});

        SDKGlobalLoaderService.Show();

        if(dialog != null && dialog == true){
            await this.DeleteBusiness();
        } 
        
        SDKGlobalLoaderService.Hide();
    }
}