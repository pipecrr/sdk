@using SDK.Components.Visualization
@using Siesa.SDK.Frontend.Components.Fields
@using Siesa.SDK.Frontend.Components.FormManager.Fields
@using Siesa.SDK.Frontend.Components.Layout.Detail.Relationship
@using Siesa.SDK.Frontend.Components.Visualization
@using Siesa.SDK.Components.Visualization
@using System.Linq
@using Siesa.SDK.Frontend.Services
@using Siesa.SDK.Frontend.Components.Layout.AditionalField
@using Siesa.SDK.Shared.Services
@using Siesa.SDK.Frontend.Components.FormManager.ViewModels

@inject SDKDialogService SDKDialogService
@inject NavigationManager NavigationManager
@inject SDKGlobalLoaderService SDKGlobalLoaderService

@if (Loading == true)
{
    <ResourceViewer ResourceTag="Custom.Generic.Loading" />
}
else if ((Panels == null || Panels.Count <= 0) && !IsDocument)
{
    @* <ResourceViewer ResourceTag="Custom.Formview.NotDefinition" /> *@
    <ErrorsWindow GeneralErrors="@ErrorList" StackTrace="@StackTrace"/>
}
else if (ModelLoaded == true)
{
    if(!string.IsNullOrEmpty(ErrorMsg) || ErrorList.Count > 0 || StackTrace.Any()){
        <ErrorsWindow GeneralErrors="@ErrorList" StackTrace="@StackTrace"/>
    }
        @if(IsSubpanel && ShowTitle){
            <h5 class="d-flex justify-content-center">@BusinessObj</h5>
            <hr />
        }
    @if(ContainAttachments && !IsTableA){
        <RelationshipContainer Relationships="@FormViewModel.Relationships.Where(x=>x.Enabled).ToList()" 
                               Parent="@BusinessObj.BaseObj" ContainAttachments="@ContainAttachments" BLNameParentAttatchment="@BusinessName"
                               BusinessObj="@BusinessObj" BusinessName="@BusinessName"/>
    }else if(FormViewModel.Relationships != null && FormViewModel.Relationships.Count > 0)
    {
        <RelationshipContainer Relationships="@FormViewModel.Relationships.Where(x=>x.Enabled).ToList()" Parent="@BusinessObj.BaseObj" 
                               BusinessName="@BusinessName"/>
    }
    <DxFormLayout CaptionPosition="CaptionPosition.Vertical">
        @if(Panels?.Count > 0){
            if (!IsTableA)
            {
                <SDKCrudHeader ResourceTag="@Panels[0].ResourceTag" IconClass="@Panels[0].IconClass" ViewType="DynamicViewType.Detail">
                    <FieldsContainer Fields="@Panels[0].Fields" SubViewdef="@Panels[0].SubViewdef" ModelObj="@BusinessObj" DefaultColSize="@Panels[0].ColSize"/>
                </SDKCrudHeader>
            }
            else
            {
                <FieldsContainer Fields="@Panels[0].Fields" SubViewdef="@Panels[0].SubViewdef" ModelObj="@BusinessObj" DefaultColSize="@Panels[0].ColSize"/>
            }
        }
        @if (Panels?.Count > 1)
        {
            @if(Panels?.Count == 2)
            {
                @foreach (var panel in Panels.Skip(1))
                {
                    <div class="row pt-3">
                        <FieldsContainer Fields="@panel.Fields" SubViewdef="@panel.SubViewdef" DefaultColSize="@panel.ColSize" ModelObj="@BusinessObj" />
                    </div>
                }
                
            }else
            {
                <div class="pt-2">
                    <SDKTabs>
                        @foreach (var panel in Panels.Skip(1))
                        {
                            <SDKTab IconCssClass="@panel.IconClass" TitleResourceTag="@panel.ResourceTag">
                                <div class="row pt-3">
                                    <FieldsContainer Fields="@panel.Fields" SubViewdef="@panel.SubViewdef" DefaultColSize="@panel.ColSize" ModelObj="@BusinessObj" />
                                </div>
                            </SDKTab>
                        }
                    </SDKTabs>
                </div>
            }
        }
        @if(PanelsCollapsable?.Count>0){
            <div class="w-100">
                <SDKCollapse>
                    <Items>
                        @foreach (var panel in PanelsCollapsable)
                        {
                            <SDKCollapseItem Text="@panel.ResourceTag">
                                <div class="row">
                                    <FieldsContainer Fields="@panel.Fields" SubViewdef="@panel.SubViewdef" DefaultColSize="@panel.ColSize" ModelObj="@BusinessObj" />
                                </div>
                            </SDKCollapseItem>
                        }
                    </Items>
                </SDKCollapse>
            </div>
        }
    </DxFormLayout>
    @if(IsDocument){
        <CascadingValue Value="this">
            <SDKGridDocument BusinessObj="@BusinessObj" DetailConfig="@DetailConfig" IsDetail="true"/>
        </CascadingValue>
    }
    
    @if (HasTableA && !IsTableA)
    {
        <SDKCollapse>
            <Items>
                @foreach (var company in Companies)
                {
                    <SDKCollapseItem Text="@company.Name">
                        <DetailView BusinessName="@BusinessNameA" BusinessNameParent="@BusinessName" BusinessObjAType="@InternalBusinessObjAType" RowidCompany="@company.Rowid" IsTableA="true" IsSubpanel="true" ShowTitle="false" ShowButtons="false" ParentDetail="@this" ></DetailView>
                    </SDKCollapseItem>
                }
            </Items>
        </SDKCollapse>
    }
        
    @if(IsSubpanel && ShowButtons){
        <div class="buttons-container pt-3">
            @foreach (var btn in FormViewModel.Buttons)
            {
                <SDKButton RenderStyle="@btn.RenderStyle" Click="@(()=> { OnClickCustomButton(@btn); })" ResourceTag="@btn.ResourceTag" />
            }
            @if (ShowCancelButton){
                <SDKButton RenderStyle="SDKButtonRenderStyle.Cancel" Click="@((args) => dialogService.Close(false))" ResourceTag="Action.Close"/>
            }
            @if (ShowDeleteButton){
                <SDKButton RenderStyle="SDKButtonRenderStyle.Danger" Click="DeleteBusiness" ResourceTag="Action.Delete" />
            }
        </div>
    }
    @if(SetTopBar && !IsSubpanel)
    {
        <PageTitle>@BusinessObj | <ResourceViewer ResourceTag="Custom.Project.Name" /></PageTitle>
        <SetTopBar HasExtraButtons="@(FormViewModel.Buttons != null && FormViewModel.Buttons.Any(x => string.IsNullOrEmpty(x.Id)) ? true: false)" BusinessObj="@BusinessObj" DisableCompanies="true">
            <TopBarTitle>@BusinessObj</TopBarTitle>
            <TopBarButtons>

                @if(CanCreate){
                    if(CreateButton != null){
                        if(!CreateButton.Hidden){
                            <TopBarButton Click="GoToCreate" ResourceTag="Action.Create" IconCssClass="fa-solid fa-circle-plus" Enabled="@(!CreateButton.Disabled)"/>
                        }
                    }else{
                        <TopBarButton Click="GoToCreate" ResourceTag="Action.Create" IconCssClass="fa-solid fa-circle-plus"  />
                    }
                }
                @if(CanCreate){
                    if(DuplicateButton != null){
                        if(!DuplicateButton.Hidden){
                            <TopBarButton Click="GoToDuplicate" ResourceTag="Action.Duplicate" IconCssClass="fa-solid fa-copy" Enabled="@(!DuplicateButton.Disabled)"/>
                        }
                    }else{
                        <TopBarButton Click="GoToDuplicate" ResourceTag="Action.Duplicate" IconCssClass="fa-solid fa-copy"  />
                    }
                }
                @if(CanEdit){
                    if(EditButton != null){
                        if(!EditButton.Hidden){
                            <TopBarButton Click="GoToEdit" ResourceTag="Action.Edit" IconCssClass="fa-solid fa-pen" Enabled="@(!EditButton.Disabled)"/>
                        }
                    }else{
                        <TopBarButton Click="GoToEdit" ResourceTag="Action.Edit" IconCssClass="fa-solid fa-pen"  />
                    }
                }
                @if(CanAcess){
                    if(ListButton != null){
                        if(!ListButton.Hidden){
                            <TopBarButton Click="GoToList" ResourceTag="Action.List" IconCssClass="fa-solid fa-list" Enabled="@(!ListButton.Disabled)"/>
                        }
                    }else{
                        <TopBarButton Click="GoToList" ResourceTag="Action.List" IconCssClass="fa-solid fa-list"  />
                    }
                }
                @if(CanDelete){
                    if(DeleteButton != null){
                        if(!DeleteButton.Hidden){
                            <TopBarButton Click="OnClickDelete" ResourceTag="Action.Delete" IconCssClass="fa-solid fa-trash-can" Enabled="@(!DeleteButton.Disabled)"/>
                        }
                    }else{
                        <TopBarButton Click="OnClickDelete" ResourceTag="Action.Delete" IconCssClass="fa-solid fa-trash-can"  />
                    }                
                }

            </TopBarButtons>
            <TopBarExtraButtons>
                @foreach (var btn in ExtraButtons.Where(x => string.IsNullOrEmpty(x.Id)))
                {
                    if(!btn.Hidden){
                        <TopBarButton Click="@(()=> { OnClickCustomButton(@btn); })" ResourceTag="@btn.ResourceTag" IconCssClass="@btn.IconClass" Enabled="@(!btn.Disabled)"/>
                    }
                }
            </TopBarExtraButtons>
        </SetTopBar>
    }
}

@code {

    public async Task OnClickDelete()
    {
        var dialog = await dialogService.OpenAsync("",
            ds => @<ConfirmDelete DialogService=@ds />,
            new DialogOptions(){ShowTitle=false, Width="400"});

        SDKGlobalLoaderService.Show();

        if(dialog != null && dialog == true){
            await this.DeleteBusiness();
        } 
        
        SDKGlobalLoaderService.Hide();
    }
     public async Task ConfirmDelete(int Rowid)
    {
        var confirmDelete = await SDKDialogService.ShowConfirmDialog(@<div class="col-12 p-0"><ResourceViewer ResourceTag="Esta seguro que desea eliminar los campos adicionales?"/></div>);
        if(confirmDelete != null && confirmDelete == true){
            bool deleteGroup = await DeleteGroup(Rowid);
            if(deleteGroup){
                var currentUrl = NavigationManager.Uri;
                NavigationService.NavigateTo(currentUrl, true);
            }
                
        }
    }

    public async Task ClickInAdd(int Rowid)
    {   
        var responseDynamicEntity = await BusinessObj.Backend.Call("GetDynamicEntity", Rowid);
        if(responseDynamicEntity != null && responseDynamicEntity.Success){
            dynamic dynamicEntity = responseDynamicEntity.Data;
            var modal = await SDKDialogService.ShowCustomDialog(ds =>@<AditionalFields Business="@BusinessObj" IsCreate="true" DynamicEntity="dynamicEntity"/>,
                    ShowTitle: false,
                    standardWidth: SDKModalWidth.Large,
                    CssClass: "aditional_fields_padding_0"
                );
            if(modal != null && modal == true){
                await ModalConfirmMessage(modal);
            }
        }
    }

    public async Task ClickInEdit(int Rowid)
    {
        var responseDynamicEntity = await BusinessObj.Backend.Call("GetDynamicEntity", Rowid);
        if(responseDynamicEntity != null && responseDynamicEntity.Success){
            dynamic dynamicEntity = responseDynamicEntity.Data;
            var modal = await SDKDialogService.ShowCustomDialog(ds =>@<AditionalFields Business="@BusinessObj" IsEdit="true" DynamicEntity="dynamicEntity"/>,
                    ShowTitle: false,
                    standardWidth: SDKModalWidth.Large,
                    CssClass: "aditional_fields_padding_0"
                );
            if(modal != null && modal == true){
                await ModalConfirmMessage(modal);
            }
        }
    }

    public async Task ModalConfirmMessage(bool response){
        var confirm = await SDKDialogService.ShowConfirmDialog(@<div class="col-12 p-0"><ResourceViewer ResourceTag="Custom.AditionalFields.ConfirmMessage"/></div>);
        if(confirm != null && confirm == true){
            var currentUrl = NavigationManager.Uri;
            NavigationService.NavigateTo(currentUrl, true);
        }
    }
}