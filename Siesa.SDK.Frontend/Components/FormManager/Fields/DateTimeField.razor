@typeparam TDate
@inherits FieldClass<TDate>
@using System.Linq.Expressions
@if (!FieldOpt.Hidden)
{
    @FieldValidationTemplate

    <DxDateEdit 
        T="TDate"
        NullText="@FieldOpt.Placeholder"
        ReadOnly="@(FieldOpt.Disabled)"
        Date="@(BindValue)"
        DateChanged="@((str) => { SetValue(str); })"
        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
        PickerDisplayMode="DatePickerDisplayMode.Auto"
        field-name="@FieldOpt.Name"
        DateExpression="@DateExpression"
        TimeSectionVisible="@ShowTime"        
    />
}


@code {
    Expression<Func<TDate>> DateExpression { get; set; }
    private RenderFragment? _fieldValidationTemplate;

    [Parameter] public bool ShowTime { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        var access = Expression.Property(Expression.Constant(BindModel, BindModel.GetType()), FieldName);
        DateExpression = (Expression<Func<TDate>>)Expression.Lambda(typeof(Func<>).MakeGenericType(typeof(TDate)), access);
    }
}