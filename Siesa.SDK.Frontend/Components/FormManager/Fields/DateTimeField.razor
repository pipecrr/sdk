@typeparam TDate
@inherits FieldClass<TDate>
@using System.Linq.Expressions
@using Siesa.SDK.Frontend.Components.Fields
@if (!FieldOpt.Hidden)
{
    @FieldValidationTemplate

    @if(typeof(TDate) == typeof(DateTime) || typeof(TDate) == typeof(DateTime?) )
    {  
        <SDKDateTimeField 
        ItemType="TDate" 
        ReadOnly="@(FieldOpt.Disabled)" 
        Value="@(BindValue)" 
        ValueChanged="@((str) => { SetValue(str); })" 
        ClearButton="true" 
        ValueExpression="@DateExpression"
        ResourceTag="@FieldOpt.Name"
        Placeholder="@FieldOpt.Placeholder"
        />

    }else
    {
        <DxDateEdit 
            T="TDate"
            NullText="@FieldOpt.Placeholder"
            ReadOnly="@(FieldOpt.Disabled)"
            Date="@(BindValue)"
            DateChanged="@((str) => { SetValue(str); })"
            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
            PickerDisplayMode="DatePickerDisplayMode.Auto"
            field-name="@FieldOpt.Name"
            DateExpression="@DateExpression"
            TimeSectionVisible="@ShowTime" 
            data-automation-id="@GetDataAutomationId()"
            
        />
    }  
}


@code {
    Expression<System.Func<TDate>> DateExpression { get; set; }
    private RenderFragment? _fieldValidationTemplate;

    [Parameter] public bool ShowTime { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        var access = Expression.Property(Expression.Constant(BindModel, BindModel.GetType()), FieldName);
        DateExpression = (Expression<Func<TDate>>)Expression.Lambda(typeof(Func<>).MakeGenericType(access.Type), access);
    }

    private string GetDataAutomationId()
    {
        return $"DateTimeField_{FieldOpt.Name}";
    }
}