@using Siesa.SDK.Frontend.Components.Fields
@using System.Linq.Expressions
@using Siesa.SDK.Frontend.Application
@using System.Collections.Generic
@using System.Linq
@typeparam TItem
@inherits FieldClass<TItem>
@using Siesa.SDK.Shared.Services
@inject IAuthenticationService AuthenticationService
@inject IBackendRouterService BackendRouterService
@inject IResourceManager ResourceManager

<SDKSelectField 
    ItemType="TItem"
    Options="@Options" 
    Placeholder="@FieldOpt.Placeholder"
    ReadOnly="@(FieldOpt.Disabled)"
    Value="@BindValue"
    ValueChanged="@((newVal) => SetValue(newVal))"
    ValueExpression="@ValueExpression"
    FieldName="@FieldOpt.Name"
    @ref="_refField"
    OnFocusOut = "@OnFocusOutAction"
    IsSearch="@IsSearch"
    />
@FieldValidationTemplate

@code{
    private SDKSelectField<TItem> _refField;
    Expression<Func<TItem>> ValueExpression { get; set; }
    [Parameter] public IEnumerable<SDKEnumWrapper<TItem>> Options {get; set;}
    
    private bool IsSearch { get; set; }

    private Type enumType { get; set; }

    private Action OnFocusOutAction { get; set; } = () => {};
    protected override void OnInitialized()
    {
        if (ViewdefName == "search")
        {
            IsSearch = true; 
        }
        
        base.OnInitialized();
        var access = Expression.Property(Expression.Constant(BindModel, BindModel.GetType()), FieldName);
        ValueExpression = (Expression<Func<TItem>>)Expression.Lambda(typeof(Func<>).MakeGenericType(typeof(TItem)), access);

         OnFocusOutAction = () => { CheckUniqueValue(); };
    }
}