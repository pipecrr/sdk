@using Siesa.SDK.Frontend.Components.Fields
@using System.Linq.Expressions
@typeparam TItem
@inherits FieldClass<TItem>
@using Siesa.SDK.Shared.Services
@inject IAuthenticationService AuthenticationService

<SDKSelectField 
    ItemType="TItem"
    Options="@_options" 
    Placeholder="@FieldOpt.Placeholder"
    ReadOnly="@(FieldOpt.Disabled)"
    Value="@BindValue"
    ValueChanged="@((newVal) => SetValue(newVal))"
    ValueExpression="@ValueExpression"
    TextProperty="DisplayText"
    ValueProperty="Type"
    />
@FieldValidationTemplate

@code{

    Expression<Func<TItem>> ValueExpression { get; set; }
    [Parameter] public IEnumerable<SDKEnumWrapper<TItem>> Options {get; set;}
    private IEnumerable<SDKEnumWrapper<TItem>> _options {
        get{
            if(Options == null){
                GetEnumValues();
                Options = Enum.GetValues(typeof(TItem)).OfType<TItem>().Select(x => new SDKEnumWrapper<TItem>{
                    Type = x,
                    DisplayText = $"Enum.{typeof(TItem).Name}.{x.ToString()}"
                });
            }
            return Options;
        }
    }

    private async Task GetEnumValues()
    {
        var resourceBL = Frontend.BusinessManagerFrontend.Instance.GetBusiness("BLResource", AuthenticationService);
        var request = await resourceBL.Call("GetEnumValues", typeof(TItem).Name, Convert.ToInt64(AuthenticationService.User.RowidCulture));
        if(request.Success){
            var enumValues = (Dictionary<byte, string>)request.Data;
            Options = enumValues.Select(x => new SDKEnumWrapper<TItem>{
                Type = (TItem)Enum.Parse(typeof(TItem), x.Key.ToString()),
                DisplayText = x.Value
            });
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        var access = Expression.Property(Expression.Constant(BindModel, BindModel.GetType()), FieldName);
        ValueExpression = (Expression<Func<TItem>>)Expression.Lambda(typeof(Func<>).MakeGenericType(typeof(TItem)), access);
    }
}