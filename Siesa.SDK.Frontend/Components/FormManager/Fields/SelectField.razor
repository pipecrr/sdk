@using Siesa.SDK.Frontend.Components.Fields
@using System.Linq.Expressions
@typeparam TItem
@inherits FieldClass<TItem>

<SDKSelectField 
    ItemType="TItem"
    Options="@_options" 
    Placeholder="@FieldOpt.Placeholder"
    ReadOnly="@(FieldOpt.Disabled)"
    Value="@BindValue"
    ValueChanged="@((newVal) => SetValue(newVal))"
    ValueExpression="@ValueExpression"
    TextProperty="DisplayText"
    ValueProperty="Type"
    />
@FieldValidationTemplate

@code{

    Expression<Func<TItem>> ValueExpression { get; set; }
    [Parameter] public IEnumerable<SDKEnumWrapper<TItem>> Options {get; set;}
    private IEnumerable<SDKEnumWrapper<TItem>> _options {
        get{
            if(Options == null){
                Options = Enum.GetValues(typeof(TItem)).OfType<TItem>().Select(x => new SDKEnumWrapper<TItem>{
                    Type = x,
                    DisplayText = x.ToString() //todo: get displayname attribute
                });
            }
            return Options;
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        var access = Expression.Property(Expression.Constant(BindModel, BindModel.GetType()), FieldName);
        ValueExpression = (Expression<Func<TItem>>)Expression.Lambda(typeof(Func<>).MakeGenericType(typeof(TItem)), access);
    }
}