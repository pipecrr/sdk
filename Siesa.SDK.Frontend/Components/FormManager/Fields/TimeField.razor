@typeparam TTime
@inherits FieldClass<TTime>
@using System.Linq.Expressions
@if (!FieldOpt.Hidden)
{
    @FieldValidationTemplate

    <DxTimeEdit 
        T="TTime"
        NullText="@FieldOpt.Placeholder"
        ReadOnly="@(FieldOpt.Disabled)"
        Time="@(BindValue)"
        TimeChanged="@((str) => { SetValue(str); })"
        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
        PickerDisplayMode="DatePickerDisplayMode.Auto"
        field-name="@FieldOpt.Name"
        TimeExpression="@TimeExpression"
        data-automation-id="@GetDataAutomationId()"
    />
}


@code {
    Expression<Func<TTime>> TimeExpression { get; set; }
    private RenderFragment? _fieldValidationTemplate;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        var access = Expression.Property(Expression.Constant(BindModel, BindModel.GetType()), FieldName);
        TimeExpression = (Expression<Func<TTime>>)Expression.Lambda(typeof(Func<>).MakeGenericType(typeof(TTime)), access);
    }

    private string GetDataAutomationId()
    {
        return $"TimeField_{FieldOpt.Name}";
    }
}