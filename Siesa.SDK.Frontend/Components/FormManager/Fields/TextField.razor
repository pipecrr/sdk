@inherits FieldClass<string>
@using System.Linq.Expressions
@if (!FieldOpt.Hidden)
{
    @FieldTemplate
    @if (FieldOpt.ViewContext != "DetailView"){

        @FieldValidationTemplate
    }
}


@code {
    private RenderFragment? _fieldValidationTemplate;
    public RenderFragment? FieldTemplate
    {
        get
        {

            return _fieldValidationTemplate != null ? _fieldValidationTemplate : builder =>
            {
                var access = Expression.Property(Expression.Constant(BindModel, BindModel.GetType()), FieldName);
                var lambda = Expression.Lambda(typeof(Func<>).MakeGenericType(typeof(string)), access);

                builder.OpenComponent(0, typeof(DxMemo));
                builder.AddAttribute(1, "TextExpression", lambda);
                builder.AddAttribute(2, "Text", (string)BindValue);
                builder.AddAttribute(3, "TextChanged", EventCallback.Factory.Create<System.String>(this, str => { SetValue(str); }));
                builder.AddAttribute(4, "NullText", FieldOpt.Placeholder);
                builder.AddAttribute(5, "CssClass", (IsRequired && (BindValue == null || BindValue.Length == 0) ? "invalid" : "") + FieldOpt.CssClass);
                builder.AddAttribute(6, "ReadOnly", FieldOpt.Disabled || FieldOpt.ViewContext == "DetailView");
                builder.AddAttribute(7, "ClearButtonDisplayMode", DataEditorClearButtonDisplayMode.Auto);
                builder.AddAttribute(8, "maxlength", MaxLength > 0 ? MaxLength : null);
                builder.AddAttribute(9, "field-name", FieldOpt.Name);
                builder.AddAttribute(10, "data-automation-id", $"TextField_{FieldOpt.Name}");
                builder.CloseComponent();
            };

        }
    }
}