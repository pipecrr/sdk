@using Siesa.SDK.Frontend.Components.Fields
@using System.Linq.Expressions
@using SDK.Frontend.Application
@using System.Collections.Generic
@using Siesa.SDK.Frontend.Components.FormManager.ViewModels
@using System.Linq
@using Siesa.SDK.Shared.Services
@using Siesa.SDK.Frontend.Application
@typeparam TItem
@inherits FieldClass<TItem>
@using Siesa.SDK.Shared.Services
@inject IAuthenticationService AuthenticationService
@inject IBackendRouterService BackendRouterService
@inject IResourceManager ResourceManager
@inject IResourceManager ResourceManager

@if (!FieldOpt.Hidden)
{
    @* @if (FieldOpt.ViewContext == "DetailView")
    {
        <p style="word-wrap: break-word">@if (BindValue != null)
            {
                <ResourceViewer ResourceTag="@_value" />
            }
        </p>
    } *@
        <SDKSelectBar 
            ItemType="TItem"
            Value="@BindValue"
            ValueChanged="@((newVal) => SetValue(newVal))"
            Data="@_options"
            Disabled="@_disabled"
            ValueExpression="@ValueExpression"
            FieldName="@FieldName" 
            AffirmationResourceTag="@AffirmationTag"
            DenialResourceTag="@DenialTag"
        />

        @FieldValidationTemplate
}

@code {

    private bool _disabled;
    [Parameter] public IEnumerable<SelectBarItemWrap<TItem>> Options { get; set; }       
    Expression<Func<TItem>> ValueExpression { get; set; }
    private Type enumType { get; set; }

    private bool fixValues = false;

    public string AffirmationTag => GetCustomAttributeValue("BooleanYesResourceTag");
    public string DenialTag => GetCustomAttributeValue("BooleanNoResourceTag");

    private IEnumerable<SelectBarItemWrap<TItem>> _options {get; set;} = Enumerable.Empty<SelectBarItemWrap<TItem>>();


    private void isDisabled()
    {
        _disabled = (FieldOpt.Disabled || FieldOpt.ViewContext == "DetailView");
    }
    
    private string GetCustomAttributeValue(string attributeName)
    {
        if (FieldOpt.CustomAttributes?.Count > 0 && typeof(TItem) == typeof(bool))
        {
            return FieldOpt.CustomAttributes.FirstOrDefault(x => x.Key == attributeName).Value?.ToString();
        }
        return string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        await GetEnumValues();

        await base.OnInitializedAsync();
        var access = Expression.Property(Expression.Constant(BindModel, BindModel.GetType()), FieldName);
        ValueExpression = (Expression<Func<TItem>>)Expression.Lambda(typeof(Func<>).MakeGenericType(typeof(TItem)), access);
        isDisabled();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        isDisabled();
    }

    private async Task GetEnumValues()
    {
        enumType = typeof(TItem);

        if (typeof(TItem).IsGenericType && typeof(TItem).GetGenericTypeDefinition() == typeof(Nullable<>))
        {
            enumType = typeof(TItem).GetGenericArguments()[0];
        }

        Dictionary<byte, string> enumValues = await ResourceManager.GetEnumValues(enumType.Name, AuthenticationService.GetRoiwdCulture());

        if (enumValues == null || enumValues.Count == 0)
        {
            return;
        }

        try
        {
            if (ViewdefName == "search")
            {
                var SelectAllName = await ResourceManager.GetResource("Custom.Enum.SelectAll", AuthenticationService);
                _options = _options.Append(new SelectBarItemWrap<TItem>
                {
                    Key = (TItem)Enum.Parse(enumType, (enumValues.Select(x => x.Key).Last() + 1).ToString()),
                    Name = SelectAllName
                });
                BindValue = _options.Select(x => x.Key).First();
            } 
        }
        catch (System.Exception)
        {
            
            throw;
        }

        foreach (var option in enumValues)
        {
            _options = _options.Append(new SelectBarItemWrap<TItem>
            {
                Key = (TItem)Enum.Parse(enumType, option.Key.ToString()),
                Name = option.Value
            });
        }
        
        StateHasChanged();
    }

       

   /*string? _value
    {
        get
        {
            if (BindValue == null) return null;
            Type enumType = typeof(TItem);
            if (typeof(TItem).IsGenericType && typeof(TItem).GetGenericTypeDefinition() == typeof(Nullable<>))
            {
                enumType = typeof(TItem).GetGenericArguments()[0];
            }
            return $"Enum.{enumType.Name}.{BindValue}";
        }
    }*/

}
