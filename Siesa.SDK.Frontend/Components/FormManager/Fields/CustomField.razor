@if (!FieldOpt.Hidden)
{
    <DynamicComponent Type="@componentType" Parameters="@parameters" />
}

@code {
    [Parameter] public CustomComponent Definition { get; set; }
    [Parameter] public FieldOptions FieldOpt { get; set; }
    [Parameter] public object BindModel { get; set; }
    [Parameter] public string FieldName { get; set; }
    [Parameter] public object BaseModelObj { get; set; }
    [Parameter] public object BaseObj { get; set; }

    private Type componentType;
    private IDictionary<string, object> parameters = new Dictionary<string, object>();


    private void SetParameters(){
        if(componentType == null){
            componentType = Utils.Utils.SearchType($"{Definition.Namespace}.{Definition.Name}");
        }
        parameters.Clear();
        Dictionary<string, object> Attributes = Definition.Attributes;

        if(Attributes != null)
        {
            //check if the component has a parameter named "Business"
            if(componentType.GetProperties().Any(x => x.Name == "Business"))
            {
                parameters.Add("Business", BaseModelObj);
            }
            if(componentType.GetProperties().Any(x => x.Name == "BaseObj"))
            {
                parameters.Add("BaseObj", BaseObj);
            }

            for(int i = 0; i < Attributes.Count; i++)
            {
                var key = Attributes.ElementAt(i).Key;
                var value = Attributes.ElementAt(i).Value;
                if(value.GetType().Name == "String" && Definition.EvaluateAttributes)
                {
                    dynamic dynamicValue = Utils.Evaluator.EvaluateCode(value.ToString(), BaseModelObj).GetAwaiter().GetResult();
                    //wait for the value to be evaluated
                    if(dynamicValue == null){
                        dynamicValue = "";
                    }
                    parameters.Add(key, dynamicValue);
                }else{
                    parameters.Add(key, value);
                }
            }
        }

    }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        SetParameters();
    }

    @* protected override void OnParametersSet()
    {
        base.OnParametersSet();
        SetParameters();
    } *@
}

