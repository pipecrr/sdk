@inherits FieldClass<object>
@using Siesa.SDK.Shared.Services
@inject IAuthenticationService AuthenticationService
@inject IBackendRouterService BackendRouterService

<a href="@RelatedEntityURL"><p style="word-wrap: break-word">@Label</p></a>

@code {
    private string _relatedEntityURL;
    private string Label;
    private bool _isLoaded;

    private async Task GetObjectString(string relBusiness, Int64 relRowid)
    {
        if(_isLoaded)
        {
            return;
        }
        var backend = BackendRouterService.GetSDKBusinessModel(relBusiness, AuthenticationService);
        var request = await backend.Call("GetObjectString", relRowid);
        if(request.Success)
        {
            Label = (string)request.Data;
            _isLoaded = true;
        }
        StateHasChanged();
    }

    private string ObtainEntityURL(){

        if (FieldOpt.RelatedBusiness == "" || BindValue == null)
        {
            return "";
        }
        var typeRelatedEntity = BindValue.GetType();
        // Checks if contains a property named "ID" or "Rowid" and returns the value of it
        var idProperty = typeRelatedEntity.GetProperty("Rowid");
        if(idProperty == null)
        {
            idProperty = typeRelatedEntity.GetProperty("ID");
        }
        if (idProperty != null)
        {
            var rowidValue = idProperty.GetValue(BindValue);
            _relatedEntityURL = $"/{FieldOpt.RelatedBusiness}/detail/{rowidValue}/";
            _ = GetObjectString(FieldOpt.RelatedBusiness, Convert.ToInt64(rowidValue));
            return _relatedEntityURL;
        }
        
        return "";
    } 

    public string RelatedEntityURL { get
        {
            return _relatedEntityURL != "" && _relatedEntityURL != null ? _relatedEntityURL : ObtainEntityURL();
        } }

    private void SetLocalLabel()
    {
        if (BindValue == null)
        {
            Label = "";
        }
        else
        {
            try
            {
                Label = BindValue.ToString();
            }
            catch (System.Exception)
            {
                Label = "";
            }
        }
    }

    protected override void OnInitialized()
    {
        SetLocalLabel();
        base.OnInitialized();
    }
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        _relatedEntityURL = null;
        _isLoaded = false;
        await base.SetParametersAsync(parameters);
        SetLocalLabel();
    }
}