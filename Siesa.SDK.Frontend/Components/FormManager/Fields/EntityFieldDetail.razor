@inherits FieldClass<object>
@using Siesa.SDK.Shared.Services
@using Siesa.Global.Enums
@inject IAuthenticationService AuthenticationService
@inject IBackendRouterService BackendRouterService
@inject SDKDialogService SDKDialogService
@inject IFeaturePermissionService FeaturePermissionService
@if (_canDetail)
{
    <a href="#" @onclick="@OnClick" @onclick:preventDefault>
        <p style="word-wrap: break-word">@_label</p>
    </a>
}
else
{
    <p style="word-wrap: break-word">@_label</p>
}

@code {
    private string _relatedEntityURL;
    private string _label;
    private bool _isLoaded;
    private string _rowidValue;
    private bool _canDetail;

    private async Task GetObjectString(string relBusiness, long relRowid)
    {
        if (_isLoaded)
        {
            return;
        }
        var backend = BackendRouterService.GetSDKBusinessModel(relBusiness, AuthenticationService);
        var request = await backend.Call("GetObjectString", relRowid);
        if (request.Success)
        {
            _label = (string)request.Data;
            _isLoaded = true;
        }
        StateHasChanged();
    }

    private async Task OnClick()
    {
        if (FieldOpt.RelatedBusiness == "" || BindValue == null || !_canDetail)
        {
            return;
        }
        await SDKDialogService.ShowCustomDialog((_)=>@<DynamicDetailView BusinessName="@FieldOpt.RelatedBusiness" BusinessObjId="@_rowidValue" IsSubpanel="true" ShowTitle="false"/>, width: "90%", title: $"{FieldOpt.RelatedBusiness}.Singular");
    }

    private async Task ObtainEntityURL()
    {
        if (FieldOpt.RelatedBusiness == "" || BindValue == null)
        {
            return;
        }
        _canDetail = await FeaturePermissionService.CheckUserActionPermission(@FieldOpt.RelatedBusiness, enumSDKActions.Detail, AuthenticationService).ConfigureAwait(true);
        var typeRelatedEntity = BindValue.GetType();
    // Checks if contains a property named "ID" or "Rowid" and returns the value of it
        var idProperty = typeRelatedEntity.GetProperty("Rowid");
        if (idProperty == null)
        {
            idProperty = typeRelatedEntity.GetProperty("ID");
        }
        if (idProperty != null)
        {
            _rowidValue = idProperty.GetValue(BindValue) != null ? idProperty.GetValue(BindValue)?.ToString() : null;
            _relatedEntityURL = $"/{FieldOpt.RelatedBusiness}/detail/{_rowidValue}/";
            await GetObjectString(FieldOpt.RelatedBusiness, Convert.ToInt64(_rowidValue));
        }
        StateHasChanged();
    }

    private void SetLocalLabel()
    {
        if (BindValue == null)
        {
            _label = "";
        }
        else
        {
            try
            {
                _label = BindValue.ToString();
            }
            catch (Exception)
            {
                _label = "";
            }
        }
    }

    protected override void OnInitialized()
    {
        SetLocalLabel();
        base.OnInitialized();
        _ = ObtainEntityURL();
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        _relatedEntityURL = null;
        _isLoaded = false;
        _rowidValue = null;
        await base.SetParametersAsync(parameters);
        SetLocalLabel();
        _ = ObtainEntityURL();
    }

}