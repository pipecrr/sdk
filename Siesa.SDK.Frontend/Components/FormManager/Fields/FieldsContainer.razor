@using Siesa.SDK.Frontend.Components.Fields

@if(SubViewdef != null && SubViewdef.Panels != null && SubViewdef.Panels.Count > 0){
    ModelObj.AddRelFieldToSave(SubViewdef.ParentField.Replace("BaseObj.",""));
     @if (SubViewdef.Panels.Count > 1)
    {
        <DxFormLayoutTabPages ScrollMode="TabsScrollMode.Auto">
            @foreach (var panel in SubViewdef.Panels)
            {
                <SDKFormLayoutTabPage ResourceTag="@panel.ResourceTag" @key="@panel.PanelId">
                    <FieldsContainer Fields="@panel.Fields" SubViewdef="@panel.SubViewdef" ModelObj="@ModelObj" DefaultColSize="@panel.ColSize" ValidateForm="@ValidateForm" />
                </SDKFormLayoutTabPage>
            }
        </DxFormLayoutTabPages>

    }
    else
    {
        <FieldsContainer Fields="@SubViewdef.Panels[0].Fields" SubViewdef="@SubViewdef.Panels[0].SubViewdef" ModelObj="@ModelObj" DefaultColSize="@SubViewdef.Panels[0].ColSize" ValidateForm="@ValidateForm" />
    }
}else{

    @foreach(FieldOptions fld in Fields)
    {
        @if(!fld.Hidden){
            <SDKFormLayoutItem ResourceTag="@fld.ResourceTag" ShowLabel="@fld.ShowLabel"
                            ColSizeMd="@GetColSize(fld,"MD")"
                            ColSizeLg="@GetColSize(fld,"LG")"
                            ColSizeXl="@GetColSize(fld,"XL")"
                            ColSizeSm="@GetColSize(fld,"SM")"
                            ColSizeXs="@GetColSize(fld,"XS")"
                            ShowRequiredSymbol="@ShowRequiredSymbol(fld)"
                            @key="@GetItemUniqueId(fld)"
                            >
                @if(fld.ViewContext == "DetailView"){
                    <div class="field-detail-container">
                        <DynamicField FieldOpt="@fld" ModelObj="@ModelObj" @key="@GetItemUniqueId(fld, true)" ValidateField="@ValidateForm" />
                    </div>
                }else{
                    <DynamicField FieldOpt="@fld" ModelObj="@ModelObj" @key="@GetItemUniqueId(fld, true)" ValidateField="@ValidateForm" />
                }
                
            </SDKFormLayoutItem>
        }
        
    }
}



@code {
    [Parameter] public List<FieldOptions> Fields { get; set; }
    [Parameter] public SubViewdef SubViewdef { get; set; }

    [Parameter] public dynamic ModelObj { get; set; }
    [Parameter] public Dictionary<string, int> DefaultColSize { get; set; }
    
    [Parameter] public bool ValidateForm { get; set; } = true;

    private string UniqueId;

    protected override void OnInitialized()
    {
        UniqueId = Guid.NewGuid().ToString();
        base.OnInitialized();
    }

    private string GetItemUniqueId(FieldOptions fld, bool isChild = false)
    {
        return $"{UniqueId}-{fld.Name}-{isChild}";
    }

    private int GetColSize(FieldOptions fld, string screen_size)
    {
        var colsize = DefaultColSize.ContainsKey(screen_size) ? DefaultColSize[screen_size] : 0;

        if (fld.ColSize.ContainsKey(screen_size))
        {
            colsize = fld.ColSize[screen_size];
        }

        return colsize;

    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.TryGetValue<dynamic>(nameof(ModelObj), out var value))
        {
            if (value != ModelObj)
            {
                UniqueId = Guid.NewGuid().ToString();
                StateHasChanged();
            }
        }
        return base.SetParametersAsync(parameters);
    }

    private bool ShowRequiredSymbol(FieldOptions fld)
    {
        if(fld.ViewContext == "DetailView"){
            return false;
        }

        return fld.Required;
    }
}
