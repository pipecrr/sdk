@inherits FieldClass<DateOnly>
@using System.Linq.Expressions
@if (!FieldOpt.Hidden)
{
    @FieldValidationTemplate

    <DxDateEdit 
        T="DateTime"
        NullText="@FieldOpt.Placeholder"
        ReadOnly="@(FieldOpt.Disabled)"
        Date="@(BindValue.ToDateTime(TimeOnly.MinValue))"
        DateChanged="@((str) => { SetValue(DateOnly.FromDateTime(str)); })"
        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
        PickerDisplayMode="DatePickerDisplayMode.Auto"
        field-name="@FieldOpt.Name"
        DateExpression="@(()=> _value)"
        TimeSectionVisible="@ShowTime"        
    />
}


@code {
    Expression<Func<DateTime>> DateExpression { get; set; }
    private RenderFragment? _fieldValidationTemplate;

    [Parameter] public bool ShowTime { get; set; }

    DateTime _value {get{
       return BindValue.ToDateTime(TimeOnly.MinValue);
    }}

    protected override void OnInitialized()
    {
        base.OnInitialized();
        var access = Expression.Property(Expression.Constant(BindModel, BindModel.GetType()), FieldName);
        //DateExpression = (Expression<Func<DateTime>>)Expression.Lambda(typeof(Func<>).MakeGenericType(typeof(DateTime)), access);

        DateExpression = () => _value;
    }
}