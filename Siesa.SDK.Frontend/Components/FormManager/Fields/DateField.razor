@typeparam TDate
@inherits FieldClass<TDate>
@using System.Linq.Expressions
@if (!FieldOpt.Hidden)
{
    @FieldValidationTemplate

    <DxDateEdit 
        T="DateTime?"
        NullText="@FieldOpt.Placeholder"
        ReadOnly="@(FieldOpt.Disabled)"
        Date="@(_value)"
        DateChanged="@((str) => { OnDateChanged(str); })"
        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
        PickerDisplayMode="DatePickerDisplayMode.Auto"
        field-name="@FieldOpt.Name"
        DateExpression="@(()=> _value)"
        TimeSectionVisible="@ShowTime"
        data-automation-id="@GetDataAutomationId()"
        
    />
}


@code {
    Expression<Func<DateTime?>> DateExpression { get; set; }
    private RenderFragment? _fieldValidationTemplate;

    [Parameter] public bool ShowTime { get; set; }

    DateTime? _value {get{
        TDate currentValue = BindValue;
        DateOnly? dateOnly = currentValue as DateOnly?;
        if(!dateOnly.HasValue)
        {
            return null;
        }
        DateTime? currentValueDt = (currentValue as DateOnly?).Value.ToDateTime(TimeOnly.MinValue);


        if(currentValueDt != null && currentValueDt != DateTime.MinValue){
            return currentValueDt;
        }
        return null;
    }}

    void OnDateChanged(DateTime? newValue) {
        TDate valueToSet;
        if(newValue == null)
        {
            valueToSet = default(TDate);
        }else{
            valueToSet = (TDate)(object)DateOnly.FromDateTime(newValue.Value);
        }
        
        SetValue(valueToSet);

    }

    private string GetDataAutomationId()
    {
        return $"DateField_{FieldOpt.Name}";
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        var access = Expression.Property(Expression.Constant(BindModel, BindModel.GetType()), FieldName);
        //DateExpression = (Expression<Func<DateTime>>)Expression.Lambda(typeof(Func<>).MakeGenericType(typeof(DateTime)), access);

        DateExpression = () => _value;
    }
}