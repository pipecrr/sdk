@inherits FieldClass<DateOnly>
@using System.Linq.Expressions
@if (!FieldOpt.Hidden)
{
    @FieldValidationTemplate

    <DxDateEdit 
        T="DateTime?"
        NullText="@FieldOpt.Placeholder"
        ReadOnly="@(FieldOpt.Disabled)"
        Date="@(_value)"
        DateChanged="@((str) => { SetValue(DateOnly.FromDateTime(str.Value)); })"
        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
        PickerDisplayMode="DatePickerDisplayMode.Auto"
        field-name="@FieldOpt.Name"
        DateExpression="@(()=> _value)"
        TimeSectionVisible="@ShowTime"
    />
}


@code {
    Expression<Func<DateTime?>> DateExpression { get; set; }
    private RenderFragment? _fieldValidationTemplate;

    [Parameter] public bool ShowTime { get; set; }

    DateTime? _value {get{
        if(BindValue != null && BindValue.ToDateTime(TimeOnly.MinValue) != DateTime.MinValue){
            return BindValue.ToDateTime(TimeOnly.MinValue);
        }
        return null;
    }}

    protected override void OnInitialized()
    {
        base.OnInitialized();
        var access = Expression.Property(Expression.Constant(BindModel, BindModel.GetType()), FieldName);
        //DateExpression = (Expression<Func<DateTime>>)Expression.Lambda(typeof(Func<>).MakeGenericType(typeof(DateTime)), access);

        DateExpression = () => _value;
    }
}