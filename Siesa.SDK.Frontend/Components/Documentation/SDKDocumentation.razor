@page "/sdk-docs/"
@page "/sdk-docs/{pComponentName}/"
@using SDK.Components.Visualization
@using Siesa.SDK.Frontend.Components
@using Siesa.SDK.Frontend.Components.Documentation.Visualization
@using Siesa.SDK.Frontend.Components.Visualization
@using Siesa.SDK.Frontend.Services
@using Siesa.SDK.Frontend.Components.Fields
@using Siesa.SDK.Frontend.Components.Documentation.Fields
@using Siesa.SDK.Frontend.Components.Documentation.FormManager
@using Siesa.SDK.Frontend.Components.Documentation.Layout
@using Siesa.SDK.Frontend.Components.Documentation.ViewsBuilder
@using Siesa.SDK.Frontend.Components.Documentation.DataAnnotations
@using Siesa.SDK.Frontend.Components.Documentation.SDKServices

@inject IJSRuntime JSRuntime


@layout EmptyLayout
<SDKGlobalLoader />
<SDKCard StyleCss="cardmenu-content">
    <DxMenu Title="SDK Components" DropDownActionMode="MenuDropDownActionMode.Click" CollapseItemsToHamburgerMenu="true" Orientation="@SDKEnums.GetOrientationMenu(SDKOrientationMenu.Horizontal)" 
        CollapseItemToIconMode="MenuCollapseItemToIconMode.Sequentially">
        <Items>
            @foreach (var cat in Category)
            {
                <DxMenuItem Text="@cat.Name" IconCssClass="@cat.Icon">
                    <Items>
                    @foreach (var subitem in cat.Components)
                    {
                        <DxMenuItem Text="@subitem.ComponentName" NavigateUrl="@GetNavigateUrl(subitem)" /> 
                    }
                    </Items>
                </DxMenuItem>
            }
        </Items>
    </DxMenu>
</SDKCard>
<div class="container-fluid">
    <div class="row justify-content-center">
        <div class="col-12">
                @if(SelectedComponent != null && SelectedComponent.ComponentFragment != null)
                {
                    <SDKTabs>
                        <SDKTab IconCssClass="fa-solid fa-eye">
                            <SDKCard>
                                @SelectedComponent.ComponentFragment
                            </SDKCard>
                    
                    </SDKTab>
                        <SDKTab IconCssClass="fa-solid fa-code">  

                            <SDKTextField Value="@ViewSourceCode()"
                            CssClass="tab-text-area"/>

                        </SDKTab>
                    </SDKTabs>
                    }
        </div>
    </div>
</div>
            



@code {

    private IJSObjectReference _jsModule;
    protected override void OnInitialized()
    {
        base.OnInitialized();

        Category = new List<ComponentCategory>()
        {
            new ComponentCategory() {
                Name = "Fields", Components = {
                    new ComponentDemo{ComponentName="SDKBooleanField",ComponentFragment = @<DemoBooleanField /> },
                    new ComponentDemo{ComponentName="SDKBooleanNullableField",ComponentFragment = @<DemoBooleanNullableField /> },
                    new ComponentDemo{ComponentName="SDKCharField",ComponentFragment = @<DemoCharField />},
                    new ComponentDemo{ComponentName="SDKDateField",ComponentFragment = @<DemoDateField />},
                    new ComponentDemo{ComponentName="SDKDecimalField",ComponentFragment = @<DemoDecimalField />},
                    new ComponentDemo{ComponentName="SDKIntegerField",ComponentFragment = @<DemoIntegerField />},
                    new ComponentDemo{ComponentName="SDKTextField",ComponentFragment = @<DemoTextField />},
                    new ComponentDemo{ComponentName="SDKColorPicker",ComponentFragment = @<DemoColorPicker />},
                    new ComponentDemo{ComponentName="SDKKanban",ComponentFragment = @<DemoKanban />},
                    new ComponentDemo{ComponentName="SDKSwitch",ComponentFragment = @<DemoSwitch />},
                    new ComponentDemo{ComponentName="SDKSelectBar",ComponentFragment = @<DemoSelectBar />},
                    new ComponentDemo{ComponentName="SDKSteps",ComponentFragment = @<DemoSteps />},
                    new ComponentDemo{ComponentName="SDKSelectField",ComponentFragment = @<DemoSelectField />},
                    new ComponentDemo{ComponentName="SDKEmailField",ComponentFragment = @<DemoEmailField />},
                    new ComponentDemo{ComponentName="SDKGrid",ComponentFragment = @<DemoGrid />},
                    new ComponentDemo{ComponentName="SDKRecorder",ComponentFragment = @<DemoRecorder />},
                    new ComponentDemo{ComponentName="SDKRadioButton",ComponentFragment = @<DemoRadioButton />},
                    new ComponentDemo{ComponentName="SDKEntityField",ComponentFragment = @<DemoEntityField />},
                    new ComponentDemo{ComponentName="SDKInputFile",ComponentFragment = @<DemoInputFile />}

                }, Icon ="fa-solid fa-cubes"
            },
             new ComponentCategory() {
                Name = "FormManager", Components = {
                    new ComponentDemo{ComponentName="InlineCrud", ComponentFragment = @<DemoInlineCrud />},
                    new ComponentDemo{ComponentName="SDKFormLayout", ComponentFragment = @<DemoFormLayout />},
                    new ComponentDemo{ComponentName="FreeForm", ComponentFragment = @<DemoFreeForm />},
                    new ComponentDemo{ComponentName="DynamicListView", ComponentFragment = @<DemoDynamicListView />},
                    new ComponentDemo{ComponentName="DynamicCreateView", ComponentFragment = @<DemoDynamicCreateView />},
                    new ComponentDemo{ComponentName="DynamicDetailView", ComponentFragment = @<DemoDynamicDetailView />},
                    new ComponentDemo{ComponentName="DynamicEditView", ComponentFragment = @<DemoDynamicEditView />},
                    new ComponentDemo{ComponentName="SDKFlex", ComponentFragment = @<DemoSDKFlex />},
                    },Icon ="fa-solid fa-list"
            },
             new ComponentCategory() {
                Name = "Layout", Components = {
                    new ComponentDemo{ComponentName="RelationshipPanel", ComponentFragment = @<DemoRelationshipPanel />}
                },Icon ="fa-solid fa-layer-group"
            }, 
            new ComponentCategory() {
                Name = "Visualization", Components = {
                    new ComponentDemo{ComponentName="SDKCard", ComponentFragment = @<DemoCard />},
                    new ComponentDemo{ComponentName="SDKConfirmDialog", ComponentFragment = @<DemoConfirmDialog />},
                    new ComponentDemo{ComponentName="SDKBadge", ComponentFragment = @<DemoBadge />},
                    new ComponentDemo{ComponentName="SDKProgessBar", ComponentFragment = @<DemoProgressBar />},
                    new ComponentDemo{ComponentName="SDKButton", ComponentFragment = @<DemoButton />},
                    new ComponentDemo{ComponentName="SDKCollapse", ComponentFragment = @<DemoCollapse />},
                    new ComponentDemo{ComponentName="SDKFileViewer", ComponentFragment = @<DemoFileViewer />},
                    new ComponentDemo{ComponentName="SDKRadialGauge", ComponentFragment = @<DemoRadialGauge />},
                    new ComponentDemo{ComponentName="SDKTabs", ComponentFragment = @<DemoTabs />},
                    new ComponentDemo{ComponentName="SDKGrid",ComponentFragment = @<DemoGrid />},
                    new ComponentDemo{ComponentName="Diagrams",ComponentFragment = @<DemoDiagrams />},
                    new ComponentDemo{ComponentName="SDKImageViewer", ComponentFragment = @<DemoImageViewer />},
                    new ComponentDemo{ComponentName="SDKGlobalLoader", ComponentFragment = @<DemoGlobalLoader />},
                    new ComponentDemo{ComponentName="SDKPieChart", ComponentFragment = @<DemoPieChart />},
                    new ComponentDemo{ComponentName="SDKRangeSlider", ComponentFragment = @<DemoRangeSlider />},
                    new ComponentDemo{ComponentName="ResourceViewer", ComponentFragment = @<DemoResourceViewer />},
                    new ComponentDemo{ComponentName="SDKIcon", ComponentFragment = @<DemoIcon />}
                },Icon ="fa-solid fa-cube" 
            },
            new ComponentCategory() {
                Name = "ViewsBuilder", Components = {
                    new ComponentDemo{ComponentName="Viewdef", ComponentFragment = @<DemoViewdef />}
                },Icon ="fa-solid fa-layer-group"
            }, 
            new ComponentCategory() {
                Name = "DataAnnotations", Components = {
                    new ComponentDemo{ComponentName="SDKApiMethod", ComponentFragment = @<DemoSDKApiMethod />},
                    new ComponentDemo{ComponentName="SDKDataEncrypt", ComponentFragment = @<DemoSDKDataEncrypt />},
                    new ComponentDemo{ComponentName="SDKExposedMethod", ComponentFragment = @<DemoSDKExposedMethod />},
                    new ComponentDemo{ComponentName="SDKCheckRelationship", ComponentFragment = @<DemoSDKCheckRelationship />},
                    new ComponentDemo{ComponentName="SDKExternalView", ComponentFragment = @<DemoSDKExternalView />},
                    new ComponentDemo{ComponentName="SDKIdentity", ComponentFragment = @<DemoSDKIdentity />},
                    new ComponentDemo{ComponentName="SDKLogEntity", ComponentFragment = @<DemoSDKLogEntity />},
                    new ComponentDemo{ComponentName="SDKRequired", ComponentFragment = @<DemoSDKRequired />},
                    new ComponentDemo{ComponentName="SDKMaxLength", ComponentFragment = @<DemoSDKMaxLength />},
                    new ComponentDemo{ComponentName="SDKStringLength", ComponentFragment = @<DemoSDKStringLength />},
                    new ComponentDemo{ComponentName="SDKRegularExpression", ComponentFragment = @<DemoSDKRegularExpression />},
                    new ComponentDemo{ComponentName="SDKCustomType", ComponentFragment = @<DemoSDKCustomType />},
                    new ComponentDemo{ComponentName="SDKSensitiveData", ComponentFragment = @<DemoSDKSensitiveData />}
                },Icon ="fa-solid fa-note-sticky"
            },

            new ComponentCategory()
            {
                Name= "SDKServices", Components = {
                    new ComponentDemo{ComponentName="EmailService", ComponentFragment = @<DemoEmailServices />},
                    new ComponentDemo{ComponentName="SDKNotificationService", ComponentFragment = @<DemoNotificationservices />},
                    new ComponentDemo{ComponentName="FeaturePermissionService", ComponentFragment = @<DemoFeaturePermission/>},
                    new ComponentDemo{ComponentName="ResourceManager", ComponentFragment = @<DemoResourceManager/>},
                    new ComponentDemo{ComponentName="AuthenticationService", ComponentFragment = @<DemoAuthenticationService/>},
                },Icon ="fa-solid fa-code-compare"
            }

        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender || _jsModule == null){
            await ImportJs();
        }
    }
    
    private async Task ImportJs()
    {
        try
        {
            _jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/Siesa.SDK.Frontend/Components/Documentation/SDKDocumentation.razor.js");
        }
        catch (Exception)
        {
        }
        try
        {
            await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/Siesa.SDK.Frontend/js/utils.js");
        }catch (Exception)
        {
        }
    }
    
}








