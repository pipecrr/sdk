@page "/sdk-docs/"
@page "/sdk-docs/{pComponentName}/"
@using SDK.Components.Visualization
@using Siesa.SDK.Frontend.Components
@using Siesa.SDK.Frontend.Components.Documentation.Visualization
@using Siesa.SDK.Frontend.Components.Visualization
@using Siesa.SDK.Frontend.Services
@using Siesa.SDK.Frontend.Components.Fields
@using Siesa.SDK.Frontend.Components.Documentation.Fields
@using Siesa.SDK.Frontend.Components.Documentation.FormManager
@using Siesa.SDK.Frontend.Components.Documentation.Layout
@using Siesa.SDK.Frontend.Components.Documentation.ViewsBuilder
@using Siesa.SDK.Frontend.Components.Documentation.DataAnnotations
@using Siesa.SDK.Frontend.Components.Documentation.Playground
@using Siesa.SDK.Frontend.Components.Documentation.SDKServices

@inject IJSRuntime JSRuntime


@layout EmptyLayout
<SDKGlobalLoader />
<SDKCard StyleCss="cardmenu-content">
    <DxMenu Title="SDK Components" DropDownActionMode="MenuDropDownActionMode.Click" CollapseItemsToHamburgerMenu="true" Orientation="@SDKEnums.GetOrientationMenu(SDKOrientationMenu.Horizontal)" 
        CollapseItemToIconMode="MenuCollapseItemToIconMode.Sequentially">
        <Items>
            @foreach (var cat in Category)
            {
                <DxMenuItem Text="@cat.Name" IconCssClass="@cat.Icon">
                    <Items>
                    @foreach (var subitem in cat.Components)
                    {
                        <DxMenuItem Text="@subitem.ComponentName" NavigateUrl="@GetNavigateUrl(subitem)" /> 
                    }
                    </Items>
                </DxMenuItem>
            }
            <DxMenuItem Text="Playground" IconCssClass="fa-solid fa-code" NavigateUrl="/sdk-docs/playground" />
        </Items>
    </DxMenu>
</SDKCard>
<div class="container-fluid">
    <div class="row justify-content-center">
        <div class="col-12">
                @if(SelectedComponent != null && SelectedComponent.ComponentType != null)
                {
                    if (SelectedComponent.ComponentType == typeof(PlaygroundView))
                    {
                        @* <DynamicComponent Type="@SelectedComponent.ComponentType" /> *@
                    }
                    else
                    {
                        <SDKTabs>
                            <SDKTab IconCssClass="fa-solid fa-eye">
                                <SDKCard>
                                    <DynamicComponent Type="@SelectedComponent.ComponentType" />
                                </SDKCard>
                        
                        </SDKTab>
                            <SDKTab IconCssClass="fa-solid fa-code">
                                <CodeViewer Language="razor" @key="@_codeViewerId" Code="@ViewSourceCode(@SelectedComponent)" CssClass="vh-100" ReadOnly="true" />
                            </SDKTab>
                        </SDKTabs>
                        
                    }
                    }
        </div>
    </div>
</div>
            



@code {

    private IJSObjectReference _jsModule;
    protected override void OnInitialized()
    {
        base.OnInitialized();

        Category = new List<ComponentCategory>()
        {
            new ComponentCategory() {
                Name = "Fields", Components = {
                    new ComponentDemo{ComponentName="SDKBooleanField",ComponentType = typeof(DemoBooleanField)},
                    new ComponentDemo{ComponentName="SDKBooleanNullableField",ComponentType = typeof(DemoBooleanNullableField)},
                    new ComponentDemo{ComponentName="SDKCharField",ComponentType = typeof(DemoCharField)},
                    new ComponentDemo{ComponentName="SDKDateField",ComponentType = typeof(DemoDateField)},
                    new ComponentDemo{ComponentName="SDKDecimalField",ComponentType = typeof(DemoDecimalField)},
                    new ComponentDemo{ComponentName="SDKIntegerField",ComponentType = typeof(DemoIntegerField)},
                    new ComponentDemo{ComponentName="SDKTextField",ComponentType = typeof(DemoTextField)},
                    new ComponentDemo{ComponentName="SDKColorPicker",ComponentType = typeof(DemoColorPicker)},
                    new ComponentDemo{ComponentName="SDKKanban",ComponentType = typeof(DemoKanban)},
                    new ComponentDemo{ComponentName="SDKSwitch",ComponentType = typeof(DemoSwitch)},
                    new ComponentDemo{ComponentName="SDKSelectBar",ComponentType = typeof(DemoSelectBar)},
                    new ComponentDemo{ComponentName="SDKSteps",ComponentType = typeof(DemoSteps)},
                    new ComponentDemo{ComponentName="SDKSelectField",ComponentType = typeof(DemoSelectField)},
                    new ComponentDemo{ComponentName="SDKEmailField",ComponentType = typeof(DemoEmailField)},
                    new ComponentDemo{ComponentName="SDKGrid",ComponentType = typeof(DemoGrid)},
                    new ComponentDemo{ComponentName="SDKRecorder",ComponentType = typeof(DemoRecorder)},
                    new ComponentDemo{ComponentName="SDKRadioButton",ComponentType = typeof(DemoRadioButton)},
                    new ComponentDemo{ComponentName="SDKEntityField",ComponentType = typeof(DemoEntityField)},
                    new ComponentDemo{ComponentName="SDKInputFile",ComponentType = typeof(DemoInputFile)},
                    new ComponentDemo{ComponentName="SDKDateTimeField",ComponentType = typeof(DemoDateTimeField)},
                    new ComponentDemo{ComponentName="SDKDynamicSelectBar",ComponentType = typeof(DemoDynamicSelectBar)}
                }, Icon ="fa-solid fa-cubes"
            },
             new ComponentCategory() {
                Name = "FormManager", Components = {
                    new ComponentDemo{ComponentName="InlineCrud", ComponentType = typeof(DemoInlineCrud)},
                    new ComponentDemo{ComponentName="SDKFormLayout", ComponentType = typeof(DemoFormLayout)},
                    new ComponentDemo{ComponentName="FreeForm", ComponentType = typeof(DemoFreeForm)},
                    new ComponentDemo{ComponentName="DynamicListView", ComponentType = typeof(DemoDynamicListView)},
                    new ComponentDemo{ComponentName="DynamicCreateView", ComponentType = typeof(DemoDynamicCreateView)},
                    new ComponentDemo{ComponentName="DynamicDetailView", ComponentType = typeof(DemoDynamicDetailView)},
                    new ComponentDemo{ComponentName="DynamicEditView", ComponentType = typeof(DemoDynamicEditView)},
                    new ComponentDemo{ComponentName="SDKFlex", ComponentType = typeof(DemoSDKFlex)},
                    },Icon ="fa-solid fa-list"
            },
             new ComponentCategory() {
                Name = "Layout", Components = {
                    new ComponentDemo{ComponentName="RelationshipPanel", ComponentType = typeof(DemoRelationshipPanel)}
                },Icon ="fa-solid fa-layer-group"
            }, 
            new ComponentCategory() {
                Name = "Visualization", Components = {
                    new ComponentDemo{ComponentName="SDKCard", ComponentType = typeof(DemoCard)},
                    new ComponentDemo{ComponentName="SDKConfirmDialog", ComponentType = typeof(DemoConfirmDialog)},
                    new ComponentDemo{ComponentName="SDKBadge", ComponentType = typeof(DemoBadge)},
                    new ComponentDemo{ComponentName="SDKProgessBar", ComponentType = typeof(DemoProgressBar)},
                    new ComponentDemo{ComponentName="SDKButton", ComponentType = typeof(DemoButton)},
                    new ComponentDemo{ComponentName="SDKCollapse", ComponentType = typeof(DemoCollapse)},
                    new ComponentDemo{ComponentName="SDKFileViewer", ComponentType = typeof(DemoFileViewer)},
                    new ComponentDemo{ComponentName="SDKRadialGauge", ComponentType = typeof(DemoRadialGauge)},
                    new ComponentDemo{ComponentName="SDKTabs", ComponentType = typeof(DemoTabs)},
                    new ComponentDemo{ComponentName="SDKGrid",ComponentType = typeof(DemoGrid)},
                    new ComponentDemo{ComponentName="Diagrams",ComponentType = typeof(DemoDiagrams)},
                    new ComponentDemo{ComponentName="SDKImageViewer", ComponentType = typeof(DemoImageViewer)},
                    new ComponentDemo{ComponentName="SDKGlobalLoader", ComponentType = typeof(DemoGlobalLoader)},
                    new ComponentDemo{ComponentName="SDKPieChart", ComponentType = typeof(DemoPieChart)},
                    new ComponentDemo{ComponentName="SDKRangeSlider", ComponentType = typeof(DemoRangeSlider)},
                    new ComponentDemo{ComponentName="ResourceViewer", ComponentType = typeof(DemoResourceViewer)},
                    new ComponentDemo{ComponentName="SDKIcon", ComponentType = typeof(DemoIcon)},
                    new ComponentDemo{ComponentName="SDKButtonTiles", ComponentType = typeof(DemoButtonTiles)},
                    new ComponentDemo{ComponentName="SDKDropDown", ComponentType = typeof(DemoDropDown)},
                    new ComponentDemo{ComponentName="SDKGridLayout", ComponentType = typeof(DemoGridLayout)}
                },Icon ="fa-solid fa-cube" 
            },
            new ComponentCategory() {
                Name = "ViewsBuilder", Components = {
                    new ComponentDemo{ComponentName="Viewdef", ComponentType = typeof(DemoViewdef)}
                },Icon ="fa-solid fa-layer-group"
            }, 
            new ComponentCategory() {
                Name = "DataAnnotations", Components = {
                    new ComponentDemo{ComponentName="SDKApiMethod", ComponentType = typeof(DemoSDKApiMethod)},
                    new ComponentDemo{ComponentName="SDKDataEncrypt", ComponentType = typeof(DemoSDKDataEncrypt)},
                    new ComponentDemo{ComponentName="SDKExposedMethod", ComponentType = typeof(DemoSDKExposedMethod)},
                    new ComponentDemo{ComponentName="SDKCheckRelationship", ComponentType = typeof(DemoSDKCheckRelationship)},
                    new ComponentDemo{ComponentName="SDKExternalView", ComponentType = typeof(DemoSDKExternalView)},
                    new ComponentDemo{ComponentName="SDKIdentity", ComponentType = typeof(DemoSDKIdentity)},
                    new ComponentDemo{ComponentName="SDKLogEntity", ComponentType = typeof(DemoSDKLogEntity)},
                    new ComponentDemo{ComponentName="SDKRequired", ComponentType = typeof(DemoSDKRequired)},
                    new ComponentDemo{ComponentName="SDKMaxLength", ComponentType = typeof(DemoSDKMaxLength)},
                    new ComponentDemo{ComponentName="SDKStringLength", ComponentType = typeof(DemoSDKStringLength)},
                    new ComponentDemo{ComponentName="SDKRegularExpression", ComponentType = typeof(DemoSDKRegularExpression)},
                    new ComponentDemo{ComponentName="SDKCustomType", ComponentType = typeof(DemoSDKCustomType)},
                    new ComponentDemo{ComponentName="SDKSensitiveData", ComponentType = typeof(DemoSDKSensitiveData)}
                },Icon ="fa-solid fa-note-sticky"
            },

            new ComponentCategory()
            {
                Name= "SDKServices", Components = {
                    new ComponentDemo{ComponentName="EmailService", ComponentType = typeof(DemoEmailServices)},
                    new ComponentDemo{ComponentName="SDKNotificationService", ComponentType = typeof(DemoNotificationservices)},
                    new ComponentDemo{ComponentName="FeaturePermissionService", ComponentType = typeof(DemoFeaturePermission)},
                    new ComponentDemo{ComponentName="ResourceManager", ComponentType = typeof(DemoResourceManager)},
                    new ComponentDemo{ComponentName="AuthenticationService", ComponentType = typeof(DemoAuthenticationService)}
                },Icon ="fa-solid fa-code-compare"
            }

        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender || _jsModule == null){
            await ImportJs();
        }
    }
    
    private async Task ImportJs()
    {
        try
        {
            _jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/Siesa.SDK.Frontend/Components/Documentation/SDKDocumentation.razor.js");
        }
        catch (Exception)
        {
        }
        try
        {
            await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/Siesa.SDK.Frontend/js/utils.js");
            await JSRuntime.InvokeVoidAsync("window.loadScript", "_content/BlazorMonaco/jsInterop.js");
            await JSRuntime.InvokeVoidAsync("window.loadScript", "_content/BlazorMonaco/lib/monaco-editor/min/vs/loader.js");
            await JSRuntime.InvokeVoidAsync("window.loadScript", "_content/BlazorMonaco/lib/monaco-editor/min/vs/editor/editor.main.js");
        }catch (Exception)
        {
        }
    }
    
}