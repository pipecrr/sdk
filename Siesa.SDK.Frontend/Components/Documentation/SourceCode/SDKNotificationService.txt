@using Siesa.SDK.Shared.Services
@using Siesa.SDK.Frontend.Components.Visualization
@using Siesa.SDK.Frontend.Services
@using Siesa.SDK.Frontend.Components
@using Siesa.SDK.Frontend.Components.Fields


@inject SDKNotificationService Notification

@layout EmptyLayout


<div class="container-fluid">
    <div class="container-fluid">
            <h2>SDKNotificationService</h2> 
            <p>Demostracion de uso NotificationService</p>
    </div>
    <div class="row px-3"> 
        <div class="col-md-6 p-3">
            <SDKCard >
                <h3>Demo de NotificationService.</h3>
                <p>Lo primero para poder usar este servicio es importar el namespace "Siesa.SDK.Frontend.Services".</p>
                <p>Para poder usar el servicio, se debe inyectar en el componente, de la siguiente manera: 
                    "inject SDKNotificationService Notification" </p>
                <p>Si el servicio se quiere usar desde un BLFront, se debe inyectar a travez del constructor del BL.</p>
                <p>El servicio ofrece 4 tipos de notificaciones(flotantes) distintas y una custom, la cual podemos indicar por parametro que tipo de notificacion queremos mostrar.</p>
                <p>Para mostrar una notificacion, se debe llamar al metodo "ShowError", "ShowWarning", "ShowSuccess", "ShowInfo" o "Notify" del servicio, dependiendo del tipo de notificacion que se quiera mostrar, cualquiera de los mencionados recibe por parametro el tag del recurso, si se le envia texto quemado mostrara "Resource not found:".</p>

            </SDKCard>
        </div>
        <div class="col-md-6 p-3">
            <SDKCard >
                <button class="btn btn-primary m-1" @onclick='(() => GetNotification("Error"))'>Notification Error</button>
                <button class="btn btn-primary m-1" @onclick='(() => GetNotification("Alerta"))'>Notification Alerta</button>
                <button class="btn btn-primary m-1" @onclick='(() => GetNotification("Exito"))'>Notification Exito</button>
                <button class="btn btn-primary m-1" @onclick='(() => GetNotification("Informacion"))'>Notification Informacion</button>
            </SDKCard>
        </div>
        <div class="col-md-6 p-3">
            <SDKCard >
                <h5>Notificacion Custom</h5>
                <p>En este ejemplo veremos como usar el metodo Notify, usando un parametro para indicar cual tipo de notificacion quiero mostrar, digite en el siguiente campo "Error", "Alerta", "Exito" o "Informacion" y presione el boton "Notification Custom":
                </p>
                <SDKCharField @bind-Value="@TextValue"/>

                <button class="btn btn-primary m-1" @onclick='(() => GetNotify(TextValue))'>Notification Custom</button>
            </SDKCard>
        </div> 
        <div class="col-md-6 p-3">
            <SDKCard >
                <h5>Format String en las notificaciones</h5>
                <p>El servicio de notificaciones tambien soporta format string, cualquiera de los metodos anteriores recibe por parametro el tag del recurso y los parametros para el format string.</p>
                <p>Digite en los siguiente campos por ejemplo: Nombre, Apellido y Edad</p>

                <SDKCharField @bind-Value="@Nombre"/>
                
                <SDKCharField @bind-Value="@Apellido"/>

                <SDKCharField @bind-Value="@Edad"/>

                <button class="btn btn-primary m-1" 
                @onclick='(() => GetNotifyFormat(Nombre,Apellido,Edad))'>Notification Format String
                </button>
            </SDKCard>
        </div> 
     </div>
</div>



@code
{

    public string TextValue { get; set; } = "Error";

    public string Nombre { get; set; } = "Nombre";

    public string Apellido { get; set; } = "Apellido";

    public string Edad { get; set; } = "Edad";
    public void GetNotification(string typeNotification)
    {
        switch (typeNotification)
        {
            case "Error":
                Notification.ShowError("Este es un mensaje de error");
                break;
            case "Alerta":
                Notification.ShowWarning("Este es un mensaje de alerta");
                break;
            case "Exito":
                Notification.ShowSuccess("Este es un mensaje de exito");
                break;
            case "Informacion":
                Notification.ShowInfo("Este es un mensaje de informacion");
                break;
            default:
                break;
        }
    
    }

    public void GetNotify(string typeNotification)
    {
        switch (typeNotification)
        {
            case "Error":
                Notification.Notify(SDKNotificationSeverity.Error, "Este es un mensaje de error");
                break;
            case "Alerta":
                Notification.Notify(SDKNotificationSeverity.Warning, "Este es un mensaje de alerta");
                break;
            case "Exito":
                Notification.Notify(SDKNotificationSeverity.Success, "Este es un mensaje de exito");
                break;
            case "Informacion":
                Notification.Notify(SDKNotificationSeverity.Info, "Este es un mensaje de informacion");
                break;
            default:
                Notification.Notify(SDKNotificationSeverity.Info, "Este es un mensaje de informacion");
                break;
        }
    }

    public void GetNotifyFormat(string nombre, string apellido, string edad)
    {
        Notification.Notify(SDKNotificationSeverity.Info, 
        "Hola, tu nombre es: {0}, tu apellido es: {1} y tienes {2} a√±os", new object[] {nombre, apellido, edad});
    } 


    protected override void OnInitialized()
    {
        base.OnInitialized();
    }   

}